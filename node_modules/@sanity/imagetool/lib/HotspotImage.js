'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _debounce2 = require('lodash/debounce');

var _debounce3 = _interopRequireDefault(_debounce2);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _calculateStyles = require('./calculateStyles');

var _calculateStyles2 = _interopRequireDefault(_calculateStyles);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var debug = (0, _debug2.default)('sanity-imagetool');

function getCropAspect(crop, srcAspect) {
  var origHeight = 1 / srcAspect;
  var origWidth = srcAspect * origHeight;
  var cropWidth = origWidth - (crop.left + crop.right) * origWidth;
  var cropHeight = origHeight - (crop.top + crop.bottom) * origHeight;
  return cropWidth / cropHeight;
}

var HotspotImage = function (_React$PureComponent) {
  _inherits(HotspotImage, _React$PureComponent);

  function HotspotImage() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, HotspotImage);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = HotspotImage.__proto__ || Object.getPrototypeOf(HotspotImage)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      containerAspect: null
    }, _this.setImageElement = function (el) {
      _this.imageElement = el;
    }, _this.handleResize = (0, _debounce3.default)(function () {
      return _this.updateContainerAspect(_this.props);
    }), _this.setContainerElement = function (el) {
      _this.containerElement = el;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(HotspotImage, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var imageElement = this.imageElement;
      // Fixes issues that may happen if the component is rendered on server and mounted after the image has finished loading
      // In these situations, neither the onLoad or the onError events will be called.
      // Derived from http://imagesloaded.desandro.com/
      var alreadyLoaded = imageElement.src && imageElement.complete && imageElement.naturalWidth !== undefined;
      if (alreadyLoaded) {
        debug("Image '%s' already loaded, refreshing (from cache) to trigger onLoad / onError", this.props.src);
        imageElement.src = imageElement.src;
      }

      this.updateContainerAspect(this.props);
      window.addEventListener('resize', this.handleResize);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.removeEventListener('resize', this.handleResize);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.aspectRatio !== this.props.aspectRatio) {
        this.updateContainerAspect(nextProps);
      }
    }
  }, {
    key: 'updateContainerAspect',
    value: function updateContainerAspect(props) {
      if (props.aspectRatio === 'auto') {
        var parentNode = this.containerElement.parentNode;
        this.setState({
          containerAspect: parentNode.offsetWidth / parentNode.offsetHeight
        });
      } else {
        this.setState({
          containerAspect: null
        });
      }
    }
  }, {
    key: 'getTargetAspectValue',
    value: function getTargetAspectValue() {
      var _props = this.props,
          aspectRatio = _props.aspectRatio,
          srcAspectRatio = _props.srcAspectRatio,
          crop = _props.crop;


      if (aspectRatio === 'none') {
        return getCropAspect(crop, srcAspectRatio);
      }
      if (aspectRatio === 'auto') {
        return this.state.containerAspect;
      }
      return aspectRatio;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          srcAspectRatio = _props2.srcAspectRatio,
          crop = _props2.crop,
          hotspot = _props2.hotspot,
          src = _props2.src,
          srcSet = _props2.srcSet,
          alignX = _props2.alignX,
          alignY = _props2.alignY,
          className = _props2.className,
          style = _props2.style,
          alt = _props2.alt,
          onError = _props2.onError,
          onLoad = _props2.onLoad;


      var targetAspect = this.getTargetAspectValue();

      var targetStyles = (0, _calculateStyles2.default)({
        container: { aspectRatio: targetAspect },
        image: { aspectRatio: srcAspectRatio },
        hotspot: hotspot,
        crop: crop,
        align: {
          x: alignX,
          y: alignY
        }
      });
      return _react2.default.createElement(
        'div',
        { className: className, style: style, ref: this.setContainerElement },
        _react2.default.createElement(
          'div',
          { style: targetStyles.container },
          _react2.default.createElement('div', { style: targetStyles.padding }),
          _react2.default.createElement(
            'div',
            { style: targetStyles.crop },
            _react2.default.createElement('img', {
              ref: this.setImageElement,
              src: src,
              alt: alt,
              srcSet: srcSet,
              onLoad: onLoad,
              onError: onError,
              style: targetStyles.image
            })
          )
        )
      );
    }
  }]);

  return HotspotImage;
}(_react2.default.PureComponent);

HotspotImage.propTypes = {
  src: _propTypes2.default.string.isRequired,
  srcAspectRatio: _propTypes2.default.number.isRequired,
  srcSet: _propTypes2.default.string,
  hotspot: _propTypes2.default.object.isRequired,
  crop: _propTypes2.default.object.isRequired,
  width: _propTypes2.default.number,
  aspectRatio: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.oneOf(['auto', 'none'])]),
  alignX: _propTypes2.default.oneOf(['center', 'left', 'right']),
  alignY: _propTypes2.default.oneOf(['center', 'top', 'bottom']),
  className: _propTypes2.default.string,
  style: _propTypes2.default.object,
  alt: _propTypes2.default.string,
  onError: _propTypes2.default.func,
  onLoad: _propTypes2.default.func
};
HotspotImage.defaultProps = {
  alignX: 'center',
  alignY: 'center',
  crop: _constants.DEFAULT_CROP,
  hotspot: _constants.DEFAULT_HOTSPOT,
  aspectRatio: 'none'
};
exports.default = HotspotImage;