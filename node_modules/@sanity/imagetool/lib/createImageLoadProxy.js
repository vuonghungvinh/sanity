'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = createImageLoadProxy;

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function createImageLoadProxy(Component) {
  var _class, _temp2;

  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      ErrorComponent = _ref.error,
      LoaderComponent = _ref.loader;

  return _temp2 = _class = function (_React$Component) {
    _inherits(ImageLoadProxy, _React$Component);

    function ImageLoadProxy() {
      var _ref2;

      var _temp, _this, _ret;

      _classCallCheck(this, ImageLoadProxy);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = ImageLoadProxy.__proto__ || Object.getPrototypeOf(ImageLoadProxy)).call.apply(_ref2, [this].concat(args))), _this), _this.state = {
        image: null,
        error: null
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(ImageLoadProxy, [{
      key: 'componentWillMount',
      value: function componentWillMount() {
        this.loadImage(this.props.src);
      }
    }, {
      key: 'loadImage',
      value: function loadImage(src) {
        var _this2 = this;

        var image = new Image();
        this.setState({
          image: null,
          error: null
        });

        image.onload = function () {
          _this2.setState({
            image: image,
            error: null
          });
        };

        image.onerror = function () {
          _this2.setState({ error: new Error('Could not load image from ' + JSON.stringify(_this2.props.src)) });
        };

        image.src = src;
      }
    }, {
      key: 'componentWillReceiveProps',
      value: function componentWillReceiveProps(nextProps) {
        if (nextProps.src !== this.props.src) {
          this.loadImage(nextProps.src);
        }
      }
    }, {
      key: 'render',
      value: function render() {
        var _state = this.state,
            error = _state.error,
            image = _state.image;


        if (!error && !image) {
          // loading
          return LoaderComponent ? _react2.default.createElement(LoaderComponent, this.props) : null;
        }
        if (error) {
          return ErrorComponent ? _react2.default.createElement(ErrorComponent, _extends({}, this.props, { error: error })) : null;
        }
        return _react2.default.createElement(Component, _extends({}, this.props, { image: image }));
      }
    }]);

    return ImageLoadProxy;
  }(_react2.default.Component), _class.displayName = (Component.displayName || Component.name || '<Anonymous>') + '$ImageLoadProxy', _class.propTypes = {
    src: _propTypes2.default.string.isRequired
  }, _temp2;
}