'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _omit2 = require('lodash/omit');

var _omit3 = _interopRequireDefault(_omit2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = makeDragAware;

var _domEvent = require('dom-event');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var debug = (0, _debug2.default)('sanity-imagetool');

// Returns a component that emits `onDragStart, `onDrag` and `onDragEnd` events.
// It handles mouse/touch events the same way
// - `onDragStart` is called with the {x, y} positions relative from the dom node (e.g. where the mousedown event happened)
// - `onDrag` and `onDragEnd` are both called with the {x, y} difference from the previous position
function makeDragAware(Component) {
  var _class, _temp2;

  return _temp2 = _class = function (_React$PureComponent) {
    _inherits(DragAware, _React$PureComponent);

    function DragAware() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, DragAware);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = DragAware.__proto__ || Object.getPrototypeOf(DragAware)).call.apply(_ref, [this].concat(args))), _this), _this.setDomNode = function (node) {
        _this.domNode = node;
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(DragAware, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        var _props = this.props,
            onDragStart = _props.onDragStart,
            onDrag = _props.onDrag,
            onDragEnd = _props.onDragEnd;

        debug('Draggable component did mount');
        var win = getWindow();
        var supportsTouch = 'ontouchstart' in window;
        var domNode = this.domNode;

        var EVENT_NAMES = {
          start: supportsTouch ? 'touchstart' : 'mousedown',
          move: supportsTouch ? 'touchmove' : 'mousemove',
          end: supportsTouch ? 'touchend' : 'mouseup'
        };

        var dragging = false;
        var currentPos = null;

        var moveListener = void 0;
        var endListener = void 0;

        var startListener = listen(win, EVENT_NAMES.start, handleMouseDown);

        this.getDisposables = function () {
          return [moveListener, endListener, startListener];
        };

        function handleMouseDown(event) {
          if (dragging) {
            debug('Start cancelled, already a drag in progress');
            return;
          }
          if (event.target !== domNode) {
            // Event happened outside of this dom node
            return;
          }
          event.preventDefault();
          dragging = true;
          var nextPos = getPos(event);
          debug('Drag started %o', nextPos);
          onDragStart(getPositionRelativeToRect(nextPos.x, nextPos.y, domNode.getBoundingClientRect()));
          moveListener = listen(win, EVENT_NAMES.move, handleMouseMove);
          endListener = listen(win, EVENT_NAMES.end, handleMouseUp);
          currentPos = nextPos;
        }

        function handleMouseUp(event) {
          if (!dragging) {
            throw new Error('Got mouseup on a component that was not dragging.');
          }
          event.preventDefault();
          var nextPos = getPos(event);
          onDragEnd(getPositionRelativeToRect(nextPos.x, nextPos.y, domNode.getBoundingClientRect()));
          dragging = false;
          currentPos = null;

          moveListener.dispose();
          moveListener = null;

          endListener.dispose();
          endListener = null;

          debug('Done moving %o', nextPos);
        }

        function handleMouseMove(event) {
          event.preventDefault();
          var nextPos = getPos(event);
          var diff = diffPos(nextPos, currentPos);
          onDrag(diff);
          debug('moving by %o', diff);
          currentPos = nextPos;
        }
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        debug('Disposing event listeners');
        this.getDisposables().filter(Boolean).forEach(function (disposable) {
          return disposable.dispose();
        });
      }
    }, {
      key: 'render',
      value: function render() {
        return _react2.default.createElement(Component, _extends({ ref: this.setDomNode }, (0, _omit3.default)(this.props, ['onDragStart', 'onDragEnd', 'onDrag'])));
      }
    }]);

    return DragAware;
  }(_react2.default.PureComponent), _class.propTypes = {
    onDragStart: _propTypes2.default.func,
    onDrag: _propTypes2.default.func,
    onDragEnd: _propTypes2.default.func
  }, _temp2;
}

function getPositionRelativeToRect(x, y, rect) {
  return {
    x: x - rect.left,
    y: y - rect.top
  };
}

function getWindow() {
  /* global window */
  return typeof window === 'undefined' ? null : window;
}

function getPos(event) {
  if (event instanceof TouchEvent) {
    return event.touches.length ? getPos(event.touches[0]) : { x: 0, y: 0 };
  }
  return {
    x: event.clientX,
    y: event.clientY
  };
}

function diffPos(pos, otherPos) {
  return {
    x: pos.x - otherPos.x,
    y: pos.y - otherPos.y
  };
}

function listen(element, type, handler) {
  (0, _domEvent.on)(element, type, handler);
  return {
    dispose: function dispose() {
      (0, _domEvent.off)(element, type, handler);
    }
  };
}