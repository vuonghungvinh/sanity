'use strict';

var path = require('path');
var fse = require('fs-extra');
var promiseProps = require('promise-props-recursive');
var generateHelpUrl = require('@sanity/generate-help-url');
var resolveParts = require('@sanity/resolver').resolveParts;

var includes = function includes(arr, val) {
  return arr.indexOf(val) !== -1;
};

function sanityCheck(options) {
  return resolveParts({
    basePath: options.dir,
    useCompiledPaths: options.productionMode
  }).then(function (parts) {
    return checkImplementations(parts, options);
  });
}

function checkImplementations(result, options) {
  var implementations = result.implementations;
  if (!implementations) {
    return Promise.resolve('No implementations found, nothing to check');
  }

  var fulfillers = Object.keys(implementations).reduce(function (impls, partName) {
    return impls.concat(implementations[partName].map(function (impl) {
      return {
        partName: partName,
        plugin: impl.plugin,
        path: impl.path,
        dirName: path.dirname(impl.path),
        fileName: path.basename(impl.path)
      };
    }));
  }, []);

  return getFolderContents(fulfillers.map(function (impl) {
    return impl.dirName;
  })).then(function (folders) {
    return verifyImplementationsExist(fulfillers, folders);
  }).then(function (results) {
    return throwOnErrors(results, options);
  });
}

function throwOnErrors(results, options) {
  var errors = results.filter(function (result) {
    return result instanceof Error;
  }).map(function (err) {
    return ' * ' + err.message;
  });

  if (errors.length > 0) {
    if (options.productionMode) {
      errors.push(getProductionHint());
    }

    var err = new Error(errors.join('\n\n'));
    err.messages = errors;
    err.sanityCheck = true;
    throw err;
  }
}

function getFolderContents(dirs) {
  return promiseProps(dirs.reduce(function (folders, dir) {
    if (!folders[dir]) {
      folders[dir] = fse.readdir(dir).catch(function () {
        return [];
      });
    }
    return folders;
  }, {}));
}

function verifyImplementationsExist(implementations, folderContents) {
  return Promise.all(implementations.map(function (impl) {
    return verifyImplementationExists(impl, folderContents[impl.dirName]);
  }));
}

function verifyImplementationExists(impl, parentDirContent) {
  // Case-sensitive check
  var containsFile = includes(parentDirContent, impl.fileName);
  var containsJsFile = includes(parentDirContent, impl.fileName + '.js');
  if (containsFile) {
    return isFileOrDirectoryWithIndex(impl);
  } else if (containsJsFile) {
    return true;
  }

  // Case-insensitive check
  var targetFile = impl.fileName.toLowerCase();
  var targetJsFile = targetFile + '.js';
  var found = parentDirContent.find(function (file) {
    return file.toLowerCase() === targetFile || file.toLowerCase() === targetJsFile;
  });

  if (found) {
    return new Error('Part "' + impl.partName + '" was attempted to be implemented by "' + impl.path + '",' + ('but the file is actually located at "' + path.join(impl.dirName, found) + '" -') + ' Sanity uses case-sensitive file names.');
  }

  // Directory/index.js check
  return isFileOrDirectoryWithIndex(impl);
}

function checkImplementationMsg(impl) {
  var location = impl.plugin === '(project root)' ? 'Check "sanity.json"' : 'Check "' + impl.plugin + '"';

  return location + ' and keep in mind that paths in Sanity are case-sensitive.';
}

function isFileOrDirectoryWithIndex(impl) {
  return fse.stat(impl.path).then(function (stats) {
    return stats.isDirectory() ? directoryHasIndex(impl) : true;
  }).catch(function () {
    return new Error('Part "' + impl.partName + '" was attempted to be implemented by "' + impl.path + '", ' + ('which does not seem to exist. ' + checkImplementationMsg(impl)));
  });
}

function directoryHasIndex(impl) {
  return fse.readdir(impl.path).then(function (dirContent) {
    return includes(dirContent, 'index.js') ? true : new Error('Part "' + impl.partName + '" was attempted to be implemented by "' + impl.path + '", ' + 'which is a directory without an "index.js". Please point to a filename.');
  });
}

/* eslint-disable prefer-template */
function getProductionHint() {
  return '[NOTE]: sanity-check is running in production mode - ' + 'perhaps you have defined a `compiled` path in `sanity.json`? ' + 'This tells Sanity to look for the files in a different location ' + 'when running in production mode. When publishing plugins to npm ' + 'you should make sure to publish precompiled files. See ' + generateHelpUrl('source-vs-compiled-paths');
}
/* eslint-enable prefer-template */

module.exports = sanityCheck;