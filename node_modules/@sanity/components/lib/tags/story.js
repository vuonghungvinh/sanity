'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _storybook = require('part:@sanity/storybook');

var _textfield = require('part:@sanity/components/tags/textfield');

var _textfield2 = _interopRequireDefault(_textfield);

var _knobs = require('part:@sanity/storybook/addons/knobs');

var _sanity = require('part:@sanity/storybook/addons/sanity');

var _sanity2 = _interopRequireDefault(_sanity);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DefaultTextFieldTagsImplementation = function (_React$Component) {
  _inherits(DefaultTextFieldTagsImplementation, _React$Component);

  function DefaultTextFieldTagsImplementation() {
    var _ref;

    _classCallCheck(this, DefaultTextFieldTagsImplementation);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = DefaultTextFieldTagsImplementation.__proto__ || Object.getPrototypeOf(DefaultTextFieldTagsImplementation)).call.apply(_ref, [this].concat(args)));

    _this.handleAddTag = _this.handleAddTag.bind(_this);
    _this.handleRemoveTag = _this.handleRemoveTag.bind(_this);

    _this.state = {
      tags: _this.props.tags || []
    };
    return _this;
  }

  _createClass(DefaultTextFieldTagsImplementation, [{
    key: 'handleAddTag',
    value: function handleAddTag(tag) {
      var tags = this.state.tags.concat();
      tags.push(tag);
      this.setState({
        tags: tags
      });
    }
  }, {
    key: 'handleRemoveTag',
    value: function handleRemoveTag(i) {
      var tags = this.state.tags.concat();
      tags.splice(i, 1);
      this.setState({
        tags: tags
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(_textfield2.default, {
        label: 'Tags',
        placeholder: 'This is the placeholder',
        tags: this.state.tags,
        onAddTag: this.handleAddTag,
        onRemoveTag: this.handleRemoveTag
      });
    }
  }]);

  return DefaultTextFieldTagsImplementation;
}(_react2.default.Component);

DefaultTextFieldTagsImplementation.propTypes = {
  tags: _propTypes2.default.arrayOf(_propTypes2.default.string)
};


(0, _storybook.storiesOf)('Tags').addDecorator(_knobs.withKnobs).add('Tags', function () {
  var tags = ['Test', 'Sanity'];

  return _react2.default.createElement(
    _sanity2.default,
    { part: 'part:@sanity/components/tags/textfield', propTables: [_textfield2.default] },
    _react2.default.createElement(_textfield2.default, {
      label: (0, _knobs.text)('label (prop)', 'Tags'),
      placeholder: (0, _knobs.text)('placeholder (prop)', 'This is the placeholder'),
      tags: (0, _knobs.array)('tags (prop)', tags),
      onAddTag: (0, _storybook.action)('onAddTag'),
      onRemoveTag: (0, _storybook.action)('onRemoveTag')
    })
  );
}).add('Tags (test)', function () {
  var tags = ['Test', 'Sanity', 'React', 'Computer', 'Macbook', 'Awesome', 'Windows', 'CPU', 'Moore', 'Intel', 'Ada', 'Enigma'];

  return _react2.default.createElement(
    _sanity2.default,
    { part: 'part:@sanity/components/tags/textfield', propTables: [_textfield2.default] },
    _react2.default.createElement(DefaultTextFieldTagsImplementation, { tags: (0, _knobs.array)('tags (prop)', tags) })
  );
});