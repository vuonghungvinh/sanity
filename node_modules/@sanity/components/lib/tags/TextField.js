'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _uniqueId2 = require('lodash/uniqueId');

var _uniqueId3 = _interopRequireDefault(_uniqueId2);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _textfieldStyle = require('part:@sanity/components/tags/textfield-style');

var _textfieldStyle2 = _interopRequireDefault(_textfieldStyle);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TagsTextField = function (_React$Component) {
  _inherits(TagsTextField, _React$Component);

  function TagsTextField(props, context) {
    _classCallCheck(this, TagsTextField);

    var _this = _possibleConstructorReturn(this, (TagsTextField.__proto__ || Object.getPrototypeOf(TagsTextField)).call(this, props, context));

    _this.handleKeyPress = _this.handleKeyPress.bind(_this);
    _this.handleKeyDown = _this.handleKeyDown.bind(_this);
    _this.handleSetFocus = _this.handleSetFocus.bind(_this);
    _this.handleFocus = _this.handleFocus.bind(_this);
    _this.handleBlur = _this.handleBlur.bind(_this);

    _this.state = {
      length: 4,
      hasFocus: _this.props.hasFocus
    };
    return _this;
  }

  _createClass(TagsTextField, [{
    key: 'addTag',
    value: function addTag(title) {
      this.props.onAddTag(title);
    }
  }, {
    key: 'removeTag',
    value: function removeTag(i) {
      this.props.onRemoveTag(i);
    }
  }, {
    key: 'handleKeyDown',
    value: function handleKeyDown(event) {
      var value = this._input.value;
      if (event.key === 'Backspace' && value === '') {
        this.removeTag(this.props.tags.length - 1);
      }

      // length is used for styling purpose
      this.setState({
        length: value.length > 3 ? value.length : 3
      });
    }
  }, {
    key: 'handleKeyPress',
    value: function handleKeyPress(event) {
      var value = this._input.value;

      if (event.key === 'Enter') {
        if (value) {
          this.addTag(value);
        }
        this._input.value = '';
      }
    }
  }, {
    key: 'handleSetFocus',
    value: function handleSetFocus() {
      this._input.focus();
    }
  }, {
    key: 'handleFocus',
    value: function handleFocus() {
      this.setState({
        hasFocus: true
      });
    }
  }, {
    key: 'handleBlur',
    value: function handleBlur() {
      var value = this._input.value;
      if (value) {
        this.addTag(value);
        this._input.value = '';
      }
      this.setState({
        hasFocus: false
      });
    }
  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      this._inputId = (0, _uniqueId3.default)('DefaultTextField');
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var tags = this.props.tags;

      var setInput = function setInput(component) {
        _this2._input = component;
      };
      return _react2.default.createElement(
        'div',
        { className: _textfieldStyle2.default.wrapper },
        _react2.default.createElement(
          'div',
          { className: '' + _textfieldStyle2.default.inner },
          _react2.default.createElement(
            'div',
            { className: _textfieldStyle2.default.content, onClick: this.handleSetFocus },
            _react2.default.createElement(
              'ul',
              { className: _textfieldStyle2.default.tags },
              tags && tags.map(function (tag, i) {
                return _react2.default.createElement(
                  'li',
                  { key: i, className: _textfieldStyle2.default.tag },
                  tag,
                  _react2.default.createElement(
                    'a',
                    {
                      onClick: _this2.removeTag.bind(_this2, i) // eslint-disable-line react/jsx-no-bind
                      , className: _textfieldStyle2.default.clearTag
                    },
                    '\xD7'
                  )
                );
              })
            ),
            _react2.default.createElement('input', {
              className: _textfieldStyle2.default.input,
              onKeyDown: this.handleKeyDown,
              onKeyPress: this.handleKeyPress,
              style: { width: this.state.length * 0.8 + 'em' },
              onBlur: this.handleBlur,
              onFocus: this.handleFocus,
              ref: setInput,
              id: this._inputId,
              autoComplete: 'off'
            })
          ),
          _react2.default.createElement('div', { className: _textfieldStyle2.default.focusHelper })
        )
      );
    }
  }]);

  return TagsTextField;
}(_react2.default.Component);

TagsTextField.propTypes = {
  label: _propTypes2.default.string.isRequired,
  onAddTag: _propTypes2.default.func.isRequired,
  onRemoveTag: _propTypes2.default.func.isRequired,
  error: _propTypes2.default.bool,
  hasFocus: _propTypes2.default.bool,
  isClearable: _propTypes2.default.bool,
  tags: _propTypes2.default.arrayOf(_propTypes2.default.string),
  description: _propTypes2.default.string,
  level: _propTypes2.default.number
};
TagsTextField.defaultProps = {
  tags: []
};
exports.default = TagsTextField;