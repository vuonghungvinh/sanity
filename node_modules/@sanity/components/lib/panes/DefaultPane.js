'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _DefaultPane = require('./styles/DefaultPane.css');

var _DefaultPane2 = _interopRequireDefault(_DefaultPane);

var _moreVertIcon = require('part:@sanity/base/more-vert-icon');

var _moreVertIcon2 = _interopRequireDefault(_moreVertIcon);

var _default = require('part:@sanity/components/buttons/default');

var _default2 = _interopRequireDefault(_default);

var _Styleable = require('../utilities/Styleable');

var _Styleable2 = _interopRequireDefault(_Styleable);

var _scrollContainer = require('part:@sanity/components/utilities/scroll-container');

var _scrollContainer2 = _interopRequireDefault(_scrollContainer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Pane = function (_React$PureComponent) {
  _inherits(Pane, _React$PureComponent);

  function Pane() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Pane);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Pane.__proto__ || Object.getPrototypeOf(Pane)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      headerStyle: {
        opacity: 0,
        boxShadow: 'none'
      }
    }, _this.handleMenuToggle = function (event) {
      if (_this.props.isCollapsed) {
        _this.props.onExpand(event);
      } else {
        _this.props.onMenuToggle(event);
      }
    }, _this.handleToggle = function (event) {
      if (_this.props.isCollapsed) {
        _this.props.onExpand(_this);
      } else {
        _this.props.onCollapse(_this);
      }
    }, _this.setScrollShadow = function (scrollTop) {
      var threshold = 100;
      if (scrollTop < threshold) {
        var ratio = scrollTop / threshold;
        _this.setState({
          headerStyle: {
            opacity: ratio + 0.5,
            boxShadow: '0 2px ' + 3 * ratio + 'px rgba(0, 0, 0, ' + ratio * 0.3 + ')'
          }
        });
      } else {
        _this.setState({
          headerStyle: {
            opacity: 1,
            boxShadow: '0 2px 3px rgba(0, 0, 0, 0.3)'
          }
        });
      }

      if (scrollTop < 0) {
        _this.setState({
          headerStyle: {
            boxShadow: 'none'
          }
        });
      }
    }, _this.handleContentScroll = function (event) {
      _this.setScrollShadow(event.target.scrollTop);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Pane, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.scrollTop !== this.props.scrollTop) {
        this.setScrollShadow(nextProps.scrollTop);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          title = _props.title,
          children = _props.children,
          isSelected = _props.isSelected,
          renderFunctions = _props.renderFunctions,
          renderMenu = _props.renderMenu,
          isCollapsed = _props.isCollapsed,
          isScrollable = _props.isScrollable,
          styles = _props.styles;


      return _react2.default.createElement(
        'div',
        {
          className: '\n          ' + (isCollapsed ? styles.isCollapsed : styles.root) + '\n          ' + (isScrollable ? styles.isScrollable : '') + '\n          ' + (isSelected ? styles.isActive : '') + '\n        ',
          ref: this.setRootElement
        },
        _react2.default.createElement(
          'div',
          {
            className: styles.header,
            style: {
              boxShadow: isCollapsed ? '' : this.state.headerStyle.boxShadow
            }
          },
          _react2.default.createElement(
            'div',
            { className: styles.headerContent },
            _react2.default.createElement(
              'h2',
              { className: styles.title, onClick: this.handleToggle },
              title
            ),
            renderFunctions(isCollapsed)
          ),
          _react2.default.createElement(
            'div',
            { className: styles.menuWrapper },
            _react2.default.createElement(
              'div',
              { className: styles.menuButtonContainer },
              renderMenu(isCollapsed) && _react2.default.createElement(_default2.default, {
                kind: 'simple',
                icon: _moreVertIcon2.default,
                onClick: this.handleMenuToggle,
                className: styles.menuButton
              })
            ),
            _react2.default.createElement(
              'div',
              { className: styles.menuContainer },
              renderMenu(isCollapsed)
            )
          ),
          _react2.default.createElement('div', {
            className: styles.headerBackground,
            style: {
              opacity: isCollapsed ? '' : this.state.headerStyle.opacity
            }
          })
        ),
        _react2.default.createElement(
          'div',
          { className: styles.main },
          _react2.default.createElement(
            _scrollContainer2.default,
            { className: styles.content, onScroll: this.handleContentScroll },
            children
          )
        )
      );
    }
  }]);

  return Pane;
}(_react2.default.PureComponent);

Pane.propTypes = {
  title: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
  isCollapsed: _propTypes2.default.bool,
  onExpand: _propTypes2.default.func,
  onCollapse: _propTypes2.default.func,
  minWidth: _propTypes2.default.number,
  width: _propTypes2.default.number,
  renderMenu: _propTypes2.default.func,
  renderFunctions: _propTypes2.default.func,
  children: _propTypes2.default.node,
  isSelected: _propTypes2.default.bool,
  isScrollable: _propTypes2.default.bool,
  onMenuToggle: _propTypes2.default.func,
  className: _propTypes2.default.string,
  styles: _propTypes2.default.object,
  scrollTop: _propTypes2.default.number
};
Pane.defaultProps = {
  title: 'Untitled',
  isCollapsed: false,
  className: '',
  isScrollable: true,
  minWidth: 0,
  width: 0,
  styles: {},
  children: _react2.default.createElement('div', null),
  onCollapse: function onCollapse() {},
  onExpand: function onExpand() {},
  renderMenu: function renderMenu() {
    return false;
  },
  renderFunctions: function renderFunctions() {},

  isActive: false,
  updateId: 0,
  scrollTop: undefined,
  onMenuToggle: function onMenuToggle() {
    return true;
  }
};
exports.default = (0, _Styleable2.default)(Pane, _DefaultPane2.default);