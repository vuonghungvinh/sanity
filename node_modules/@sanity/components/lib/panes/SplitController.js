'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _debounce2 = require('lodash/debounce');

var _debounce3 = _interopRequireDefault(_debounce2);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _SplitController = require('./styles/SplitController.css');

var _SplitController2 = _interopRequireDefault(_SplitController);

var _reactSplitPane = require('react-split-pane');

var _reactSplitPane2 = _interopRequireDefault(_reactSplitPane);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var COLLAPSED_WIDTH = 54;

var PanesSplitController = function (_React$Component) {
  _inherits(PanesSplitController, _React$Component);

  function PanesSplitController() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, PanesSplitController);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = PanesSplitController.__proto__ || Object.getPrototypeOf(PanesSplitController)).call.apply(_ref, [this].concat(args))), _this), _this.isResizing = false, _this.handleSplitPaneChange = (0, _debounce3.default)(function (size, pane) {
      if (size <= pane.props.minWidth) {
        _this.props.onSholdCollapse(pane);
      } else {
        _this.props.onSholdExpand(pane);
      }

      _this.lastPaneSize = size;
    }, 50), _this.handleDragStarted = function () {
      _this.isResizing = true;
    }, _this.handleDragFinished = function () {
      _this.isResizing = false;
    }, _this.renderSplitPane = function (pane1, pane2, restMinWidth, restDefaultWidth) {
      var isCollapsed = pane1.props.isCollapsed;

      // Handle size override when collapsing
      var size = isCollapsed ? COLLAPSED_WIDTH : undefined;
      if (_this.isResizing) {
        size = undefined;
      } else if (isCollapsed) {
        size = COLLAPSED_WIDTH;
      } else {
        size = pane1.props.defaultWidth;
      }

      return _react2.default.createElement(
        'div',
        {
          className: '\n          ' + _SplitController2.default.splitWrapper + '\n          ' + (pane2 ? _SplitController2.default.doubleWrapper : _SplitController2.default.singleWrapper) + '\n          ' + (isCollapsed ? _SplitController2.default.isCollapsed : _SplitController2.default.notCollapsed) + '\n        '
        },
        _react2.default.createElement(
          _reactSplitPane2.default,
          {
            minSize: isCollapsed ? COLLAPSED_WIDTH : pane1.props.minWidth,
            defaultSize: isCollapsed ? COLLAPSED_WIDTH : pane1.props.defaultWidth,
            size: size,
            resizerClassName: isCollapsed ? _SplitController2.default.ResizerIsCollapsed : _SplitController2.default.Resizer,
            allowResize: true,
            className: _SplitController2.default.splitPane,
            onDragStarted: _this.handleDragStarted,
            onDragFinished: _this.handleDragFinished,
            onChange: function onChange(newSize) {
              return _this.handleSplitPaneChange(newSize, pane1);
            }
          },
          _react2.default.createElement(
            'div',
            {
              className: isCollapsed ? _SplitController2.default.paneInSplittedCollapsed : _SplitController2.default.paneInSplitted
            },
            pane1
          ),
          pane2 || ' '
        )
      );
    }, _this.renderRecursivePanes = function (panes) {
      // only 1 pane left
      if (panes.length === 1) {
        return _this.renderSplitPane(panes[0]);
      }

      // only 2 panes left
      if (panes.length === 2) {
        return _this.renderSplitPane(panes[0], _this.renderSplitPane(panes[1]));
      }

      // Recursive
      var remainingPanes = panes.slice(1);
      return _this.renderSplitPane(panes[0], _this.renderRecursivePanes(remainingPanes));
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(PanesSplitController, [{
    key: 'render',
    value: function render() {
      var children = this.props.children;

      var panes = _react2.default.Children.toArray(children);

      if (panes.length === 0) {
        return _react2.default.createElement(
          'div',
          null,
          'No panes'
        );
      }

      // TODO We need a way to target mobile devices in JS
      // --screen-medium-break: 32em;  ~32 * 16 = 512
      var isMobile = window && window.innerWidth < 512;

      return _react2.default.createElement(
        'div',
        { className: _SplitController2.default.vertical },
        isMobile ? children : this.renderRecursivePanes(panes.filter(function (pane) {
          return pane.type !== 'div';
        }))
      );
    }
  }]);

  return PanesSplitController;
}(_react2.default.Component);

PanesSplitController.propTypes = {
  children: _propTypes2.default.node.isRequired,
  onSholdCollapse: _propTypes2.default.func,
  onSholdExpand: _propTypes2.default.func
};
PanesSplitController.defaultProps = {
  onSholdCollapse: function onSholdCollapse() {},
  onSholdExpand: function onSholdExpand() {}
};
exports.default = PanesSplitController;