'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _debounce2 = require('lodash/debounce');

var _debounce3 = _interopRequireDefault(_debounce2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Controller = require('./styles/Controller.css');

var _Controller2 = _interopRequireDefault(_Controller);

var _DefaultPane = require('./DefaultPane');

var _DefaultPane2 = _interopRequireDefault(_DefaultPane);

var _elementResizeDetector = require('element-resize-detector');

var _elementResizeDetector2 = _interopRequireDefault(_elementResizeDetector);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PanesController = function (_React$Component) {
  _inherits(PanesController, _React$Component);

  function PanesController(props) {
    _classCallCheck(this, PanesController);

    var _this = _possibleConstructorReturn(this, (PanesController.__proto__ || Object.getPrototypeOf(PanesController)).call(this));

    _this._elementResizeDetector = (0, _elementResizeDetector2.default)({ strategy: 'scroll' });

    _this.updatePanesStatus = function (panes) {
      console.log('Update Panes Status'); // eslint-disable-line

      var newPanesStatus = _react2.default.Children.toArray(panes).map(function (pane, i) {
        var minWidth = pane.props.minWidth;
        var width = _this.panesStatus[i] && _this.panesStatus[i].element && _this.panesStatus[i].element.offsetWidth;
        var isCollapsed = _this.panesStatus[i] && _this.panesStatus[i].isCollapsed;

        if (width < minWidth) {
          isCollapsed = true;
        }

        return {
          isCollapsed: isCollapsed,
          minWidth: minWidth,
          width: width || null,
          element: _this.panesStatus[i] && _this.panesStatus[i].element,
          isSelected: _this.props.selectedIndex === i
        };
      });

      console.log('old', _this.panesStatus); // eslint-disable-line
      _this.panesStatus = newPanesStatus;
      console.log('new', _this.panesStatus); // eslint-disable-line

      // if (newPanesStatus.length < this.panesStatus.length) {
      //   this.panesStatus = this.panesStatus.slice(0, newPanesStatus.length)
      //   console.log('remove pane', this.panesStatus)
      // } else {
      //   this.panesStatus = this.panesStatus.concat(
      //     newPanesStatus.slice()
      //   )
      //   console.log('new pane', this.panesStatus)
      // }
    };

    _this.applyPanesStatusToState = function () {
      console.log('Applying PanesStatus To State'); // eslint-disable-line
      // const panesState = this.panesStatus(pane => {
      //   return {isCollapsed: pane.isCollapsed}
      // })
      // this.setState({
      //   panesState: panesState
      // })
    };

    _this.handleResize = (0, _debounce3.default)(function (event) {
      // this.setWidth()
      // this.checkPanes()
    }, 400);

    _this.setWidth = function () {
      _this.width = _this._rootElement.offsetWidth;
    };

    _this.setRootElement = function (element) {
      console.log('Set root elment'); // eslint-disable-line
      _this._rootElement = element;
    };

    _this.checkPanes = function (panes) {
      console.log('Check panes'); // eslint-disable-line

      var totalMinWidth = 0;

      panes.forEach(function (pane) {
        if (pane.element) {
          pane.width = pane.element.offsetWidth;

          if (pane.isCollapsed) {
            totalMinWidth += 30;
          } else {
            totalMinWidth += pane.minWidth;
          }
        } else {
          console.log('no element'); // eslint-disable-line
        }

        _this.render();
      });

      if (totalMinWidth < _this.width) {
        console.log('totalMinWidth', totalMinWidth); //eslint-disable-line
        _this.expandAll();
      } else {
        console.log('collapse some', totalMinWidth, '<', _this.width); // eslint-disable-line
        _this.collapseSome(panes);
      }
    };

    _this.expandAll = function (panes) {
      console.log('Expand All Panes'); // eslint-disable-line
      _this.panesStatus = _this.panesStatus.map(function (pane) {
        pane.isCollapsed = false;
        return pane;
      });
      _this.render();
    };

    _this.collapseSome = function (panes) {
      console.log('Collapse some'); // eslint-disable-line
      // this.applyPanesStatusToState()
    };

    _this.setPaneElement = function (element, i) {
      if (element) {
        _this.panesStatus[i].element = element;
      }
    };

    _this.state = {
      currentSelectedIndex: props.selectedIndex,
      updateId: 0,
      panesState: []
    };

    _this.width = 0;

    _this.panesStatus = _react2.default.Children.toArray(props.children).map(function (pane, i) {
      return {
        isCollapsed: false,
        minWidth: pane.props.minWidth,
        width: pane.props.minWidth + 1,
        element: null,
        isSelected: props.selectedIndex === i
      };
    });
    return _this;
  }

  _createClass(PanesController, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.setWidth();
      this.updatePanesStatus(this.props.children);
      this.checkPanes(this.props.children);
      // this._elementResizeDetector.listenTo(
      //   this._rootElement,
      //   this.handleResize
      // )
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      console.log('Component Did Update'); // eslint-disable-line
      this.checkPanes(this.props.children);
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      this.updatePanesStatus(nextProps.children);

      if (nextProps.children.length !== this.props.children.length) {
        return true;
      }

      if (nextProps.selectedIndex !== this.props.selectedIndex) {
        return true;
      }

      if (nextState.panesState !== this.state.panesState) {
        return true;
      }

      return false;
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this._elementResizeDetector.uninstall(this._rootElement);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.setState({
        currentSelectedIndex: nextProps.selectedIndex
      });
      // if (nextProps.children.length !== this.props.children.length) {
      //this.updatePanesStatus(nextProps.children)
      // this.checkPanes(nextProps.children)
      // }
    }
    // onResize = debounce(() => {
    //  console.log('resize')
    // }, 1000 / 60)

  }, {
    key: 'handleClick',


    // Handle click
    value: function handleClick(index, pane, event) {
      if (pane.props.onActive) {
        pane.props.onActive(pane);
      }
      if (this.props.onChange) {
        this.props.onChange(index, pane.props.value, pane, event);
      }
    }

    // Set panes element to panesStatus

  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var children = this.props.children;
      var currentSelectedIndex = this.state.currentSelectedIndex;


      var panes = _react2.default.Children.toArray(children);

      panes.forEach(function (pane) {
        console.log('pane', pane);
      });

      console.log('Render panes', panes); // eslint-disable-line
      var paneElements = panes.map(function (pane, i) {
        var width = _this2.panesStatus[i].width;
        var isSelected = i === currentSelectedIndex;
        var isCollapsed = !isSelected || !isSelected && _this2.panesStatus[i].isCollapsed;
        return _react2.default.createElement(
          'div',
          {
            className: isCollapsed ? _Controller2.default.paneCollapsed : _Controller2.default.pane,
            key: pane.props.title,
            ref: function ref(element) {
              return _this2.setPaneElement(element, i);
            }
          },
          _react2.default.createElement(_DefaultPane2.default, _extends({}, pane.props, {
            index: i,
            width: width,
            isCollapsed: isCollapsed,
            isSelected: isSelected,
            updateId: _this2.state.updateId,
            onToggle: function onToggle(event) {
              return _this2.handleClick(i, pane, event);
            }
          }))
        );
      });

      return _react2.default.createElement(
        'div',
        { className: _Controller2.default.root, ref: this.setRootElement },
        paneElements
      );
    }
  }]);

  return PanesController;
}(_react2.default.Component);

PanesController.propTypes = {
  children: _propTypes2.default.node.isRequired,
  selectedIndex: _propTypes2.default.number,
  onChange: _propTypes2.default.func
};
exports.default = PanesController;