'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _storybook = require('part:@sanity/storybook');

var _knobs = require('part:@sanity/storybook/addons/knobs');

var _sanity = require('part:@sanity/storybook/addons/sanity');

var _sanity2 = _interopRequireDefault(_sanity);

var _default = require('part:@sanity/components/imageinput/default');

var _default2 = _interopRequireDefault(_default);

var _imageSelect = require('part:@sanity/components/imageinput/image-select');

var _imageSelect2 = _interopRequireDefault(_imageSelect);

var _defaultStyle = require('part:@sanity/components/buttons/default-style');

var _defaultStyle2 = _interopRequireDefault(_defaultStyle);

var _default3 = require('part:@sanity/components/buttons/default');

var _default4 = _interopRequireDefault(_default3);

var _uploadIcon = require('part:@sanity/base/upload-icon');

var _uploadIcon2 = _interopRequireDefault(_uploadIcon);

var _default5 = require('part:@sanity/components/dialogs/default');

var _default6 = _interopRequireDefault(_default5);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var imageUrl = 'https://unsplash.it/' + parseInt(Math.random() * 10, 0) * 100 + '/' + parseInt(Math.random() * 10, 0) * 100;

var renderEdit = function renderEdit() {
  return _react2.default.createElement(
    _default6.default,
    { title: 'Edit image', isOpen: true, onClose: (0, _storybook.action)('close') },
    'Edit stuff here'
  );
};

(0, _storybook.storiesOf)('Image input').add('Image select', function () {
  return _react2.default.createElement(
    _sanity2.default,
    { part: 'part:@sanity/components/imageinput/image-select', propTables: [_imageSelect2.default] },
    _react2.default.createElement(
      _imageSelect2.default,
      {
        onSelect: (0, _storybook.action)('onSelect')
      },
      'Upload image\u2026'
    )
  );
}).add('Image select as button', function () {
  return _react2.default.createElement(
    _sanity2.default,
    { part: 'part:@sanity/components/imageinput/image-select', propTables: [_imageSelect2.default] },
    _react2.default.createElement(
      'div',
      { className: _defaultStyle2.default.default },
      _react2.default.createElement(
        _imageSelect2.default,
        {
          onSelect: (0, _storybook.action)('onSelect'),
          className: _defaultStyle2.default.content
        },
        'Upload image\u2026'
      )
    )
  );
}).add('Image select inside button',
// `
//   Remember to set ripple to false
// `,
function () {
  return _react2.default.createElement(
    _sanity2.default,
    { part: 'part:@sanity/components/imageinput/image-select', propTables: [_imageSelect2.default] },
    _react2.default.createElement(
      _default4.default,
      {
        icon: _uploadIcon2.default,
        ripple: false
      },
      _react2.default.createElement(
        _imageSelect2.default,
        {
          onSelect: (0, _storybook.action)('onSelect')
        },
        'Upload image\u2026'
      )
    )
  );
});

(0, _storybook.storiesOf)('Image input Fieldset').addDecorator(_knobs.withKnobs).add('Fieldset', function () {
  var invalidHotspotImage = { imageUrl: 'http://This.is.not.a.valid.url' };

  return _react2.default.createElement(
    _sanity2.default,
    { part: 'part:@sanity/components/imageinput/fieldset', propTables: [_default2.default] },
    _react2.default.createElement(
      _default2.default,
      {
        legend: (0, _knobs.text)('Legend (prop)', 'This is the legend'),
        onSelect: (0, _storybook.action)('Select image'),
        onEdit: (0, _storybook.action)('onEdit'),
        onClear: (0, _storybook.action)('onClear'),
        onCancel: (0, _storybook.action)('onCancel'),
        status: (0, _knobs.select)('Status (prop)', ['ready', 'error', 'pending'], 'ready'),
        percent: (0, _knobs.number)('percent (prop)', 50, { range: true, min: 0, max: 100, step: 5 }),
        level: (0, _knobs.number)('Level (prop)', 0),
        multiple: (0, _knobs.boolean)('Multiple (prop)', false),
        hotspotImage: (0, _knobs.boolean)('invalid image', false) ? invalidHotspotImage : (0, _knobs.object)('hotspotImage (prop)', { imageUrl: imageUrl }),
        showContent: (0, _knobs.boolean)('show content (prop)', false),
        accept: (0, _knobs.text)('accept (prop)', 'image/png')
      },
      (0, _knobs.text)('children (prop)', 'This is the content')
    )
  );
});