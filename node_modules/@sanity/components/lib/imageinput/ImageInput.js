'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _fieldsetStyle = require('part:@sanity/components/imageinput/fieldset-style');

var _fieldsetStyle2 = _interopRequireDefault(_fieldsetStyle);

var _circle = require('part:@sanity/components/progress/circle');

var _circle2 = _interopRequireDefault(_circle);

var _uploadIcon = require('part:@sanity/base/upload-icon');

var _uploadIcon2 = _interopRequireDefault(_uploadIcon);

var _imageLoader = require('part:@sanity/components/utilities/image-loader');

var _imageLoader2 = _interopRequireDefault(_imageLoader);

var _HotspotImage = require('@sanity/imagetool/HotspotImage');

var _HotspotImage2 = _interopRequireDefault(_HotspotImage);

var _imageSelect = require('part:@sanity/components/imageinput/image-select');

var _imageSelect2 = _interopRequireDefault(_imageSelect);

var _constants = require('@sanity/imagetool/constants');

var _trashIcon = require('part:@sanity/base/trash-icon');

var _trashIcon2 = _interopRequireDefault(_trashIcon);

var _editIcon = require('part:@sanity/base/edit-icon');

var _editIcon2 = _interopRequireDefault(_editIcon);

var _default = require('part:@sanity/components/buttons/default');

var _default2 = _interopRequireDefault(_default);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DEFAULT_HOTSPOT = {
  height: 1,
  width: 1,
  x: 0.5,
  y: 0.5
};

var ImageInput = function (_React$PureComponent) {
  _inherits(ImageInput, _React$PureComponent);

  function ImageInput() {
    var _ref;

    _classCallCheck(this, ImageInput);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = ImageInput.__proto__ || Object.getPrototypeOf(ImageInput)).call.apply(_ref, [this].concat(args)));

    _this.state = {
      aspect: null
    };
    return _this;
  }

  _createClass(ImageInput, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          legend = _props.legend,
          description = _props.description,
          hotspotImage = _props.hotspotImage,
          fieldName = _props.fieldName,
          percent = _props.percent,
          status = _props.status,
          onCancel = _props.onCancel,
          onEdit = _props.onEdit,
          children = _props.children;
      var showContent = this.props.showContent;


      if (!children) {
        showContent = false;
      }

      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          'div',
          { className: _fieldsetStyle2.default.grid + ' ' + (showContent ? _fieldsetStyle2.default.hasContent : _fieldsetStyle2.default.noContent) },
          _react2.default.createElement(
            'div',
            {
              className: '\n              ' + (hotspotImage && hotspotImage.imageUrl ? _fieldsetStyle2.default.imageWrapper : _fieldsetStyle2.default.imageWrapperEmpty) + '\n              ' + (status == 'error' ? _fieldsetStyle2.default.error : '') + '\n            '
            },
            status != 'error' && status != 'pending' && hotspotImage && hotspotImage.imageUrl && _react2.default.createElement(
              'div',
              { className: _fieldsetStyle2.default.ghost },
              _react2.default.createElement(_imageSelect2.default, {
                className: _fieldsetStyle2.default.imageSelect,
                name: fieldName,
                onSelect: this.props.onSelect,
                dropzone: true,
                multiple: this.props.multiple,
                accept: this.props.accept,
                ghost: true
              })
            ),
            hotspotImage && hotspotImage.imageUrl && _react2.default.createElement(
              'div',
              { className: status === 'complete' || status === 'ready' ? _fieldsetStyle2.default.imageIsUploaded : _fieldsetStyle2.default.imageIsNotUploaded },
              hotspotImage && _react2.default.createElement(
                _imageLoader2.default,
                { src: hotspotImage.imageUrl },
                function (_ref2) {
                  var image = _ref2.image,
                      error = _ref2.error;

                  if (error) {
                    return _react2.default.createElement(
                      'div',
                      { className: _fieldsetStyle2.default.imagePreviewError },
                      'Image preview not available'
                    );
                  }
                  return _react2.default.createElement(_HotspotImage2.default, {
                    aspectRatio: 'auto',
                    src: image.src,
                    srcAspectRatio: image.width / image.height,
                    hotspot: hotspotImage.hotspot || DEFAULT_HOTSPOT,
                    crop: hotspotImage.crop || _constants.DEFAULT_CROP
                  });
                }
              )
            ),

            // Empty state and ready
            status === 'ready' && !(hotspotImage && hotspotImage.imageUrl) && _react2.default.createElement(_imageSelect2.default, {
              className: _fieldsetStyle2.default.imageSelect,
              name: fieldName,
              onSelect: this.props.onSelect,
              dropzone: true,
              multiple: this.props.multiple,
              accept: this.props.accept
            }),
            status !== 'complete' && status !== 'ready' && _react2.default.createElement(
              'div',
              { className: _fieldsetStyle2.default.progressContainer },
              _react2.default.createElement(
                'div',
                { className: _fieldsetStyle2.default.progressInner },
                percent && _react2.default.createElement(_circle2.default, { percent: percent, showPercent: true, className: _fieldsetStyle2.default.progress })
              )
            ),
            status === 'pending' && onCancel && _react2.default.createElement(
              'a',
              { className: _fieldsetStyle2.default.cancel, onClick: this.props.onCancel },
              'Cancel'
            ),
            status == 'error' && _react2.default.createElement(
              'div',
              { className: _fieldsetStyle2.default.errorMessage },
              _react2.default.createElement(
                'div',
                null,
                'Error!'
              ),
              _react2.default.createElement(
                _imageSelect2.default,
                { name: fieldName, onSelect: this.props.onSelect },
                _react2.default.createElement(
                  'span',
                  null,
                  'Try again\u2026'
                )
              )
            ),
            status === 'complete' && _react2.default.createElement(
              'div',
              { className: _fieldsetStyle2.default.progressContainerComplete },
              _react2.default.createElement(
                'div',
                { className: _fieldsetStyle2.default.progressInner },
                _react2.default.createElement(_circle2.default, { percent: 100, completed: true, className: _fieldsetStyle2.default.progressComplete })
              )
            ),
            status != 'error' && status != 'pending' && hotspotImage && hotspotImage.imageUrl && _react2.default.createElement(
              'div',
              { className: _fieldsetStyle2.default.functions },
              _react2.default.createElement(
                _default2.default,
                { icon: _uploadIcon2.default, ripple: false, className: _fieldsetStyle2.default.replaceImageButton, title: 'Replace image' },
                showContent ? '' : 'Replace',
                _react2.default.createElement(_imageSelect2.default, { name: fieldName, onSelect: this.props.onSelect, className: _fieldsetStyle2.default.replaceImageSelect })
              ),
              onEdit && _react2.default.createElement(
                _default2.default,
                { icon: _editIcon2.default, className: _fieldsetStyle2.default.replaceImageButton, title: 'Edit image', onClick: onEdit },
                !showContent && 'Edit'
              ),
              _react2.default.createElement(
                _default2.default,
                {
                  className: _fieldsetStyle2.default.removeButton,
                  onClick: this.props.onClear,
                  icon: _trashIcon2.default,
                  color: 'danger',
                  title: 'Remove image'
                },
                !showContent && 'Remove'
              )
            )
          ),
          children && _react2.default.createElement(
            'div',
            { className: showContent ? _fieldsetStyle2.default.content : _fieldsetStyle2.default.contentAbsolute },
            children
          )
        )
      );
    }
  }]);

  return ImageInput;
}(_react2.default.PureComponent);

ImageInput.propTypes = {
  status: _propTypes2.default.oneOf(['ready', 'complete', 'pending', 'error']),
  legend: _propTypes2.default.string,
  description: _propTypes2.default.string,
  level: _propTypes2.default.number,
  percent: _propTypes2.default.number,
  fieldName: _propTypes2.default.string,
  onSelect: _propTypes2.default.func,
  onCancel: _propTypes2.default.func,
  onClear: _propTypes2.default.func,
  onEdit: _propTypes2.default.func,
  hotspotImage: _propTypes2.default.shape({
    hotspot: _propTypes2.default.object,
    crop: _propTypes2.default.object,
    imageUrl: _propTypes2.default.string
  }),
  children: _propTypes2.default.node,
  showContent: _propTypes2.default.bool,
  multiple: _propTypes2.default.bool,
  accept: _propTypes2.default.string
};
ImageInput.defaultProps = {
  status: 'ready',
  showContent: true
};
exports.default = ImageInput;