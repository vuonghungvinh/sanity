'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _ActivateOnFocus = require('./styles/ActivateOnFocus.css');

var _ActivateOnFocus2 = _interopRequireDefault(_ActivateOnFocus);

var _reactClickOutside = require('react-click-outside');

var _reactClickOutside2 = _interopRequireDefault(_reactClickOutside);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ActivateOnFocus = function (_React$Component) {
  _inherits(ActivateOnFocus, _React$Component);

  function ActivateOnFocus() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ActivateOnFocus);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ActivateOnFocus.__proto__ || Object.getPrototypeOf(ActivateOnFocus)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      hasFocus: false
    }, _this.setEventHandlerElement = function (element) {
      _this._eventHandlerElement = element;
    }, _this.handleClick = function (event) {
      if (!_this.state.hasFocus) {
        _this.setState({
          hasFocus: true
        });
        _this.props.onFocus();
      }
    }, _this.handleClickOutside = function () {
      if (_this.state.hasFocus) {
        _this.setState({
          hasFocus: false
        });
        _this.props.onBlur();
      }
    }, _this.handleFocus = function (event) {
      _this.setState({
        hasFocus: true
      });
      _this.props.onFocus();
    }, _this.handleBlur = function (event) {
      var enableBlur = _this.props.enableBlur;

      if (enableBlur) {
        _this.setState({
          hasFocus: false
        });
      }
      _this.props.onBlur();
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ActivateOnFocus, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          message = _props.message,
          children = _props.children,
          isActive = _props.isActive;
      var hasFocus = this.state.hasFocus;


      if (isActive) {
        return children;
      }

      return _react2.default.createElement(
        'div',
        {
          className: hasFocus ? _ActivateOnFocus2.default.hasFocus : _ActivateOnFocus2.default.noFocus,
          onFocus: this.handleFocus,
          onBlur: this.handleBlur
        },
        _react2.default.createElement(
          'div',
          {
            className: _ActivateOnFocus2.default.eventHandler,
            onClick: this.handleClick
          },
          _react2.default.createElement('div', { className: _ActivateOnFocus2.default.overlay }),
          _react2.default.createElement(
            'div',
            { className: _ActivateOnFocus2.default.message },
            message
          )
        ),
        _react2.default.createElement(
          'div',
          { className: _ActivateOnFocus2.default.content },
          children
        )
      );
    }
  }]);

  return ActivateOnFocus;
}(_react2.default.Component);

ActivateOnFocus.propTypes = {
  children: _propTypes2.default.node.isRequired,
  message: _propTypes2.default.string,
  isActive: _propTypes2.default.bool,
  enableBlur: _propTypes2.default.bool,
  onFocus: _propTypes2.default.func,
  onBlur: _propTypes2.default.func
};
ActivateOnFocus.defaultProps = {
  enableBlur: true,
  message: 'Click to activateâ€¦',
  isActive: false,
  onFocus: function onFocus() {},
  onBlur: function onBlur() {}
};
exports.default = (0, _reactClickOutside2.default)(ActivateOnFocus);