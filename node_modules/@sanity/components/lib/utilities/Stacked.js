'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.createStack = createStack;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _nanoPubsub = require('nano-pubsub');

var _nanoPubsub2 = _interopRequireDefault(_nanoPubsub);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function createStack() {
  var stack = [];
  var changes = (0, _nanoPubsub2.default)();

  function remove(instance) {
    stack = stack.filter(function (entry) {
      return entry !== instance;
    });
    onChange();
  }

  function peek() {
    return stack[stack.length - 1];
  }
  function push(entry) {
    stack.push(entry);
    onChange();
  }

  function onChange() {
    changes.publish(peek());
  }

  return {
    remove: remove,
    peek: peek,
    push: push,
    subscribe: changes.subscribe
  };
}

var DEFAULT_STACK = createStack();

var Stacked = function (_React$Component) {
  _inherits(Stacked, _React$Component);

  function Stacked(props) {
    _classCallCheck(this, Stacked);

    var _this = _possibleConstructorReturn(this, (Stacked.__proto__ || Object.getPrototypeOf(Stacked)).call(this));

    _this.state = {
      top: null
    };

    _this._unsubscribe = props.stack.subscribe(function (top) {
      _this.setState(function () {
        return { top: top };
      });
    });
    return _this;
  }

  _createClass(Stacked, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var stack = this.props.stack;

      stack.push(this);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var stack = this.props.stack;

      this._unsubscribe();
      stack.remove(this);
    }
  }, {
    key: 'render',
    value: function render() {
      return this.props.children(this.state.top === this);
    }
  }]);

  return Stacked;
}(_react2.default.Component);

Stacked.propTypes = {
  children: _propTypes2.default.func.isRequired,
  stack: _propTypes2.default.shape({
    remove: _propTypes2.default.func,
    peek: _propTypes2.default.func,
    push: _propTypes2.default.func,
    subscribe: _propTypes2.default.func
  })
};
Stacked.defaultProps = {
  stack: DEFAULT_STACK
};
exports.default = Stacked;