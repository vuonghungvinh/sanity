'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _loadImage2 = require('./loadImage');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ImageLoader = function (_React$PureComponent) {
  _inherits(ImageLoader, _React$PureComponent);

  function ImageLoader() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ImageLoader);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ImageLoader.__proto__ || Object.getPrototypeOf(ImageLoader)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      loadedImage: null,
      error: null
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ImageLoader, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.loadImage(this.props.src);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.unsubscribe();
    }
  }, {
    key: 'unsubscribe',
    value: function unsubscribe() {
      if (this.subscription) {
        this.subscription.unsubscribe();
      }
    }
  }, {
    key: 'loadImage',
    value: function loadImage(src) {
      var _this2 = this;

      this.unsubscribe();
      this.subscription = (0, _loadImage2.loadImage)(src).subscribe({
        next: function next(url) {
          return _this2.setState({ loadedImage: url, error: null });
        },
        error: function error(_error) {
          return _this2.setState({ loadImage: null, error: _error });
        }
      });
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.src !== this.props.src) {
        this.loadImage(nextProps.src);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var children = this.props.children;
      var _state = this.state,
          error = _state.error,
          loadedImage = _state.loadedImage;

      return error || loadedImage ? children({ image: loadedImage, error: error }) : null;
    }
  }]);

  return ImageLoader;
}(_react2.default.PureComponent);

ImageLoader.propTypes = {
  src: _propTypes2.default.string.isRequired,
  children: _propTypes2.default.func
};
exports.default = ImageLoader;