'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _includes2 = require('lodash/includes');

var _includes3 = _interopRequireDefault(_includes2);

var _uniqueId2 = require('lodash/uniqueId');

var _uniqueId3 = _interopRequireDefault(_uniqueId2);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styleStyle = require('part:@sanity/components/selects/style-style');

var _styleStyle2 = _interopRequireDefault(_styleStyle);

var _angleDownIcon = require('part:@sanity/base/angle-down-icon');

var _angleDownIcon2 = _interopRequireDefault(_angleDownIcon);

var _reactClickOutside = require('react-click-outside');

var _reactClickOutside2 = _interopRequireDefault(_reactClickOutside);

var _circleThinIcon = require('part:@sanity/base/circle-thin-icon');

var _circleThinIcon2 = _interopRequireDefault(_circleThinIcon);

var _circleCheckIcon = require('part:@sanity/base/circle-check-icon');

var _circleCheckIcon2 = _interopRequireDefault(_circleCheckIcon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var StyleSelect = function (_React$Component) {
  _inherits(StyleSelect, _React$Component);

  function StyleSelect(props, context) {
    _classCallCheck(this, StyleSelect);

    var _this = _possibleConstructorReturn(this, (StyleSelect.__proto__ || Object.getPrototypeOf(StyleSelect)).call(this, props, context));

    _this.handleClickOutside = function () {
      _this.handleCloseList();
    };

    _this.handleFocus = function (event) {
      _this.setState({
        hasFocus: true,
        inputSelected: true
      });

      _this.props.onFocus(event);
    };

    _this.handleBlur = function (event) {
      _this.props.onBlur(event);
    };

    _this.handleSelect = function (item) {
      _this.props.onChange(item);
      _this.handleCloseList();
    };

    _this.handleOpenList = function () {
      _this.setState({
        showList: true
      });
      _this.props.onOpen();
    };

    _this.handleCloseList = function () {
      _this.setState({
        showList: false
      });
      _this.props.onClose();
    };

    _this.handleInnerClick = function () {
      if (_this.state.showList) {
        _this.handleCloseList();
      } else {
        _this.handleOpenList();
      }
    };

    _this.handleKeyDown = function (event) {
      var items = _this.props.items;
      var arrowNavigationPosition = _this.state.arrowNavigationPosition;

      if (items) {
        if (event.key == 'ArrowUp' && arrowNavigationPosition > 0) {
          _this.setState({
            arrowNavigationPosition: arrowNavigationPosition - 1,
            inputValue: items[arrowNavigationPosition - 1].title,
            showList: true
          });
          return false;
        }

        if (event.key == 'ArrowDown' && arrowNavigationPosition < items.length - 1) {
          _this.setState({
            arrowNavigationPosition: arrowNavigationPosition + 1,
            inputValue: items[arrowNavigationPosition + 1].title,
            showList: true
          });
          return false;
        }
      }
      return true;
    };

    _this.handleKeyUp = function (event) {
      var items = _this.props.items;
      var arrowNavigationPosition = _this.state.arrowNavigationPosition;

      if (event.key == 'Enter' && arrowNavigationPosition) {
        _this.handleSelect(items[arrowNavigationPosition]);
        _this.setState({
          hasFocus: false
        });
        return false;
      }
      return true;
    };

    _this.state = {
      hasFocus: false,
      inputValue: _this.props.value && _this.props.value.title,
      inputSelected: false,
      arrowNavigationPosition: 0
    };
    return _this;
  }

  // componentWillReceiveProps(nextProps) {
  //   if (nextProps.items != this.props.items) {
  //     this.setState({
  //       searchResult: this.props.items,
  //       showList: true
  //     })
  //   }
  //   if (nextProps.value != this.props.value) {
  //     this.setState({
  //       inputValue: nextProps.value.title,
  //       inputSelected: true,
  //       value: nextProps.value.title,
  //       showList: false
  //     })
  //   }
  // }

  _createClass(StyleSelect, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this._inputId = (0, _uniqueId3.default)('CustomSelect');
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          error = _props.error,
          value = _props.value,
          description = _props.description,
          items = _props.items,
          className = _props.className,
          transparent = _props.transparent,
          placeholder = _props.placeholder;
      var _state = this.state,
          hasFocus = _state.hasFocus,
          showList = _state.showList;


      return _react2.default.createElement(
        'div',
        {
          className: '\n          ' + _styleStyle2.default.root + '\n          ' + (hasFocus ? _styleStyle2.default.focused : '') + '\n          ' + (error ? _styleStyle2.default.error : '') + '\n          ' + (transparent ? _styleStyle2.default.transparent : '') + '\n          ' + (className || '') + '\n        '
        },
        _react2.default.createElement(
          'div',
          { className: _styleStyle2.default.inner, onClick: this.handleInnerClick },
          _react2.default.createElement(
            'div',
            { className: _styleStyle2.default.selectContainer },
            _react2.default.createElement(
              'span',
              { className: _styleStyle2.default.text },
              value && value.length > 1 && 'Multiple',
              value && value.length == 1 && value[0].title,
              !value && placeholder
            ),
            _react2.default.createElement(
              'div',
              { className: _styleStyle2.default.icon },
              _react2.default.createElement(_angleDownIcon2.default, { color: 'inherit' })
            )
          )
        ),
        _react2.default.createElement(
          'div',
          { className: '' + (showList ? _styleStyle2.default.listContainer : _styleStyle2.default.listContainerHidden) },
          items.map(function (item) {
            var isSemiSelected = value && value.length > 1 && (0, _includes3.default)(value, item);
            var isSelected = value && value.length === 1 && value[0] == item;
            var classNames = '\n                ' + (isSelected ? _styleStyle2.default.itemSelected : _styleStyle2.default.item) + '\n                ' + (isSemiSelected ? _styleStyle2.default.itemSemiSelected : '') + '\n              ';
            return _react2.default.createElement(
              'a',
              { className: classNames, key: item.key, title: item.title, onClick: function onClick() {
                  return _this2.handleSelect(item);
                } },
              _react2.default.createElement(
                'div',
                { className: _styleStyle2.default.itemIcon },
                isSelected && _react2.default.createElement(_circleCheckIcon2.default, null),
                isSemiSelected && _react2.default.createElement(_circleThinIcon2.default, null)
              ),
              _react2.default.createElement(
                'div',
                { className: _styleStyle2.default.itemContent },
                _this2.props.renderItem(item)
              )
            );
          })
        )
      );
    }
  }]);

  return StyleSelect;
}(_react2.default.Component);

StyleSelect.propTypes = {
  description: _propTypes2.default.string,
  placeholder: _propTypes2.default.string,
  onChange: _propTypes2.default.func,
  onOpen: _propTypes2.default.func,
  onFocus: _propTypes2.default.func,
  onBlur: _propTypes2.default.func,
  onClose: _propTypes2.default.func,
  value: _propTypes2.default.array,
  error: _propTypes2.default.bool,
  renderItem: _propTypes2.default.func,
  className: _propTypes2.default.string,
  transparent: _propTypes2.default.bool,
  items: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    title: _propTypes2.default.string,
    active: _propTypes2.default.bool
  }))
};
StyleSelect.defaultProps = {
  placeholder: 'Type to searchâ€¦',
  loading: false,
  className: '',
  onChange: function onChange() {},
  onBlur: function onBlur() {},
  onOpen: function onOpen() {},
  onClose: function onClose() {}
};
exports.default = (0, _reactClickOutside2.default)(StyleSelect);