'use strict';

var _range2 = require('lodash/range');

var _range3 = _interopRequireDefault(_range2);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _storybook = require('part:@sanity/storybook');

var _default = require('part:@sanity/components/selects/default');

var _default2 = _interopRequireDefault(_default);

var _searchable = require('part:@sanity/components/selects/searchable');

var _searchable2 = _interopRequireDefault(_searchable);

var _style = require('part:@sanity/components/selects/style');

var _style2 = _interopRequireDefault(_style);

var _radio = require('part:@sanity/components/selects/radio');

var _radio2 = _interopRequireDefault(_radio);

var _fuse = require('fuse.js');

var _fuse2 = _interopRequireDefault(_fuse);

var _chance = require('chance');

var _chance2 = _interopRequireDefault(_chance);

var _knobs = require('part:@sanity/storybook/addons/knobs');

var _sanity = require('part:@sanity/storybook/addons/sanity');

var _sanity2 = _interopRequireDefault(_sanity);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable react/no-multi-comp */


var chance = new _chance2.default();

var items = (0, _range3.default)(20).map(function (item, i) {
  return {
    title: chance.name(),
    key: '' + i
  };
});

var radioItems = (0, _range3.default)(10).map(function (item, i) {
  return {
    title: chance.name(),
    key: '' + i
  };
});

var styleItems = [{
  title: 'Paragraph',
  key: 'style-paragraph'
}, {
  title: 'Heading 1',
  key: 'style-heading1'
}, {
  title: 'Heading 2',
  key: 'style-heading2'
}, {
  title: 'Heading 3',
  key: 'style-heading3'
}, {
  title: 'Heading 4',
  key: 'style-heading4'
}, {
  title: 'Heading 5',
  key: 'style-heading5'
}];

var renderStyleItem = function renderStyleItem(item) {
  switch (item.key) {
    case 'style-paragraph':
      return _react2.default.createElement(
        'div',
        { style: { fontSize: '1em', fontWeight: 'normal' } },
        item.title
      );
    case 'style-heading1':
      return _react2.default.createElement(
        'div',
        { style: { fontSize: '2em', fontWeight: 'bold' } },
        item.title
      );
    case 'style-heading2':
      return _react2.default.createElement(
        'div',
        { style: { fontSize: '1.5em', fontWeight: 'bold' } },
        item.title
      );
    case 'style-heading3':
      return _react2.default.createElement(
        'div',
        { style: { fontSize: '1.2em', fontWeight: 'bold' } },
        item.title
      );
    default:
      return _react2.default.createElement(
        'div',
        null,
        'Style: ',
        item.title
      );
  }
};

var SearchableTest = function (_React$Component) {
  _inherits(SearchableTest, _React$Component);

  function SearchableTest() {
    var _ref;

    _classCallCheck(this, SearchableTest);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = SearchableTest.__proto__ || Object.getPrototypeOf(SearchableTest)).call.apply(_ref, [this].concat(args)));

    _this.handleChange = function (value) {
      _this.setState({
        value: value
      });
    };

    _this.handleSearch = function (query) {
      console.log('query2', query); // eslint-disable-line
      var result = _this.fuse.search(query);
      _this.setState({
        loading: true
      });

      setTimeout(function () {
        _this.setState({
          searchResult: result,
          loading: false
        });
      }, 500);
    };

    var fuseOptions = {
      keys: ['title']
    };

    _this.searchAbleItems = (0, _range3.default)(100).map(function (item, i) {
      return {
        title: chance.name(),
        key: '' + i
      };
    });

    _this.fuse = new _fuse2.default(_this.searchAbleItems, fuseOptions);

    _this.state = {
      searchResult: [],
      value: null
    };
    return _this;
  }

  _createClass(SearchableTest, [{
    key: 'handleFocus',
    value: function handleFocus() {
      console.log('handleFocus'); // eslint-disable-line
    }
  }, {
    key: 'renderItem',
    value: function renderItem(item) {
      return _react2.default.createElement(
        'div',
        null,
        item.title
      );
    }
  }, {
    key: 'renderValue',
    value: function renderValue(item) {
      console.log('Value to string:', item, item.title); // eslint-disable-line
      if (item) {
        return item.title;
      }

      return '';
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(_searchable2.default, {
        label: 'This is the label',
        placeholder: 'This is the placeholder',
        onSearch: this.handleSearch,
        onChange: this.handleChange,
        onFocus: this.handleFocus,
        onOpen: (0, _storybook.action)('onOpen'),
        isLoading: this.state.loading,
        items: this.state.searchResult,
        value: this.state.value,
        renderItem: this.renderItem,
        valueToString: this.renderValue
      });
    }
  }]);

  return SearchableTest;
}(_react2.default.Component);

(0, _storybook.storiesOf)('Selects').addDecorator(_knobs.withKnobs).add('Default', function () {
  var options = {
    range: true,
    min: 0,
    max: items.length,
    step: 1
  };
  var valueIndex = (0, _knobs.number)('Selected item', -1, options);
  return _react2.default.createElement(
    _sanity2.default,
    { part: 'part:@sanity/components/selects/default', propTables: [_default2.default] },
    _react2.default.createElement(_default2.default, {
      label: (0, _knobs.text)('label (prop)', 'This is the label'),
      placeholder: (0, _knobs.text)('placeholder (prop)', 'This is the placeholder'),
      onChange: (0, _storybook.action)('onChange'),
      onFocus: (0, _storybook.action)('onFocus'),
      onBlur: (0, _storybook.action)('onBlur'),
      items: items,
      value: items[valueIndex],
      disabled: (0, _knobs.boolean)('disabled (default prop)', false)
    })
  );
}).add('Default with value', function () {
  return _react2.default.createElement(
    _sanity2.default,
    { part: 'part:@sanity/components/selects/default', propTables: [_default2.default] },
    _react2.default.createElement(_default2.default, {
      label: (0, _knobs.text)('label (prop)', 'This is the label'),
      placeholder: (0, _knobs.text)('placeholder (prop)', 'This is the placeholder'),
      onChange: (0, _storybook.action)('onChange'),
      onFocus: (0, _storybook.action)('onFocus'),
      onBlur: (0, _storybook.action)('onBlur'),
      value: items[10],
      items: items,
      disabled: (0, _knobs.boolean)('disabled (default prop)', false)
    })
  );
}).add('Searchable',
// `
//   When provided with items, the component searches inside these when no onInputChange is provided
// `,
function () {
  var renderItem = function renderItem(item) {
    return _react2.default.createElement(
      'div',
      null,
      item.title
    );
  };
  var hasOnclear = (0, _knobs.boolean)('has onClear');
  var selected = (0, _knobs.number)('Selected item (value)', -1, {
    range: true,
    min: -1,
    max: items.length,
    step: 1
  });
  var selectedItem = items[selected];
  return _react2.default.createElement(
    _sanity2.default,
    { part: 'part:@sanity/components/selects/searchable', propTables: [_searchable2.default] },
    _react2.default.createElement(_searchable2.default, {
      label: (0, _knobs.text)('label (prop)', 'This is the label'),
      placeholder: (0, _knobs.text)('placeholder (prop)', 'This is the placeholder'),
      onChange: (0, _storybook.action)('onChange'),
      onFocus: (0, _storybook.action)('onFocus'),
      onBlur: (0, _storybook.action)('onBlur'),
      onOpen: (0, _storybook.action)('onOpen'),
      value: selectedItem,
      inputValue: (0, _knobs.text)('Inputvalue (prop)', selectedItem && selectedItem.title),
      renderItem: renderItem,
      items: items,
      isLoading: (0, _knobs.boolean)('isLoading (prop)', false),
      disabled: (0, _knobs.boolean)('disabled (prop)', false),
      onClear: hasOnclear ? (0, _storybook.action)('onClear') : undefined
    })
  );
}).add('Style select', function () {

  return _react2.default.createElement(
    _sanity2.default,
    { part: 'part:@sanity/components/selects/style', propTables: [_style2.default] },
    _react2.default.createElement(
      'div',
      { style: { padding: '2em', backgroundColor: '#eee' } },
      _react2.default.createElement(_style2.default, {
        label: (0, _knobs.text)('label (prop)', 'This is the label'),
        placeholder: (0, _knobs.text)('placeholder (prop)', 'This is the placeholder'),
        transparent: (0, _knobs.boolean)('transparent (prop)', false),
        onChange: (0, _storybook.action)('onChange'),
        onFocus: (0, _storybook.action)('onFocus'),
        onOpen: (0, _storybook.action)('onOpen'),
        renderItem: renderStyleItem,
        items: styleItems
      })
    )
  );
}).add('Style select (one style)', function () {

  return _react2.default.createElement(
    _sanity2.default,
    { part: 'part:@sanity/components/selects/style', propTables: [_style2.default] },
    _react2.default.createElement(
      'div',
      { style: { padding: '2em', backgroundColor: '#eee' } },
      _react2.default.createElement(_style2.default, {
        label: (0, _knobs.text)('label (prop)', 'This is the label'),
        placeholder: (0, _knobs.text)('placeholder (prop)', 'This is the placeholder'),
        transparent: (0, _knobs.boolean)('transparent (prop)', false),
        onChange: (0, _storybook.action)('onChange'),
        onFocus: (0, _storybook.action)('onFocus'),
        onOpen: (0, _storybook.action)('onOpen'),
        renderItem: renderStyleItem,
        value: [styleItems[0]],
        items: styleItems
      })
    )
  );
}).add('Style select (multiple)', function () {

  return _react2.default.createElement(
    _sanity2.default,
    { part: 'part:@sanity/components/selects/style', propTables: [_style2.default] },
    _react2.default.createElement(
      'div',
      { style: { padding: '2em', backgroundColor: '#eee' } },
      _react2.default.createElement(_style2.default, {
        label: (0, _knobs.text)('label (prop)', 'This is the label'),
        placeholder: (0, _knobs.text)('placeholder (prop)', 'This is the placeholder'),
        transparent: (0, _knobs.boolean)('transparent (prop)', false),
        onChange: (0, _storybook.action)('onChange'),
        onFocus: (0, _storybook.action)('onFocus'),
        onOpen: (0, _storybook.action)('onOpen'),
        renderItem: renderStyleItem,
        value: [styleItems[0], styleItems[2]],
        items: styleItems
      })
    )
  );
}).add('Searchable example', function () {

  return _react2.default.createElement(
    'div',
    null,
    _react2.default.createElement(SearchableTest, null),
    'This text should be behind the dropdown'
  );
}).add('Radiobuttons',
// `
//   When an onInputChange is provided. Populate the items, and remember to set _loading prop_ when waiting for server.
// `,
function () {

  var value = radioItems[(0, _knobs.number)('value', 0, { range: true, min: 0, max: radioItems.length - 1 })];

  return _react2.default.createElement(
    _sanity2.default,
    { part: 'part:@sanity/components/selects/radio', propTables: [_radio2.default] },
    _react2.default.createElement(_radio2.default, {
      items: radioItems,
      value: value,
      onChange: (0, _storybook.action)('onChange'),
      legend: (0, _knobs.text)('legend (prop)', 'Radio button select'),
      direction: (0, _knobs.select)('direction (prop)', [false, 'vertical', 'vertical'])
    })
  );
});