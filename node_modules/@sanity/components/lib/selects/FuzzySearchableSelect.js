'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _default = require('part:@sanity/components/formfields/default');

var _default2 = _interopRequireDefault(_default);

var _searchable = require('part:@sanity/components/selects/searchable');

var _searchable2 = _interopRequireDefault(_searchable);

var _fuse = require('fuse.js');

var _fuse2 = _interopRequireDefault(_fuse);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FuzzySearchableSelect = function (_React$Component) {
  _inherits(FuzzySearchableSelect, _React$Component);

  function FuzzySearchableSelect(props, context) {
    _classCallCheck(this, FuzzySearchableSelect);

    var _this = _possibleConstructorReturn(this, (FuzzySearchableSelect.__proto__ || Object.getPrototypeOf(FuzzySearchableSelect)).call(this, props, context));

    _this.handleSearch = _this.handleSearch.bind(_this);

    var fuseOptions = {
      keys: ['title']
    };

    var items = _this.props.items;


    _this.fuse = new _fuse2.default(items, fuseOptions);

    _this.state = {
      searchResult: [],
      query: null
    };
    return _this;
  }

  _createClass(FuzzySearchableSelect, [{
    key: 'handleSearch',
    value: function handleSearch(query) {
      this.setState({
        searchResult: this.fuse.search(query)
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          label = _props.label,
          error = _props.error,
          value = _props.value,
          placeholder = _props.placeholder;
      var _state = this.state,
          searchResult = _state.searchResult,
          loading = _state.loading;


      return _react2.default.createElement(
        _default2.default,
        { error: error, label: label },
        _react2.default.createElement(_searchable2.default, {
          placeholder: placeholder,
          value: value,
          onSearch: this.handleSearch,
          onChange: this.props.onChange,
          onFocus: this.props.onChange,
          loading: loading,
          items: searchResult
        })
      );
    }
  }]);

  return FuzzySearchableSelect;
}(_react2.default.Component);

FuzzySearchableSelect.propTypes = {
  label: _propTypes2.default.string.isRequired,
  placeholder: _propTypes2.default.string,
  onChange: _propTypes2.default.func,
  value: _propTypes2.default.object,
  error: _propTypes2.default.bool,
  items: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    title: _propTypes2.default.string
  }))
};
FuzzySearchableSelect.defaultProps = {
  onChange: function onChange() {},
  onBlur: function onBlur() {},
  onFocus: function onFocus() {}
};
exports.default = FuzzySearchableSelect;