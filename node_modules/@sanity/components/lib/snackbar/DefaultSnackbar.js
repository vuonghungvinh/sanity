'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _defaultStyle = require('part:@sanity/components/snackbar/default-style');

var _defaultStyle2 = _interopRequireDefault(_defaultStyle);

var _default = require('part:@sanity/components/buttons/default');

var _default2 = _interopRequireDefault(_default);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DefaultSnackbar = function (_React$PureComponent) {
  _inherits(DefaultSnackbar, _React$PureComponent);

  function DefaultSnackbar(props, context) {
    _classCallCheck(this, DefaultSnackbar);

    var _this = _possibleConstructorReturn(this, (DefaultSnackbar.__proto__ || Object.getPrototypeOf(DefaultSnackbar)).call(this, props, context));

    _this.hide = function () {
      _this.setState({ visible: false });
    };

    _this.show = function () {
      _this.setState({ visible: true });
    };

    _this.handleAction = function () {
      _this.props.onAction(_this.props.action);
    };

    _this.handleMouseOver = function () {
      _this.cancelHide();
    };

    _this.handleMouseLeave = function () {
      _this.scheduleHide();
    };

    _this.state = {
      visible: true
    };
    return _this;
  }

  _createClass(DefaultSnackbar, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.scheduleHide();
    }
  }, {
    key: 'cancelHide',
    value: function cancelHide() {
      clearTimeout(this._timerId);
    }
  }, {
    key: 'scheduleHide',
    value: function scheduleHide() {
      var timeout = this.props.timeout;

      this.cancelHide();
      if (timeout > 0) {
        this._timerId = setTimeout(this.hide, timeout * 1000);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.cancelHide();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      if (prevProps.timeout !== this.props.timeout) {
        this.scheduleHide();
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.timeout !== this.props.timeout) {
        this.show();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          kind = _props.kind,
          action = _props.action,
          children = _props.children;


      var style = (_defaultStyle2.default[kind] || _defaultStyle2.default.root) + ' ' + (this.state.visible ? _defaultStyle2.default.visible : _defaultStyle2.default.hidden);

      return _react2.default.createElement(
        'div',
        { className: style },
        _react2.default.createElement(
          'div',
          { className: _defaultStyle2.default.inner, onMouseOver: this.handleMouseOver, onMouseLeave: this.handleMouseLeave },
          action && _react2.default.createElement(
            'div',
            { className: _defaultStyle2.default.action },
            _react2.default.createElement(
              _default2.default,
              { inverted: true, color: 'white', onClick: this.handleAction },
              action.title
            )
          ),
          _react2.default.createElement(
            'div',
            { className: _defaultStyle2.default.content },
            children
          )
        )
      );
    }
  }]);

  return DefaultSnackbar;
}(_react2.default.PureComponent);

DefaultSnackbar.propTypes = {
  kind: _propTypes2.default.oneOf(['danger', 'info', 'warning', 'error', 'success']),
  children: _propTypes2.default.node.isRequired,
  timeout: _propTypes2.default.number,
  onAction: _propTypes2.default.func,
  action: _propTypes2.default.shape({
    title: _propTypes2.default.string
  })
};
DefaultSnackbar.defaultProps = {
  kind: 'info',
  timeout: 0
};
exports.default = DefaultSnackbar;