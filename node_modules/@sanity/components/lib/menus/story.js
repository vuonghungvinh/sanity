'use strict';

var _range2 = require('lodash/range');

var _range3 = _interopRequireDefault(_range2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _default = require('part:@sanity/components/menus/default');

var _default2 = _interopRequireDefault(_default);

var _storybook = require('part:@sanity/storybook');

var _sanityLogoIcon = require('part:@sanity/base/sanity-logo-icon');

var _sanityLogoIcon2 = _interopRequireDefault(_sanityLogoIcon);

var _knobs = require('part:@sanity/storybook/addons/knobs');

var _sanity = require('part:@sanity/storybook/addons/sanity');

var _sanity2 = _interopRequireDefault(_sanity);

var _chance = require('chance');

var _chance2 = _interopRequireDefault(_chance);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var chance = new _chance2.default();
//import StateMenu from 'part:@sanity/components/menus/state'


(0, _storybook.storiesOf)('Menus').addDecorator(_knobs.withKnobs).add('Default', function () {

  var icon = (0, _knobs.boolean)('icons', false) ? _sanityLogoIcon2.default : false;
  var items = (0, _range3.default)((0, _knobs.number)('#items', 30)).map(function (item, i) {
    return {
      title: chance.name(),
      icon: icon,
      key: i
    };
  });

  var origins = {
    'top-left': 'Top Left',
    'top-right': 'Top Right',
    'bottom-right': 'Bottom Right',
    'bottom-left': 'Bottom left'
  };

  var scrollStyle = {
    width: '70vw',
    height: '70vh',
    border: '1px dotted #ccc',
    position: 'relative',
    overflow: 'scroll'
  };

  return _react2.default.createElement(
    _sanity2.default,
    { part: 'part:@sanity/components/menus/default', propTables: [_default2.default] },
    _react2.default.createElement(
      'div',
      {
        style: (0, _knobs.boolean)('is inside scroll', false) ? scrollStyle : {}
      },
      _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(_default2.default, {
          onAction: (0, _storybook.action)('onAction'),
          onClose: (0, _storybook.action)('onClose'),
          onClickOutside: (0, _storybook.action)('prop:onClickOutside'),
          items: items,
          origin: (0, _knobs.select)('origin (prop)', origins),
          isOpen: (0, _knobs.boolean)('isOpen (prop)', true)
        })
      )
    )
  );
});