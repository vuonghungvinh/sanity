'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _defaultStyle = require('part:@sanity/components/menus/default-style');

var _defaultStyle2 = _interopRequireDefault(_defaultStyle);

var _reactInk = require('react-ink');

var _reactInk2 = _interopRequireDefault(_reactInk);

var _reactClickOutside = require('react-click-outside');

var _reactClickOutside2 = _interopRequireDefault(_reactClickOutside);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DefaultMenu = function (_React$Component) {
  _inherits(DefaultMenu, _React$Component);

  function DefaultMenu(props) {
    _classCallCheck(this, DefaultMenu);

    var _this = _possibleConstructorReturn(this, (DefaultMenu.__proto__ || Object.getPrototypeOf(DefaultMenu)).call(this, props));

    _this.lastWindowHeight = 0;
    _this.scrollOffset = 0;

    _this.handleClickOutside = function (event) {
      if (_this.props.isOpen) {
        event.stopPropagation();
        _this.props.onClickOutside(event);
      }
    };

    _this.handleKeyDown = function (event) {
      var items = _this.props.items;
      var selectedItem = _this.state.selectedItem;

      var currentIndex = items.indexOf(selectedItem) || 0;

      var isOpen = _this.props.isOpen || _this.props.opened; // eslint-disable-line

      if (event.key == 'Escape' && isOpen) {
        _this.props.onClose();
      }

      if (event.key == 'ArrowDown' && isOpen && currentIndex < items.length - 1) {
        _this.setState({
          focusedItem: _this.props.items[currentIndex + 1]
        });
      }

      if (event.key == 'ArrowUp' && isOpen && currentIndex > 0) {
        _this.setState({
          focusedItem: _this.props.items[currentIndex - 1]
        });
      }

      if (event.key == 'Enter' && isOpen && _this.state.selectedItem) {
        _this.props.onAction(_this.props.items[currentIndex]);
      }
    };

    _this.handleItemClick = function (event) {
      var actionId = event.currentTarget.getAttribute('data-action-id');
      _this.props.onAction(_this.props.items[actionId]);
    };

    _this.handleFocus = function (event) {
      var index = event.target.getAttribute('data-action-id');
      _this.setState({
        focusedItem: _this.props.items[index]
      });
    };

    _this.handleKeyPress = function (event) {
      var index = event.target.getAttribute('data-action-id');
      if (event.key === 'Enter') {
        _this.props.onAction(_this.props.items[index]);
      }
    };

    _this.setRootElement = function (element) {
      _this._rootElement = element;
    };

    _this.state = {
      focusedItem: null
    };
    return _this;
  }

  _createClass(DefaultMenu, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      window.addEventListener('keydown', this.handleKeyDown, false);
      window.addEventListener('resize', this.handleResize, false);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.removeEventListener('resize', this.handleResize, false);
      window.removeEventListener('keydown', this.handleKeyDown, false);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var focusedItem = this.state.focusedItem;
      var _props = this.props,
          items = _props.items,
          ripple = _props.ripple,
          className = _props.className,
          opened = _props.opened;


      var isOpen = opened || this.props.isOpen;

      return _react2.default.createElement(
        'div',
        {
          ref: this.setRootElement,
          className: (isOpen ? _defaultStyle2.default.isOpen : _defaultStyle2.default.closed) + ' ' + (className || '')
        },
        _react2.default.createElement(
          'ul',
          { className: _defaultStyle2.default.list },
          items.map(function (item, i) {
            var Icon = item.icon;
            return _react2.default.createElement(
              'li',
              {
                key: i,
                className: (0, _classnames2.default)([item === focusedItem ? _defaultStyle2.default.focusedItem : _defaultStyle2.default.item, item.isDisabled && _defaultStyle2.default.isDisabled, item.divider && _defaultStyle2.default.divider])
              },
              _react2.default.createElement(
                'a',
                {
                  onClick: item.isDisabled ? null : _this2.handleItemClick,
                  'data-action-id': i,
                  className: item.danger ? _defaultStyle2.default.dangerLink : _defaultStyle2.default.link,
                  onFocus: _this2.handleFocus,
                  tabIndex: '0',
                  onKeyPress: _this2.handleKeyPress
                },
                Icon && _react2.default.createElement(
                  'span',
                  { className: _defaultStyle2.default.iconContainer },
                  _react2.default.createElement(Icon, { className: _defaultStyle2.default.icon })
                ),
                item.title,
                ripple && !item.isDisabled && _react2.default.createElement(_reactInk2.default, { duration: 200, opacity: 0.10, radius: 200 })
              )
            );
          })
        )
      );
    }
  }]);

  return DefaultMenu;
}(_react2.default.Component);

DefaultMenu.propTypes = {
  onAction: _propTypes2.default.func.isRequired,
  isOpen: _propTypes2.default.bool,
  ripple: _propTypes2.default.bool,
  className: _propTypes2.default.string,
  onClickOutside: _propTypes2.default.func,
  onClose: _propTypes2.default.func,
  items: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    title: _propTypes2.default.node.isRequired,
    icon: _propTypes2.default.func
  }))
};
DefaultMenu.defaultProps = {
  menuOpened: false,
  isOpen: false,
  fullWidth: false,
  icon: false,
  ripple: true,
  onClickOutside: function onClickOutside() {},
  onClose: function onClose() {}
};
exports.default = (0, _reactClickOutside2.default)(DefaultMenu);