'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _uniqueId2 = require('lodash/uniqueId');

var _uniqueId3 = _interopRequireDefault(_uniqueId2);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _defaultStyle = require('part:@sanity/components/textfields/default-style');

var _defaultStyle2 = _interopRequireDefault(_defaultStyle);

var _default = require('part:@sanity/components/textinputs/default');

var _default2 = _interopRequireDefault(_default);

var _default3 = require('part:@sanity/components/formfields/default');

var _default4 = _interopRequireDefault(_default3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DefaultTextField = function (_React$Component) {
  _inherits(DefaultTextField, _React$Component);

  function DefaultTextField() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, DefaultTextField);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = DefaultTextField.__proto__ || Object.getPrototypeOf(DefaultTextField)).call.apply(_ref, [this].concat(args))), _this), _this.handleClear = function () {
      _this.props.onClear();
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(DefaultTextField, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this._inputId = this.props.id || (0, _uniqueId3.default)('DefaultTextField');
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          label = _props.label,
          placeholder = _props.placeholder,
          error = _props.error,
          isClearable = _props.isClearable,
          type = _props.type,
          className = _props.className,
          level = _props.level,
          description = _props.description,
          hasFocus = _props.hasFocus,
          onChange = _props.onChange,
          onKeyPress = _props.onKeyPress,
          onFocus = _props.onFocus,
          onBlur = _props.onBlur,
          value = _props.value;


      return _react2.default.createElement(
        _default4.default,
        {
          className: (error ? _defaultStyle2.default.error : _defaultStyle2.default.root) + ' ' + (className || ''),
          level: level,
          labelFor: this._inputId,
          label: label,
          description: description
        },
        _react2.default.createElement(_default2.default, {
          className: '' + (error ? _defaultStyle2.default.inputError : _defaultStyle2.default.input),
          id: this._inputId,
          type: type,
          onChange: onChange,
          value: value,
          placeholder: placeholder,
          onKeyPress: onKeyPress,
          onFocus: onFocus,
          onBlur: onBlur,
          onClear: this.handleClear,
          isClearable: isClearable,
          hasFocus: hasFocus
        })
      );
    }
  }]);

  return DefaultTextField;
}(_react2.default.Component);

DefaultTextField.propTypes = {
  label: _propTypes2.default.string.isRequired,
  id: _propTypes2.default.string,
  type: _propTypes2.default.string,
  onChange: _propTypes2.default.func,
  onFocus: _propTypes2.default.func,
  onBlur: _propTypes2.default.func,
  onClear: _propTypes2.default.func,
  onKeyPress: _propTypes2.default.func,
  value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  error: _propTypes2.default.bool,
  level: _propTypes2.default.number,
  placeholder: _propTypes2.default.string,
  isClearable: _propTypes2.default.bool,
  className: _propTypes2.default.string,
  description: _propTypes2.default.string,
  hasFocus: _propTypes2.default.bool
};
DefaultTextField.defaultProps = {
  level: 1,
  value: '',
  hasFocus: false,
  onKeyPress: function onKeyPress() {},
  onChange: function onChange() {},
  onFocus: function onFocus() {},
  onClear: function onClear() {}
};
exports.default = DefaultTextField;