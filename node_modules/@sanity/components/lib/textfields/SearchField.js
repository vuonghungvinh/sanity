'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _uniqueId2 = require('lodash/uniqueId');

var _uniqueId3 = _interopRequireDefault(_uniqueId2);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _searchStyle = require('part:@sanity/components/textfields/search-style');

var _searchStyle2 = _interopRequireDefault(_searchStyle);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SearchFieldField = function (_React$Component) {
  _inherits(SearchFieldField, _React$Component);

  function SearchFieldField() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, SearchFieldField);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = SearchFieldField.__proto__ || Object.getPrototypeOf(SearchFieldField)).call.apply(_ref, [this].concat(args))), _this), _this._inputId = (0, _uniqueId3.default)('searchfield'), _this.handleChange = function (event) {
      var value = event.target.value;
      _this.props.onChange(value);
    }, _this.handleKeyPress = function (event) {
      _this.props.onKeyPress(event);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(SearchFieldField, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          label = _props.label,
          placeholder = _props.placeholder,
          value = _props.value,
          onChange = _props.onChange,
          onFocus = _props.onFocus,
          onBlur = _props.onBlur,
          onKeyPress = _props.onKeyPress;


      return _react2.default.createElement(
        'div',
        { className: _searchStyle2.default.root },
        label && _react2.default.createElement(
          'label',
          { htmlFor: this._inputId, className: _searchStyle2.default.label },
          label
        ),
        _react2.default.createElement('input', {
          className: _searchStyle2.default.input,
          id: this._inputId,
          type: 'search',
          onChange: onChange,
          onFocus: onFocus,
          onBlur: onBlur,
          value: value,
          placeholder: placeholder,
          onKeyPress: onKeyPress
        })
      );
    }
  }]);

  return SearchFieldField;
}(_react2.default.Component);

SearchFieldField.propTypes = {
  label: _propTypes2.default.string.isRequired,
  value: _propTypes2.default.string,

  onChange: _propTypes2.default.func,
  onKeyPress: _propTypes2.default.func,
  onFocus: _propTypes2.default.func,
  onBlur: _propTypes2.default.func,
  placeholder: _propTypes2.default.string
};
SearchFieldField.defaultProps = {
  value: '',
  onKeyPress: function onKeyPress() {},
  onChange: function onChange() {},
  onFocus: function onFocus() {},
  onBlur: function onBlur() {}
};
exports.default = SearchFieldField;