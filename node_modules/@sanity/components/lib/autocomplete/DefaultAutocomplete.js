'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _uniqueId2 = require('lodash/uniqueId');

var _uniqueId3 = _interopRequireDefault(_uniqueId2);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _default = require('part:@sanity/components/formfields/default');

var _default2 = _interopRequireDefault(_default);

var _default3 = require('part:@sanity/components/textinputs/default');

var _default4 = _interopRequireDefault(_default3);

var _defaultStyle = require('part:@sanity/components/autocomplete/default-style');

var _defaultStyle2 = _interopRequireDefault(_defaultStyle);

var _default5 = require('part:@sanity/components/lists/default');

var _default6 = _interopRequireDefault(_default5);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DefaultAutocomplete = function (_React$Component) {
  _inherits(DefaultAutocomplete, _React$Component);

  function DefaultAutocomplete(props, context) {
    _classCallCheck(this, DefaultAutocomplete);

    var _this = _possibleConstructorReturn(this, (DefaultAutocomplete.__proto__ || Object.getPrototypeOf(DefaultAutocomplete)).call(this, props, context));

    _this.handleSelect = _this.handleSelect.bind(_this);
    _this.handleKeyPress = _this.handleKeyPress.bind(_this);
    _this.handleChange = _this.handleChange.bind(_this);
    return _this;
  }

  _createClass(DefaultAutocomplete, [{
    key: 'handleKeyPress',
    value: function handleKeyPress() {
      // console.log('press')
    }
  }, {
    key: 'handleSelect',
    value: function handleSelect(item) {
      this.props.onSelect(item);
    }
  }, {
    key: 'handleChange',
    value: function handleChange(event) {
      this.props.onChange(event);
    }
  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      this._inputId = this.props.id || (0, _uniqueId3.default)('Autocomplete');
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          suggestions = _props.suggestions,
          label = _props.label,
          value = _props.value;


      var isOpen = suggestions.length > 1;

      return _react2.default.createElement(
        _default2.default,
        { className: '' + (isOpen ? _defaultStyle2.default.opened : _defaultStyle2.default.closed), label: label, labelFor: this._inputId },
        _react2.default.createElement(
          'div',
          { className: _defaultStyle2.default.input },
          _react2.default.createElement(_default4.default, {
            id: this._inputId,
            value: value,
            onKeyPress: this.handleKeyPress,
            className: _defaultStyle2.default.textField,
            onChange: this.handleChange
          })
        ),
        _react2.default.createElement(
          'div',
          { className: _defaultStyle2.default.suggestionsContainer },
          _react2.default.createElement(_default6.default, {
            items: suggestions,
            className: _defaultStyle2.default.suggestions,
            onSelect: this.handleSelect
          })
        )
      );
    }
  }]);

  return DefaultAutocomplete;
}(_react2.default.Component);

DefaultAutocomplete.propTypes = {
  label: _propTypes2.default.string.isRequired,
  onChange: _propTypes2.default.func,
  onSelect: _propTypes2.default.func,
  value: _propTypes2.default.string,
  hasError: _propTypes2.default.bool,
  onKeyPress: _propTypes2.default.func,
  placeholder: _propTypes2.default.string,
  isClearable: _propTypes2.default.bool,
  isOpen: _propTypes2.default.bool,
  id: _propTypes2.default.string,
  items: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    title: _propTypes2.default.string
  })),
  suggestions: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    title: _propTypes2.default.string
  }))
};
DefaultAutocomplete.defaultProps = {
  value: '',
  onChange: function onChange() {},
  onSelect: function onSelect() {},

  suggestions: []
};
exports.default = DefaultAutocomplete;