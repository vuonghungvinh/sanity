'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _buttonsStyle = require('part:@sanity/components/toggles/buttons-style');

var _buttonsStyle2 = _interopRequireDefault(_buttonsStyle);

var _default = require('part:@sanity/components/buttons/default');

var _default2 = _interopRequireDefault(_default);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ITEM_SHAPE = {
  icon: _propTypes2.default.node,
  title: _propTypes2.default.string
};

var ToggleButtons = function (_React$Component) {
  _inherits(ToggleButtons, _React$Component);

  function ToggleButtons() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ToggleButtons);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ToggleButtons.__proto__ || Object.getPrototypeOf(ToggleButtons)).call.apply(_ref, [this].concat(args))), _this), _this.handleClick = function (event) {
      var _this$props = _this.props,
          onChange = _this$props.onChange,
          items = _this$props.items;

      var index = Number(event.currentTarget.getAttribute('data-index'));
      onChange(items[index]);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ToggleButtons, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          items = _props.items,
          label = _props.label,
          value = _props.value;


      return _react2.default.createElement(
        'div',
        { className: _buttonsStyle2.default.root },
        _react2.default.createElement(
          'div',
          { className: _buttonsStyle2.default.label },
          label
        ),
        items.map(function (item, i) {
          return _react2.default.createElement(
            _default2.default,
            {
              className: item == value ? _buttonsStyle2.default.selectedButton : _buttonsStyle2.default.button,
              kind: 'simple',
              key: i,
              icon: item.icon,
              onClick: _this2.handleClick,
              'data-index': i
            },
            item.title
          );
        })
      );
    }
  }]);

  return ToggleButtons;
}(_react2.default.Component);

ToggleButtons.propTypes = {
  label: _propTypes2.default.string,
  onChange: _propTypes2.default.func,
  value: _propTypes2.default.shape(ITEM_SHAPE),
  items: _propTypes2.default.arrayOf(_propTypes2.default.shape(ITEM_SHAPE))
};
exports.default = ToggleButtons;