'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _buttonStyle = require('part:@sanity/components/toggles/button-style');

var _buttonStyle2 = _interopRequireDefault(_buttonStyle);

var _default = require('part:@sanity/components/buttons/default');

var _default2 = _interopRequireDefault(_default);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ToggleButton = function (_React$Component) {
  _inherits(ToggleButton, _React$Component);

  function ToggleButton() {
    _classCallCheck(this, ToggleButton);

    return _possibleConstructorReturn(this, (ToggleButton.__proto__ || Object.getPrototypeOf(ToggleButton)).apply(this, arguments));
  }

  _createClass(ToggleButton, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          disabled = _props.disabled,
          selected = _props.selected,
          icon = _props.icon,
          className = _props.className,
          title = _props.title;

      var buttonClasses = '\n      ' + (selected ? _buttonStyle2.default.selected : _buttonStyle2.default.unSelected) + '\n      ' + className + '\n    ';
      return _react2.default.createElement(
        _default2.default,
        {
          className: buttonClasses,
          icon: icon,
          title: title,
          disabled: disabled,
          onClick: this.props.onClick,
          kind: 'simple'
        },
        this.props.children
      );
    }
  }]);

  return ToggleButton;
}(_react2.default.Component);

ToggleButton.propTypes = {
  icon: _propTypes2.default.func,
  onClick: _propTypes2.default.func.isRequired,
  selected: _propTypes2.default.bool,
  disabled: _propTypes2.default.bool,
  children: _propTypes2.default.node,
  className: _propTypes2.default.string,
  title: _propTypes2.default.string
};
ToggleButton.defaultProps = {
  className: '',
  disabled: false
};
exports.default = ToggleButton;