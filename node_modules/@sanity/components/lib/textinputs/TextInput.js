'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _closeIcon = require('part:@sanity/base/close-icon');

var _closeIcon2 = _interopRequireDefault(_closeIcon);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var NOOP = function NOOP() {};

var VALID_TYPES = ['color', 'date', 'email', 'month', 'password', 'search', 'tel', 'text', 'number', 'url', 'week'];

var DefaultTextInput = function (_React$PureComponent) {
  _inherits(DefaultTextInput, _React$PureComponent);

  function DefaultTextInput() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, DefaultTextInput);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = DefaultTextInput.__proto__ || Object.getPrototypeOf(DefaultTextInput)).call.apply(_ref, [this].concat(args))), _this), _this.select = function () {
      _this._input.select();
    }, _this.setInputElement = function (element) {
      _this._input = element;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(DefaultTextInput, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var isSelected = this.props.isSelected;

      this.setSelected(isSelected);
      // this.setState({hasFocus: this._input === document.activeElement})
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.isSelected !== this.props.isSelected) {
        this.setSelected(nextProps.isSelected);
      }
    }
  }, {
    key: 'setSelected',
    value: function setSelected(isSelected) {
      if (isSelected) {
        this._input.select();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          onClear = _props.onClear,
          hasError = _props.hasError,
          isClearable = _props.isClearable,
          disabled = _props.disabled,
          isSelected = _props.isSelected,
          styles = _props.styles,
          rest = _objectWithoutProperties(_props, ['onClear', 'hasError', 'isClearable', 'disabled', 'isSelected', 'styles']);

      return _react2.default.createElement(
        'div',
        {
          className: (0, _classnames2.default)(styles.container, [hasError && styles.containerOnError, isClearable && styles.isClearable, disabled && styles.isDisabled])
        },
        _react2.default.createElement('input', _extends({
          ref: this.setInputElement
        }, rest, {
          className: (0, _classnames2.default)(styles.input, [hasError && styles.inputOnError]),
          disabled: disabled
        })),
        _react2.default.createElement('div', { className: styles.focusHelper }),
        isClearable && _react2.default.createElement(
          'button',
          { className: styles.clearButton, onClick: onClear },
          _react2.default.createElement(_closeIcon2.default, { color: 'inherit' })
        )
      );
    }
  }]);

  return DefaultTextInput;
}(_react2.default.PureComponent);

DefaultTextInput.propTypes = {
  value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  type: _propTypes2.default.oneOf(VALID_TYPES),
  onClear: _propTypes2.default.func,
  onFocus: _propTypes2.default.func,
  onBlur: _propTypes2.default.func,
  isClearable: _propTypes2.default.bool,
  isSelected: _propTypes2.default.bool,
  disabled: _propTypes2.default.bool,
  autoComplete: _propTypes2.default.string,
  hasError: _propTypes2.default.bool,
  styles: _propTypes2.default.shape({
    container: _propTypes2.default.string,
    input: _propTypes2.default.string,
    isClearable: _propTypes2.default.string,
    focusHelper: _propTypes2.default.string,
    clearButton: _propTypes2.default.string,
    inputOnDisabled: _propTypes2.default.string,
    inputOnError: _propTypes2.default.string,
    containerOnError: _propTypes2.default.string
  })
};
DefaultTextInput.defaultProps = {
  value: '',
  type: 'text',
  isSelected: false,
  hasError: false,
  isClearable: false,
  disabled: false,
  autoComplete: 'off',
  onClear: NOOP,
  onFocus: NOOP,
  onBlur: NOOP,
  styles: {}
};
exports.default = DefaultTextInput;