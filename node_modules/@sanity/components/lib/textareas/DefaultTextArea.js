'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _defaultStyle = require('part:@sanity/components/textareas/default-style');

var _defaultStyle2 = _interopRequireDefault(_defaultStyle);

var _closeIcon = require('part:@sanity/base/close-icon');

var _closeIcon2 = _interopRequireDefault(_closeIcon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var NOOP = function NOOP() {};

var DefaultTextArea = function (_React$Component) {
  _inherits(DefaultTextArea, _React$Component);

  function DefaultTextArea() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, DefaultTextArea);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = DefaultTextArea.__proto__ || Object.getPrototypeOf(DefaultTextArea)).call.apply(_ref, [this].concat(args))), _this), _this.handleClear = function (event) {
      _this.props.onClear(event);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(DefaultTextArea, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          value = _props.value,
          isClearable = _props.isClearable,
          rows = _props.rows,
          onKeyPress = _props.onKeyPress,
          onChange = _props.onChange,
          onFocus = _props.onFocus,
          onBlur = _props.onBlur,
          onClear = _props.onClear,
          rest = _objectWithoutProperties(_props, ['value', 'isClearable', 'rows', 'onKeyPress', 'onChange', 'onFocus', 'onBlur', 'onClear']);

      return _react2.default.createElement(
        'div',
        { className: _defaultStyle2.default.root },
        _react2.default.createElement('textarea', _extends({
          className: _defaultStyle2.default.textarea,
          rows: rows,
          value: value,
          onChange: onChange,
          onKeyPress: onKeyPress,
          onFocus: onFocus,
          onBlur: onBlur,
          autoComplete: 'off'
        }, rest)),
        isClearable && !this.props.disabled && _react2.default.createElement(
          'button',
          { className: _defaultStyle2.default.clearButton, onClick: onClear },
          _react2.default.createElement(_closeIcon2.default, { color: 'inherit' })
        )
      );
    }
  }]);

  return DefaultTextArea;
}(_react2.default.Component);

DefaultTextArea.propTypes = {
  onChange: _propTypes2.default.func,
  onFocus: _propTypes2.default.func,
  onKeyPress: _propTypes2.default.func,
  onBlur: _propTypes2.default.func,
  onClear: _propTypes2.default.func,
  value: _propTypes2.default.string,
  isClearable: _propTypes2.default.bool,
  rows: _propTypes2.default.number,
  hasFocus: _propTypes2.default.bool,
  disabled: _propTypes2.default.bool
};
DefaultTextArea.defaultProps = {
  value: '',
  rows: 10,
  isClearable: false,
  onKeyPress: NOOP,
  onChange: NOOP,
  onFocus: NOOP,
  onClear: NOOP,
  onBlur: NOOP
};
exports.default = DefaultTextArea;