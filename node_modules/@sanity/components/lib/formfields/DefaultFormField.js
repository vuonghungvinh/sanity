'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _defaultStyle = require('part:@sanity/components/formfields/default-style');

var _defaultStyle2 = _interopRequireDefault(_defaultStyle);

var _default = require('part:@sanity/components/labels/default');

var _default2 = _interopRequireDefault(_default);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DefaultFormField = function (_React$Component) {
  _inherits(DefaultFormField, _React$Component);

  function DefaultFormField() {
    _classCallCheck(this, DefaultFormField);

    return _possibleConstructorReturn(this, (DefaultFormField.__proto__ || Object.getPrototypeOf(DefaultFormField)).apply(this, arguments));
  }

  _createClass(DefaultFormField, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          level = _props.level,
          label = _props.label,
          labelFor = _props.labelFor,
          description = _props.description,
          children = _props.children,
          inline = _props.inline,
          wrapped = _props.wrapped,
          className = _props.className;


      var levelClass = 'level_' + level;

      return _react2.default.createElement(
        'div',
        {
          className: '\n          ' + (inline ? _defaultStyle2.default.inline : _defaultStyle2.default.block) + '\n          ' + (_defaultStyle2.default[levelClass] || '') + '\n          ' + (wrapped ? _defaultStyle2.default.wrapped : '') + '\n          ' + (className || '')
        },
        _react2.default.createElement(
          'label',
          { className: _defaultStyle2.default.inner, htmlFor: labelFor },
          _react2.default.createElement(
            'div',
            { className: _defaultStyle2.default.labelAndDescriptionWrapper },
            label && _react2.default.createElement(
              _default2.default,
              {
                className: _defaultStyle2.default.label,
                level: level
              },
              label
            ),
            description && _react2.default.createElement(
              'div',
              { className: _defaultStyle2.default.description },
              description
            )
          ),
          _react2.default.createElement(
            'div',
            { className: _defaultStyle2.default.content },
            children
          )
        )
      );
    }
  }]);

  return DefaultFormField;
}(_react2.default.Component);

DefaultFormField.propTypes = {
  label: _propTypes2.default.string,
  className: _propTypes2.default.string,
  inline: _propTypes2.default.bool,
  description: _propTypes2.default.string,
  level: _propTypes2.default.number,
  children: _propTypes2.default.node,
  wrapped: _propTypes2.default.bool,
  labelFor: _propTypes2.default.string
};
DefaultFormField.defaultProps = {
  level: 1
};
exports.default = DefaultFormField;