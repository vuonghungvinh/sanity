'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _inlineStyle = require('part:@sanity/components/previews/inline-style');

var _inlineStyle2 = _interopRequireDefault(_inlineStyle);

var _MediaRender = require('./common/MediaRender.js');

var _MediaRender2 = _interopRequireDefault(_MediaRender);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var InlinePreview = function (_React$Component) {
  _inherits(InlinePreview, _React$Component);

  function InlinePreview() {
    _classCallCheck(this, InlinePreview);

    return _possibleConstructorReturn(this, (InlinePreview.__proto__ || Object.getPrototypeOf(InlinePreview)).apply(this, arguments));
  }

  _createClass(InlinePreview, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          item = _props.item,
          emptyText = _props.emptyText,
          assetSize = _props.assetSize,
          children = _props.children;


      if (!item) {
        return _react2.default.createElement(
          'span',
          { className: _inlineStyle2.default.empty },
          emptyText
        );
      }

      return _react2.default.createElement(
        'span',
        { className: '' + _inlineStyle2.default.root },
        (item.media || item.sanityImage || item.imageUrl) && _react2.default.createElement(
          'span',
          { className: '' + _inlineStyle2.default.media },
          _react2.default.createElement(_MediaRender2.default, { size: assetSize, item: item })
        ),
        _react2.default.createElement(
          'span',
          { className: _inlineStyle2.default.title },
          item.title || emptyText
        ),
        children && _react2.default.createElement(
          'span',
          null,
          children
        )
      );
    }
  }]);

  return InlinePreview;
}(_react2.default.Component);

InlinePreview.propTypes = {
  item: _propTypes2.default.shape({
    title: _propTypes2.default.string,
    subtitle: _propTypes2.default.string,
    description: _propTypes2.default.string,
    media: _propTypes2.default.node,
    imageUrl: _propTypes2.default.string,
    sanityImage: _propTypes2.default.object
  }),
  assetSize: _propTypes2.default.shape({
    width: _propTypes2.default.number,
    height: _propTypes2.default.number,
    fit: _propTypes2.default.oneOf(['clip', 'crop', 'clamp'])
  }),
  emptyText: _propTypes2.default.string,
  children: _propTypes2.default.node
};
InlinePreview.defaultProps = {
  emptyText: 'Untitled',
  assetSize: { width: 40, height: 40 }
};
exports.default = InlinePreview;