'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _blockStyle = require('part:@sanity/components/previews/block-style');

var _blockStyle2 = _interopRequireDefault(_blockStyle);

var _MediaRender = require('./common/MediaRender.js');

var _MediaRender2 = _interopRequireDefault(_MediaRender);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BlockPreview = function (_React$Component) {
  _inherits(BlockPreview, _React$Component);

  function BlockPreview() {
    _classCallCheck(this, BlockPreview);

    return _possibleConstructorReturn(this, (BlockPreview.__proto__ || Object.getPrototypeOf(BlockPreview)).apply(this, arguments));
  }

  _createClass(BlockPreview, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          item = _props.item,
          emptyText = _props.emptyText,
          assetSize = _props.assetSize,
          children = _props.children,
          type = _props.type;


      return _react2.default.createElement(
        'div',
        {
          className: '\n          ' + _blockStyle2.default.root + '\n          ' + (item && item.subtitle ? _blockStyle2.default.hasSubtitle : '') + '\n        '
        },
        _react2.default.createElement(
          'div',
          { className: _blockStyle2.default.type },
          type.title || type.name
        ),
        item && (item.media || item.sanityImage || item.imageUrl) && _react2.default.createElement(
          'div',
          { className: '' + _blockStyle2.default.media },
          _react2.default.createElement(_MediaRender2.default, { size: assetSize, item: item })
        ),
        _react2.default.createElement(
          'div',
          { className: _blockStyle2.default.heading },
          _react2.default.createElement(
            'h2',
            { className: _blockStyle2.default.title },
            item && item.title || emptyText
          ),
          _react2.default.createElement(
            'h3',
            { className: _blockStyle2.default.subtitle },
            item && item.subtitle
          ),
          item && item.description && _react2.default.createElement(
            'p',
            { className: _blockStyle2.default.description },
            item.description
          )
        ),
        children && _react2.default.createElement(
          'div',
          { className: _blockStyle2.default.children },
          children
        )
      );
    }
  }]);

  return BlockPreview;
}(_react2.default.Component);

BlockPreview.propTypes = {
  item: _propTypes2.default.shape({
    title: _propTypes2.default.string,
    subtitle: _propTypes2.default.string,
    description: _propTypes2.default.string,
    media: _propTypes2.default.node,
    imageUrl: _propTypes2.default.string,
    sanityImage: _propTypes2.default.object
  }),
  assetSize: _propTypes2.default.shape({
    width: _propTypes2.default.number,
    height: _propTypes2.default.number,
    fit: _propTypes2.default.oneOf(['clip', 'crop', 'clamp'])
  }),
  emptyText: _propTypes2.default.string,
  children: _propTypes2.default.node,
  type: _propTypes2.default.shape({
    title: _propTypes2.default.string,
    name: _propTypes2.default.string
  })
};
BlockPreview.defaultProps = {
  emptyText: '',
  assetSize: { width: 140, height: 140 }
};
exports.default = BlockPreview;