'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _popoverStyle = require('part:@sanity/components/edititem/popover-style');

var _popoverStyle2 = _interopRequireDefault(_popoverStyle);

var _default = require('part:@sanity/components/buttons/default');

var _default2 = _interopRequireDefault(_default);

var _closeIcon = require('part:@sanity/base/close-icon');

var _closeIcon2 = _interopRequireDefault(_closeIcon);

var _sticky = require('part:@sanity/components/portal/sticky');

var _sticky2 = _interopRequireDefault(_sticky);

var _Stacked = require('../utilities/Stacked');

var _Stacked2 = _interopRequireDefault(_Stacked);

var _CaptureOutsideClicks = require('../utilities/CaptureOutsideClicks');

var _CaptureOutsideClicks2 = _interopRequireDefault(_CaptureOutsideClicks);

var _Escapable = require('../utilities/Escapable');

var _Escapable2 = _interopRequireDefault(_Escapable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PADDING = 10;

var EditItemPopOver = function (_React$PureComponent) {
  _inherits(EditItemPopOver, _React$PureComponent);

  function EditItemPopOver() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, EditItemPopOver);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = EditItemPopOver.__proto__ || Object.getPrototypeOf(EditItemPopOver)).call.apply(_ref, [this].concat(args))), _this), _this.lastY = 0, _this.state = {
      arrowLeft: 0,
      popoverLeft: 0,
      isResizing: false
    }, _this.setArrowElement = function (element) {
      _this._arrowElement = element;
    }, _this.setContentElement = function (element) {
      _this._contentElement = element;
    }, _this.setPopoverInnerElement = function (element) {
      _this._popOverInnerElement = element;
    }, _this.setRootElement = function (element) {
      _this._rootElement = element;
    }, _this.handlePortalResize = function (dimensions) {
      if (!_this._popOverInnerElement) {
        return;
      }

      var rootLeft = dimensions.rootLeft,
          availableHeight = dimensions.availableHeight,
          availableWidth = dimensions.availableWidth,
          isScrolling = dimensions.isScrolling;


      var width = _this._popOverInnerElement.offsetWidth;

      var popoverLeft = rootLeft - width / 2;

      if (availableWidth < rootLeft + width / 2) {
        popoverLeft = availableWidth - width - PADDING;
      }

      _this.setState({
        popoverLeft: popoverLeft,
        maxHeight: availableHeight,
        arrowLeft: rootLeft,
        isResizing: isScrolling,
        wantedHeight: _this._contentElement.scrollHeight
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(EditItemPopOver, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          title = _props.title,
          children = _props.children,
          actions = _props.actions,
          onClose = _props.onClose,
          isOpen = _props.isOpen;
      var _state = this.state,
          popoverLeft = _state.popoverLeft,
          arrowLeft = _state.arrowLeft,
          maxHeight = _state.maxHeight,
          isResizing = _state.isResizing,
          wantedHeight = _state.wantedHeight;


      return _react2.default.createElement(
        'div',
        { style: { display: 'span' }, ref: this.setRootElement },
        _react2.default.createElement(
          _sticky2.default,
          {
            isOpen: isOpen,
            onResize: this.handlePortalResize,
            wantedHeight: wantedHeight
          },
          _react2.default.createElement(
            _Stacked2.default,
            null,
            function (isActive) {
              return _react2.default.createElement(
                'div',
                {
                  ref: _this2.setPopoverInnerElement,
                  className: _popoverStyle2.default.root
                },
                _react2.default.createElement('div', {
                  className: title ? _popoverStyle2.default.filledArrow : _popoverStyle2.default.arrow,
                  ref: _this2.setArrowElement,
                  style: {
                    left: arrowLeft + 'px'
                  }
                }),
                _react2.default.createElement(
                  'div',
                  {
                    className: _popoverStyle2.default.popover,
                    style: {
                      left: popoverLeft + 'px'
                    }
                  },
                  _react2.default.createElement(
                    'button',
                    { className: title ? _popoverStyle2.default.closeInverted : _popoverStyle2.default.close, type: 'button', onClick: onClose },
                    _react2.default.createElement(_closeIcon2.default, null)
                  ),
                  title && _react2.default.createElement(
                    'h3',
                    { className: _popoverStyle2.default.title },
                    title
                  ),
                  _react2.default.createElement(_Escapable2.default, { onEscape: function onEscape(event) {
                      return (isActive || event.shiftKey) && onClose();
                    } }),
                  _react2.default.createElement(
                    _CaptureOutsideClicks2.default,
                    { onClickOutside: isActive ? onClose : null },
                    _react2.default.createElement(
                      'div',
                      {
                        ref: _this2.setContentElement,
                        className: isResizing ? _popoverStyle2.default.contentIsResizing : _popoverStyle2.default.content,
                        style: {
                          maxHeight: maxHeight + 'px'
                        }
                      },
                      children
                    ),
                    actions.length > 0 && _react2.default.createElement(
                      'div',
                      { className: _popoverStyle2.default.functions },
                      actions.map(function (action) {
                        return _react2.default.createElement(
                          _default2.default,
                          {
                            key: action.key,
                            onClick: action.handleClick,
                            kind: action.kind,
                            className: _popoverStyle2.default['button_' + action.kind] || _popoverStyle2.default.button
                          },
                          action.title
                        );
                      })
                    )
                  )
                )
              );
            }
          )
        )
      );
    }
  }]);

  return EditItemPopOver;
}(_react2.default.PureComponent);

EditItemPopOver.propTypes = {
  title: _propTypes2.default.string,
  children: _propTypes2.default.node.isRequired,
  onClose: _propTypes2.default.func,
  actions: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    kind: _propTypes2.default.string,
    title: _propTypes2.default.string,
    key: _propTypes2.default.string,
    handleClick: _propTypes2.default.func
  })),
  isOpen: _propTypes2.default.bool
};
EditItemPopOver.defaultProps = {
  title: undefined,
  onClose: function onClose() {},

  actions: [],
  isOpen: true
};
exports.default = EditItemPopOver;