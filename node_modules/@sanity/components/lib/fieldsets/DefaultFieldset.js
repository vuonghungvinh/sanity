'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _defaultStyle = require('part:@sanity/components/fieldsets/default-style');

var _defaultStyle2 = _interopRequireDefault(_defaultStyle);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _arrowDropDown = require('part:@sanity/base/arrow-drop-down');

var _arrowDropDown2 = _interopRequireDefault(_arrowDropDown);

var _Styleable = require('../utilities/Styleable');

var _Styleable2 = _interopRequireDefault(_Styleable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable react/no-multi-comp */

var Fieldset = function (_React$Component) {
  _inherits(Fieldset, _React$Component);

  function Fieldset() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Fieldset);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Fieldset.__proto__ || Object.getPrototypeOf(Fieldset)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      isOpen: typeof _this.props.collapsable == 'undefined'
    }, _this.handleToggle = function () {
      if (_this.props.collapsable) {
        _this.setState({
          isOpen: !_this.state.isOpen
        });
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Fieldset, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          fieldset = _props.fieldset,
          legend = _props.legend,
          description = _props.description,
          columns = _props.columns,
          level = _props.level,
          className = _props.className,
          children = _props.children,
          collapsable = _props.collapsable,
          transparent = _props.transparent,
          styles = _props.styles,
          rest = _objectWithoutProperties(_props, ['fieldset', 'legend', 'description', 'columns', 'level', 'className', 'children', 'collapsable', 'transparent', 'styles']);

      var isOpen = this.state.isOpen;

      var levelString = 'level' + level;
      var rootClass = '\n      ' + styles.root + '\n      ' + (styles['columns' + columns] || '') + '\n      ' + (styles[levelString] || '') + '\n      ' + (transparent ? styles.transparent : '') + '\n      ' + (className || '') + '\n    ';
      return _react2.default.createElement(
        'fieldset',
        _extends({}, rest, { className: rootClass, 'data-nesting-level': level }),
        _react2.default.createElement(
          'div',
          { className: styles.inner },
          _react2.default.createElement(
            'legend',
            { className: styles.legend + ' ' + (isOpen ? styles.isOpen : ''), onClick: this.handleToggle },
            collapsable && _react2.default.createElement(
              'div',
              { className: styles.arrow + ' ' + (isOpen ? styles.isOpen : '') },
              _react2.default.createElement(_arrowDropDown2.default, null)
            ),
            legend || fieldset.legend
          ),
          (description || fieldset.description) && _react2.default.createElement(
            'p',
            { className: styles.description + ' ' + (isOpen ? styles.isOpen : '') },
            description || fieldset.description
          ),
          _react2.default.createElement(
            'div',
            { className: styles.content + ' ' + (isOpen ? styles.isOpen : '') },
            _react2.default.createElement(
              'div',
              { className: styles.fieldWrapper },
              isOpen && children
            )
          )
        )
      );
    }
  }]);

  return Fieldset;
}(_react2.default.Component);

Fieldset.propTypes = {
  description: _propTypes2.default.string,
  legend: _propTypes2.default.string.isRequired,
  columns: _propTypes2.default.number,
  collapsable: _propTypes2.default.bool,
  fieldset: _propTypes2.default.shape({
    description: _propTypes2.default.string,
    legend: _propTypes2.default.string
  }),
  children: _propTypes2.default.node,
  level: _propTypes2.default.number,
  className: _propTypes2.default.string,
  transparent: _propTypes2.default.bool,
  styles: _propTypes2.default.object
};
Fieldset.defaultProps = {
  level: 1,
  fieldset: {},
  className: ''
};
exports.default = (0, _Styleable2.default)(Fieldset, _defaultStyle2.default);