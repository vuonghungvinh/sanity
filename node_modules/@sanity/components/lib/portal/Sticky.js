'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _throttle2 = require('lodash/throttle');

var _throttle3 = _interopRequireDefault(_throttle2);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Sticky = require('./styles/Sticky.css');

var _Sticky2 = _interopRequireDefault(_Sticky);

var _reactPortal = require('react-portal');

var _reactPortal2 = _interopRequireDefault(_reactPortal);

var _elementResizeDetector = require('element-resize-detector');

var _elementResizeDetector2 = _interopRequireDefault(_elementResizeDetector);

var _easeComponent = require('ease-component');

var _easeComponent2 = _interopRequireDefault(_easeComponent);

var _scroll = require('scroll');

var _scroll2 = _interopRequireDefault(_scroll);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* global window, document */


var scrollOptions = {
  duration: 200,
  ease: _easeComponent2.default.easeInOutQuart
};

var PADDING = 50;
var PADDING_DUMMY_TRANSITION = 'height 0.2s linear';

var Sticky = function (_React$PureComponent) {
  _inherits(Sticky, _React$PureComponent);

  function Sticky() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Sticky);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Sticky.__proto__ || Object.getPrototypeOf(Sticky)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      portalIsOpen: false,
      availableSpaceTop: 0,
      contentTop: 0,
      contentLeft: 0
    }, _this._elementResizeDetector = (0, _elementResizeDetector2.default)({ strategy: 'scroll' }), _this._containerScrollTop = 0, _this._initialScrollTop = 0, _this._isScrolling = false, _this._rootTop = 0, _this._rootLeft = 0, _this._scrollContainerLeft = 0, _this._scrollContainerWidth = 0, _this.handlePortalOpened = function () {
      _this.moveIntoPosition();
      _this.addMovingListeners();
      _this.handleWindowResize();
      _this.appendPadding();
    }, _this.handleContainerScroll = function () {
      _this._containerScrollTop = _this._scrollContainerElement.scrollTop;
      _this.moveIntoPosition();
    }, _this.scrollBack = function () {
      if (_this._scrollContainerElement && _this._initialScrollTop) {
        _this._isScrolling = true;
        _scroll2.default.top(_this._scrollContainerElement, _this._initialScrollTop, scrollOptions, function () {
          _this._isScrolling = false;
        });
      }
    }, _this.scrollIntoView = function () {
      if (!_this.props.scrollIntoView) {
        return;
      }
      if (!_this._scrollContainerElement) {
        return;
      }

      if (!_this._contentElement) {
        return;
      }

      var neededHeight = _this.props.wantedHeight || _this._contentElement.offsetHeight;

      if (_this.props.addPadding && neededHeight) {
        var extraHeight = Math.min(_this._contentElement.offsetHeight, window.innerHeight);
        _this._paddingDummy.style.height = extraHeight + 'px';
      }

      var scrollTop = _this._scrollContainerElement.scrollTop;

      var scrollContainerHeight = _this._scrollContainerElement.offsetHeight;

      if (_this._rootTop + neededHeight > scrollContainerHeight) {
        _this._extraScrollTop = -window.innerHeight + neededHeight + _this._rootTop;

        _this._initialScrollTop = scrollTop;
        _this._isScrolling = true;
        var newScrollTop = scrollTop + _this._extraScrollTop + PADDING;

        _scroll2.default.top(_this._scrollContainerElement, newScrollTop, scrollOptions, function () {
          _this._isScrolling = false;
          _this.props.onResize({
            isScrolling: _this._isScrolling
          });
        });
      }
    }, _this.addMovingListeners = function () {
      if (_this._elementResizeDetector && _this._contentElement && _this._contentElement.firstChild) {
        _this._elementResizeDetector.listenTo(_this._contentElement.firstChild, _this.handleElementResize);
      }
    }, _this.handleWindowResize = (0, _throttle3.default)(function () {
      _this.moveIntoPosition();
    }, 1000 / 60), _this.handleWindowScroll = (0, _throttle3.default)(function () {
      _this.moveIntoPosition();
    }, 1000 / 60), _this.appendPadding = function () {
      if (_this.props.addPadding && !_this._paddingDummy && _this._contentElement) {
        _this._paddingDummy = document.createElement('div');
        _this._paddingDummy.style.clear = 'both';
        _this._paddingDummy.style.height = 0;
        _this._paddingDummy.style.transition = PADDING_DUMMY_TRANSITION;
        if (_this._scrollContainerElement) {
          _this._scrollContainerElement.appendChild(_this._paddingDummy);
        }
      }
      _this.scrollIntoView();
    }, _this.setScrollContainerElement = function (element) {
      if (!element) {
        return;
      }
      _this._scrollContainerElement = element;

      _this.setState({
        portalIsOpen: true
      });
    }, _this.stickToRoot = function () {
      var _this$props = _this.props,
          stickToTop = _this$props.stickToTop,
          onlyBottomSpace = _this$props.onlyBottomSpace;

      _this.setRootRects();
      var newState = {};
      if (onlyBottomSpace) {
        if (_this._rootTop < 0 && stickToTop) {
          newState.availableSpaceTop = 0;
        } else {
          newState.availableSpaceTop = _this._rootTop;
        }
        newState.contentTop = 0;
        newState.contentLeft = 0;
      } else {
        newState.availableSpaceTop = 0;
        newState.contentTop = _this._rootTop;
        newState.contentLeft = _this._rootLeft;
      }
      newState.availableSpaceLeft = 0;
      _this.setState(newState);
      _this.resizeAvailableSpace();
    }, _this.moveIntoPosition = function () {
      _this.stickToRoot();

      _this.props.onResize({
        rootLeft: _this._rootLeft,
        rootTop: _this._rootTop,
        containerWidth: _this._scrollContainerWidth,
        containerLeft: _this._scrollContainerLeft,
        availableWidth: _this.state.availableWidth || window.innerWidth,
        availableHeight: _this.state.availableHeight || window.innerHeight,
        isScrolling: _this._isScrolling
      });
    }, _this.handleElementResize = function (el) {
      _this.moveIntoPosition();
    }, _this.setAvailableSpaceElement = function (element) {
      _this._availableSpaceElement = element;
    }, _this.setRootElement = function (element) {
      _this._rootElement = element;
    }, _this.setContentElement = function (element) {
      _this._contentElement = element;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  // Root positions


  // ScrollContainer positions


  _createClass(Sticky, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var getScrollContainer = this.context.getScrollContainer;

      var scrollContainer = typeof getScrollContainer === 'function' && getScrollContainer() || document.body;
      this.setScrollContainerElement(scrollContainer);

      if (window) {
        window.addEventListener('resize', this.handleWindowResize);
        window.addEventListener('scroll', this.handleWindowScroll, { passive: true, capture: true });
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var _this2 = this;

      this.scrollBack();

      if (this._paddingDummy) {
        this._paddingDummy.style.height = '0';
      }
      if (window) {
        window.removeEventListener('resize', this.handleWindowResize);
        window.removeEventListener('scroll', this.handleWindowScroll, { passive: true, capture: true });
      }

      if (this._scrollContainerElement) {
        this._scrollContainerElement.removeEventListener('scroll', this.handleContainerScroll, { passive: true });
      }

      if (this._elementResizeDetector && this._contentElement && this._contentElement.firstChild) {
        this._elementResizeDetector.uninstall(this._contentElement.firstChild);
      }

      if (this._paddingDummy) {
        this._paddingDummy.removeEventListener('transitionend', function () {
          _this2._paddingDummy.remove();
        }, false);
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      if (prevProps.onlyBottomSpace !== this.props.onlyBottomSpace) {
        this.moveIntoPosition();
      }
      if (prevProps.wantedHeight !== this.props.wantedHeight) {
        this.scrollIntoView();
      }
      if (prevProps.stickToTop !== this.props.stickToTop) {
        this.moveIntoPosition();
      }
    }
  }, {
    key: 'setRootRects',
    value: function setRootRects() {
      if (!this._rootElement) {
        return;
      }

      var _rootElement$getBound = this._rootElement.getBoundingClientRect(),
          top = _rootElement$getBound.top,
          left = _rootElement$getBound.left;

      this._rootTop = top;
      this._rootLeft = left;
    }
  }, {
    key: 'resizeAvailableSpace',
    value: function resizeAvailableSpace() {
      var _props = this.props,
          stickToTop = _props.stickToTop,
          onlyBottomSpace = _props.onlyBottomSpace;

      var availableWidth = window.innerWidth;

      var availableHeight = window.innerHeight;

      if (onlyBottomSpace) {
        availableHeight = window.innerHeight - this._rootTop;
        if (this._rootTop < 0 && stickToTop) {
          availableHeight = window.innerHeight;
        }
      }

      this.setState({
        availableWidth: availableWidth,
        availableHeight: availableHeight
      });
      this.setRootRects();
    }

    // Set elements

  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          useOverlay = _props2.useOverlay,
          children = _props2.children,
          isOpen = _props2.isOpen;
      var _state = this.state,
          availableSpaceTop = _state.availableSpaceTop,
          availableWidth = _state.availableWidth,
          availableHeight = _state.availableHeight,
          contentTop = _state.contentTop,
          contentLeft = _state.contentLeft,
          portalIsOpen = _state.portalIsOpen;


      return _react2.default.createElement(
        'span',
        { ref: this.setRootElement, className: _Sticky2.default.root },
        _react2.default.createElement(
          _reactPortal2.default,
          {
            isOpened: isOpen && portalIsOpen,
            closeOnEsc: false,
            onOpen: this.handlePortalOpened,
            className: _Sticky2.default.portal
          },
          _react2.default.createElement(
            'div',
            { className: _Sticky2.default.portalInner },
            useOverlay && _react2.default.createElement('div', { className: _Sticky2.default.overlay }),
            _react2.default.createElement(
              'div',
              {
                className: _Sticky2.default.availableSpace,
                ref: this.setAvailableSpaceElement,
                style: {
                  top: availableSpaceTop + 'px',
                  width: availableWidth + 'px',
                  height: availableHeight + 'px'
                }
              },
              _react2.default.createElement(
                'div',
                {
                  className: _Sticky2.default.content,
                  ref: this.setContentElement,
                  style: {
                    top: contentTop + 'px',
                    left: contentLeft + 'px'
                  }
                },
                children
              )
            )
          )
        )
      );
    }
  }]);

  return Sticky;
}(_react2.default.PureComponent);

Sticky.propTypes = {
  children: _propTypes2.default.node.isRequired,
  isOpen: _propTypes2.default.bool,
  onlyBottomSpace: _propTypes2.default.bool,
  stickToTop: _propTypes2.default.bool,
  onResize: _propTypes2.default.func,
  useOverlay: _propTypes2.default.bool,
  scrollIntoView: _propTypes2.default.bool,
  addPadding: _propTypes2.default.bool,
  wantedHeight: _propTypes2.default.number,
  scrollContainer: _propTypes2.default.object // DOM element
};
Sticky.defaultProps = {
  scrollContainer: undefined,
  stickToTop: false,
  onlyBottomSpace: true,
  isOpen: true,
  useOverlay: true,
  scrollIntoView: true,
  addPadding: true,
  onResize: function onResize() {}
};
Sticky.contextTypes = {
  getScrollContainer: _propTypes2.default.func
};
exports.default = Sticky;