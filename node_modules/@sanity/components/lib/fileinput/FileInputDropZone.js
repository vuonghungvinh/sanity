'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDropzone = require('react-dropzone');

var _reactDropzone2 = _interopRequireDefault(_reactDropzone);

var _attrAccept = require('attr-accept');

var _attrAccept2 = _interopRequireDefault(_attrAccept);

var _dropzoneStyle = require('part:@sanity/components/fileinput/dropzone-style');

var _dropzoneStyle2 = _interopRequireDefault(_dropzoneStyle);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Dropzone = function (_React$PureComponent) {
  _inherits(Dropzone, _React$PureComponent);

  function Dropzone() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Dropzone);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Dropzone.__proto__ || Object.getPrototypeOf(Dropzone)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      acceptsSelectedFiles: true,
      tooManyFiles: false
    }, _this.handleDragOver = function (event) {
      var accept = _this.props.accept;


      if (!accept) {
        _this.setState({
          acceptsSelectedFiles: true
        });
        return;
      }

      var items = (0, _get3.default)(event, 'nativeEvent.dataTransfer.items');

      if (items) {
        if (items.length > 1 && !_this.props.multiple) {
          _this.setState({
            tooManyFiles: true
          });
          return;
        }

        _this.setState({
          acceptsSelectedFiles: Array.from(items).every(function (item) {
            return (0, _attrAccept2.default)(item, accept);
          })
        });
      }
    }, _this.resetErrorState = function () {
      _this.setState({
        acceptsSelectedFiles: true,
        tooManyFiles: false
      });
    }, _this.handleDragEnd = function (event) {
      _this.resetErrorState();
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Dropzone, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          className = _props.className,
          multiple = _props.multiple,
          icon = _props.icon,
          ghost = _props.ghost,
          accept = _props.accept,
          rest = _objectWithoutProperties(_props, ['className', 'multiple', 'icon', 'ghost', 'accept']);

      var _state = this.state,
          acceptsSelectedFiles = _state.acceptsSelectedFiles,
          tooManyFiles = _state.tooManyFiles;


      var Icon = icon;

      return _react2.default.createElement(
        _reactDropzone2.default,
        _extends({}, rest, {
          className: '\n          ' + (className ? className : '') + '\n          ' + (ghost ? _dropzoneStyle2.default.ghost : _dropzoneStyle2.default.dropZone) + '\n          ' + (!acceptsSelectedFiles || tooManyFiles ? _dropzoneStyle2.default.hasError : '') + '\n        ',
          activeClassName: '' + (ghost ? _dropzoneStyle2.default.activeGhost : _dropzoneStyle2.default.activeDropZone),
          onDragOver: this.handleDragOver,
          onDragEnd: this.handleDragEnd,
          onDragExit: this.handleDragEnd,
          onDragLeave: this.handleDragEnd,
          onMouseOver: this.handleDragEnd
        }),
        _react2.default.createElement(
          'div',
          { className: _dropzoneStyle2.default.inner },
          !acceptsSelectedFiles && !tooManyFiles && _react2.default.createElement(
            'p',
            { className: _dropzoneStyle2.default.errorText },
            'Accepted file formats: ',
            accept
          ),
          tooManyFiles && _react2.default.createElement(
            'p',
            { className: _dropzoneStyle2.default.errorText },
            'Only one image allowed'
          ),
          _react2.default.createElement(
            'div',
            { className: _dropzoneStyle2.default.passiveText },
            _react2.default.createElement(
              'div',
              { className: _dropzoneStyle2.default.iconContainer },
              Icon && _react2.default.createElement(Icon, null)
            ),
            acceptsSelectedFiles && _react2.default.createElement(
              'div',
              null,
              _react2.default.createElement(
                'p',
                { className: _dropzoneStyle2.default.strong },
                multiple ? _react2.default.createElement(
                  'span',
                  null,
                  'Select files'
                ) : _react2.default.createElement(
                  'span',
                  null,
                  'Select file'
                )
              ),
              _react2.default.createElement(
                'p',
                { className: _dropzoneStyle2.default.light },
                multiple ? _react2.default.createElement(
                  'span',
                  null,
                  '\u2026or drop them here'
                ) : _react2.default.createElement(
                  'span',
                  null,
                  '\u2026or drop it here'
                )
              )
            )
          ),
          _react2.default.createElement(
            'div',
            { className: _dropzoneStyle2.default.activeText },
            _react2.default.createElement(
              'div',
              { className: _dropzoneStyle2.default.iconContainer },
              Icon && _react2.default.createElement(Icon, null)
            ),
            acceptsSelectedFiles && _react2.default.createElement(
              'p',
              { className: _dropzoneStyle2.default.strong },
              multiple ? _react2.default.createElement(
                'span',
                null,
                'Drop files\u2026'
              ) : _react2.default.createElement(
                'span',
                null,
                'Drop file\u2026'
              )
            )
          )
        )
      );
    }
  }]);

  return Dropzone;
}(_react2.default.PureComponent);

Dropzone.propTypes = {
  className: _propTypes2.default.string,
  multiple: _propTypes2.default.bool,
  icon: _propTypes2.default.func,
  ghost: _propTypes2.default.bool,
  accept: _propTypes2.default.string
};
Dropzone.defaultProps = {
  multiple: true
};
exports.default = Dropzone;