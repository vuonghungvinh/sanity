'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _omit3 = require('lodash/omit');

var _omit4 = _interopRequireDefault(_omit3);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactInk = require('react-ink');

var _reactInk2 = _interopRequireDefault(_reactInk);

var _inInputStyle = require('part:@sanity/components/buttons/in-input-style');

var _inInputStyle2 = _interopRequireDefault(_inInputStyle);

var _spinner = require('part:@sanity/components/loading/spinner');

var _spinner2 = _interopRequireDefault(_spinner);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var InInputButton = function (_React$Component) {
  _inherits(InInputButton, _React$Component);

  function InInputButton() {
    var _ref;

    _classCallCheck(this, InInputButton);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = InInputButton.__proto__ || Object.getPrototypeOf(InInputButton)).call.apply(_ref, [this].concat(args)));

    _this.handleClick = _this.handleClick.bind(_this);
    return _this;
  }

  _createClass(InInputButton, [{
    key: 'handleClick',
    value: function handleClick(event) {
      this.props.onClick(event);
    }
  }, {
    key: 'render',
    value: function render() {
      var _omit2 = (0, _omit4.default)(this.props, 'onAction'),
          kind = _omit2.kind,
          ripple = _omit2.ripple,
          inverted = _omit2.inverted,
          colored = _omit2.colored,
          icon = _omit2.icon,
          loading = _omit2.loading,
          className = _omit2.className,
          rest = _objectWithoutProperties(_omit2, ['kind', 'ripple', 'inverted', 'colored', 'icon', 'loading', 'className']);

      var Icon = icon;

      if (!_inInputStyle2.default[kind] && kind) {
        console.error('There is no ' + kind + ' button'); // eslint-disable-line no-console
      }

      var style = '\n      ' + (className || '') + '\n      ' + (inverted && _inInputStyle2.default.inverted || '') + '\n      ' + (_inInputStyle2.default[kind] ? _inInputStyle2.default[kind] : _inInputStyle2.default.root) + '\n      ' + (colored && _inInputStyle2.default.colored ? _inInputStyle2.default.colored : '') + '\n      ' + (Icon && _inInputStyle2.default.hasIcon ? _inInputStyle2.default.hasIcon : '') + '\n    ';

      return _react2.default.createElement(
        'button',
        _extends({}, rest, {
          className: style,
          type: 'button',
          onClick: this.handleClick
        }),
        _react2.default.createElement(
          'span',
          { className: _inInputStyle2.default.content },
          loading && _react2.default.createElement(_spinner2.default, null),
          Icon && _react2.default.createElement(
            'span',
            { className: _inInputStyle2.default.iconContainer },
            _react2.default.createElement(Icon, { className: _inInputStyle2.default.icon })
          ),
          _react2.default.createElement(
            'span',
            { className: _inInputStyle2.default.text },
            this.props.children
          )
        ),
        ripple && _react2.default.createElement(_reactInk2.default, { duration: 200, opacity: 0.10, radius: 200 })
      );
    }
  }]);

  return InInputButton;
}(_react2.default.Component);

InInputButton.propTypes = {
  kind: _propTypes2.default.oneOf(['add', 'danger', 'colored', 'secondary']),
  onClick: _propTypes2.default.func,
  children: _propTypes2.default.node.isRequired,
  inverted: _propTypes2.default.bool,
  icon: _propTypes2.default.func,
  loading: _propTypes2.default.bool,
  ripple: _propTypes2.default.bool,
  colored: _propTypes2.default.bool,
  className: _propTypes2.default.string,
  disabled: _propTypes2.default.bool
};
InInputButton.defaultProps = {
  ripple: true,
  icon: function icon() {
    return null;
  },
  onClick: function onClick() {}
};
exports.default = InInputButton;