'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _barStyle = require('part:@sanity/components/progress/bar-style');

var _barStyle2 = _interopRequireDefault(_barStyle);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ProgressBar = function (_React$Component) {
  _inherits(ProgressBar, _React$Component);

  function ProgressBar() {
    _classCallCheck(this, ProgressBar);

    return _possibleConstructorReturn(this, (ProgressBar.__proto__ || Object.getPrototypeOf(ProgressBar)).apply(this, arguments));
  }

  _createClass(ProgressBar, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          percent = _props.percent,
          completed = _props.completed,
          text = _props.text,
          showPercent = _props.showPercent;

      var rootClasses = '\n      ' + (completed ? _barStyle2.default.completed : _barStyle2.default.uncompleted) + '\n      ' + (percent >= 100 && _barStyle2.default.hundredPercent) + '\n    ';
      var barStyle = {
        width: percent + '%'
      };
      return _react2.default.createElement(
        'div',
        { className: rootClasses },
        _react2.default.createElement(
          'div',
          { className: _barStyle2.default.inner },
          _react2.default.createElement(
            'div',
            { className: _barStyle2.default.barContainer },
            _react2.default.createElement('div', { className: _barStyle2.default.bar, style: barStyle })
          ),
          showPercent && _react2.default.createElement(
            'div',
            { className: _barStyle2.default.percent },
            Math.round(percent, 1),
            '%'
          ),
          text && _react2.default.createElement(
            'div',
            { className: _barStyle2.default.text },
            text
          )
        )
      );
    }
  }]);

  return ProgressBar;
}(_react2.default.Component);

ProgressBar.propTypes = {
  className: _propTypes2.default.string,
  percent: _propTypes2.default.number,
  animation: _propTypes2.default.bool,
  completed: _propTypes2.default.bool,
  text: _propTypes2.default.string,
  showPercent: _propTypes2.default.bool
};
ProgressBar.defaultProps = {
  completion: 0
};
exports.default = ProgressBar;