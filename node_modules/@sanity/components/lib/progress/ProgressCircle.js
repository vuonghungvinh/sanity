'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _circleStyle = require('part:@sanity/components/progress/circle-style');

var _circleStyle2 = _interopRequireDefault(_circleStyle);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var radiusFactor = 1.3;
var widthFactor = 1.2;
var heightFactor = 1.2;

var ProgressCircle = function (_React$Component) {
  _inherits(ProgressCircle, _React$Component);

  function ProgressCircle() {
    _classCallCheck(this, ProgressCircle);

    return _possibleConstructorReturn(this, (ProgressCircle.__proto__ || Object.getPrototypeOf(ProgressCircle)).apply(this, arguments));
  }

  _createClass(ProgressCircle, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          percent = _props.percent,
          completed = _props.completed,
          text = _props.text,
          style = _props.style,
          showPercent = _props.showPercent,
          radius = _props.radius,
          strokeWidth = _props.strokeWidth;

      var rootClasses = '\n      ' + (completed ? _circleStyle2.default.completed : _circleStyle2.default.uncompleted) + '\n      ' + (percent >= 100 && _circleStyle2.default.hundredPercent) + '\n    ';

      var width = radius * 2;
      var height = radius * 2;
      var viewBox = '-10 -10 ' + width * widthFactor + ' ' + height * heightFactor;

      var dashArray = this.props.radius * Math.PI * 2;
      var dashOffset = dashArray - dashArray * percent / 100; //eslint-disable-line no-mixed-operators

      return _react2.default.createElement(
        'div',
        { className: rootClasses, style: style },
        _react2.default.createElement(
          'div',
          { className: _circleStyle2.default.inner },
          _react2.default.createElement(
            'svg',
            {
              className: _circleStyle2.default.svg,
              width: width,
              height: height,
              viewBox: viewBox
            },
            _react2.default.createElement('circle', {
              className: _circleStyle2.default.background,
              cx: radius,
              cy: radius,
              r: radius,
              strokeWidth: strokeWidth + 'px'
            }),
            _react2.default.createElement('circle', {
              className: _circleStyle2.default.foreground,
              cx: radius,
              cy: radius,
              r: radius,
              strokeWidth: strokeWidth + 'px',
              style: {
                strokeDasharray: dashArray,
                strokeDashoffset: dashOffset
              }
            }),
            showPercent && _react2.default.createElement(
              'text',
              {
                className: _circleStyle2.default.percent,
                x: radius,
                y: radius,
                dy: '.4em',
                textAnchor: 'middle'
              },
              Math.round(percent, 1) + '%'
            ),
            text && _react2.default.createElement(
              'text',
              {
                className: _circleStyle2.default.status,
                x: radius,
                y: radius * radiusFactor,
                dy: '.4em',
                textAnchor: 'middle'
              },
              text
            )
          )
        )
      );
    }
  }]);

  return ProgressCircle;
}(_react2.default.Component);

ProgressCircle.propTypes = {
  className: _propTypes2.default.string,
  percent: _propTypes2.default.number,
  animation: _propTypes2.default.bool,
  text: _propTypes2.default.string,
  style: _propTypes2.default.object,
  showPercent: _propTypes2.default.bool,
  radius: _propTypes2.default.number,
  strokeWidth: _propTypes2.default.number,
  status: _propTypes2.default.string,
  completed: _propTypes2.default.bool
};
ProgressCircle.defaultProps = {
  radius: 50,
  percentage: 0,
  strokeWidth: 10
};
exports.default = ProgressCircle;