'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _closeIcon = require('part:@sanity/base/close-icon');

var _closeIcon2 = _interopRequireDefault(_closeIcon);

var _circleCheckIcon = require('part:@sanity/base/circle-check-icon');

var _circleCheckIcon2 = _interopRequireDefault(_circleCheckIcon);

var _ConfirmDialog = require('./styles/ConfirmDialog.css');

var _ConfirmDialog2 = _interopRequireDefault(_ConfirmDialog);

var _default = require('part:@sanity/components/buttons/default');

var _default2 = _interopRequireDefault(_default);

var _reactPortal = require('react-portal');

var _reactPortal2 = _interopRequireDefault(_reactPortal);

var _StackedEscapable = require('../utilities/StackedEscapable');

var _StackedEscapable2 = _interopRequireDefault(_StackedEscapable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DefaultDialog = function (_React$PureComponent) {
  _inherits(DefaultDialog, _React$PureComponent);

  function DefaultDialog() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, DefaultDialog);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = DefaultDialog.__proto__ || Object.getPrototypeOf(DefaultDialog)).call.apply(_ref, [this].concat(args))), _this), _this.handleDialogClick = function (event) {
      event.stopPropagation();
    }, _this.setDialogElement = function (element) {
      _this.dialog = element;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(DefaultDialog, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          color = _props.color,
          className = _props.className,
          confirmColor = _props.confirmColor,
          confirmButtonText = _props.confirmButtonText,
          cancelButtonText = _props.cancelButtonText,
          onConfirm = _props.onConfirm,
          onCancel = _props.onCancel;


      return _react2.default.createElement(
        _StackedEscapable2.default,
        { onEscape: onCancel },
        _react2.default.createElement(
          _reactPortal2.default,
          { isOpened: true },
          _react2.default.createElement(
            'div',
            {
              className: _ConfirmDialog2.default.root + ' ' + _ConfirmDialog2.default[color] + ' ' + className,
              ref: this.setDialogElement,
              onClick: onCancel
            },
            _react2.default.createElement(
              'div',
              { className: _ConfirmDialog2.default.dialog, onClick: this.handleDialogClick },
              _react2.default.createElement(
                'div',
                { className: _ConfirmDialog2.default.inner },
                _react2.default.createElement(
                  'div',
                  { className: _ConfirmDialog2.default.content },
                  this.props.children
                ),
                _react2.default.createElement(
                  'div',
                  { className: _ConfirmDialog2.default.footer },
                  _react2.default.createElement(
                    _default2.default,
                    {
                      onClick: onCancel,
                      icon: _closeIcon2.default,
                      kind: 'secondary'
                    },
                    cancelButtonText
                  ),
                  _react2.default.createElement(
                    _default2.default,
                    {
                      onClick: onConfirm,
                      color: confirmColor,
                      icon: _circleCheckIcon2.default,
                      autoFocus: true
                    },
                    confirmButtonText
                  )
                )
              )
            )
          )
        )
      );
    }
  }]);

  return DefaultDialog;
}(_react2.default.PureComponent);

DefaultDialog.propTypes = {
  color: _propTypes2.default.oneOf(['warning', 'success', 'danger', 'info']),
  confirmColor: _propTypes2.default.oneOf(['success', 'danger']),
  className: _propTypes2.default.string,
  children: _propTypes2.default.node,
  onClose: _propTypes2.default.func,
  onConfirm: _propTypes2.default.func,
  onCancel: _propTypes2.default.func,
  confirmButtonText: _propTypes2.default.string,
  cancelButtonText: _propTypes2.default.string
};
DefaultDialog.defaultProps = {
  isOpen: false,
  showHeader: false,
  onAction: function onAction() {},
  onOpen: function onOpen() {},

  actions: [],
  kind: 'default',
  confirmColor: 'success',
  confirmButtonText: 'OK',
  cancelButtonText: 'Cancel'
};
exports.default = DefaultDialog;