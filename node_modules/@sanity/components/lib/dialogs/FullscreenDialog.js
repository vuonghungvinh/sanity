'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _fullscreenStyle = require('part:@sanity/components/dialogs/fullscreen-style');

var _fullscreenStyle2 = _interopRequireDefault(_fullscreenStyle);

var _closeIcon = require('part:@sanity/base/close-icon');

var _closeIcon2 = _interopRequireDefault(_closeIcon);

var _reactPortal = require('react-portal');

var _reactPortal2 = _interopRequireDefault(_reactPortal);

var _default = require('part:@sanity/components/buttons/default');

var _default2 = _interopRequireDefault(_default);

var _Escapable = require('../utilities/Escapable');

var _Escapable2 = _interopRequireDefault(_Escapable);

var _StackedEscapable = require('../utilities/StackedEscapable');

var _StackedEscapable2 = _interopRequireDefault(_StackedEscapable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FullScreenDialog = function (_React$PureComponent) {
  _inherits(FullScreenDialog, _React$PureComponent);

  function FullScreenDialog() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, FullScreenDialog);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = FullScreenDialog.__proto__ || Object.getPrototypeOf(FullScreenDialog)).call.apply(_ref, [this].concat(args))), _this), _this.handleActionClick = function (event) {
      var actionIndex = event.currentTarget.getAttribute('data-action-index');
      _this.props.onAction(_this.props.actions[actionIndex]);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(FullScreenDialog, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          color = _props.color,
          title = _props.title,
          className = _props.className,
          onClose = _props.onClose,
          centered = _props.centered,
          isOpen = _props.isOpen,
          actions = _props.actions;


      var classNames = [_fullscreenStyle2.default[color] || _fullscreenStyle2.default.default, isOpen ? _fullscreenStyle2.default.isOpen : _fullscreenStyle2.default.isClosed, className, centered && _fullscreenStyle2.default.centered].filter(Boolean).join(' ');

      return _react2.default.createElement(
        _StackedEscapable2.default,
        { onEscape: onClose },
        _react2.default.createElement(
          _reactPortal2.default,
          { isOpened: isOpen },
          _react2.default.createElement(
            'div',
            { className: classNames },
            onClose && _react2.default.createElement(
              'button',
              { className: _fullscreenStyle2.default.closeButton, onClick: onClose },
              _react2.default.createElement(_closeIcon2.default, { color: 'inherit' })
            ),
            _react2.default.createElement(
              'div',
              { className: _fullscreenStyle2.default.inner },
              _react2.default.createElement(
                'h1',
                { className: _fullscreenStyle2.default.heading },
                title
              ),
              _react2.default.createElement(
                'div',
                { className: _fullscreenStyle2.default.content },
                this.props.children,
                _react2.default.createElement(
                  'div',
                  { className: _fullscreenStyle2.default.actions },
                  actions.length > 0 && _react2.default.createElement(
                    'div',
                    { className: _fullscreenStyle2.default.functions },
                    actions.map(function (action, i) {
                      return _react2.default.createElement(
                        _default2.default,
                        {
                          key: i,
                          onClick: _this2.handleActionClick,
                          'data-action-index': i,
                          color: color === 'default' ? action.color : 'white',
                          disabled: action.disabled,
                          inverted: !action.secondary,
                          kind: action.kind,
                          autoFocus: action.autoFocus,
                          className: '\n                                  ' + _fullscreenStyle2.default.button + '\n                                  ' + (_fullscreenStyle2.default['button_' + action.kind] || _fullscreenStyle2.default.button) + '\n                                '
                        },
                        action.title
                      );
                    })
                  )
                )
              )
            )
          )
        )
      );
    }
  }]);

  return FullScreenDialog;
}(_react2.default.PureComponent);

FullScreenDialog.propTypes = {
  color: _propTypes2.default.oneOf(['default', 'warning', 'info', 'success', 'danger']),
  className: _propTypes2.default.string,
  title: _propTypes2.default.string,
  children: _propTypes2.default.node,
  onClose: _propTypes2.default.func,
  isOpen: _propTypes2.default.bool,
  centered: _propTypes2.default.bool,
  onAction: _propTypes2.default.func,
  actions: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    title: _propTypes2.default.string.isRequired,
    tooltip: _propTypes2.default.string,
    kind: _propTypes2.default.string,
    autoFocus: _propTypes2.default.bool
  }))
};
FullScreenDialog.defaultProps = {
  color: 'default',
  isOpen: false,
  showHeader: false,
  onAction: function onAction() {},
  onOpen: function onOpen() {},
  onClose: function onClose() {},

  actions: []
};
exports.default = FullScreenDialog;