'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _spinnerStyle = require('part:@sanity/components/loading/spinner-style');

var _spinnerStyle2 = _interopRequireDefault(_spinnerStyle);

var _spinnerIcon = require('part:@sanity/base/spinner-icon');

var _spinnerIcon2 = _interopRequireDefault(_spinnerIcon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Spinner = function (_React$Component) {
  _inherits(Spinner, _React$Component);

  function Spinner() {
    _classCallCheck(this, Spinner);

    return _possibleConstructorReturn(this, (Spinner.__proto__ || Object.getPrototypeOf(Spinner)).apply(this, arguments));
  }

  _createClass(Spinner, [{
    key: 'renderSvg',
    value: function renderSvg() {
      return _react2.default.createElement(
        'svg',
        { width: '126px', height: '126px', xmlns: 'http://www.w3.org/2000/svg', viewBox: '0 0 100 100', preserveAspectRatio: 'xMidYMid' },
        _react2.default.createElement('rect', { x: '0', y: '0', width: '100', height: '100', fill: 'none' }),
        _react2.default.createElement(
          'circle',
          {
            cx: '50',
            cy: '50',
            r: '49.5',
            strokeDasharray: '202.1614872585032 108.85618544688634',
            stroke: 'currentColor',
            fill: 'none',
            strokeWidth: '1'
          },
          _react2.default.createElement('animateTransform', {
            attributeName: 'transform',
            type: 'rotate',
            values: '0 50 50;180 50 50;360 50 50;',
            keyTimes: '0;0.5;1',
            dur: '1s',
            repeatCount: 'indefinite',
            begin: '0s'
          })
        )
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          inline = _props.inline,
          message = _props.message,
          fullscreen = _props.fullscreen,
          center = _props.center;

      return _react2.default.createElement(
        'div',
        {
          className: '\n          ' + (inline ? _spinnerStyle2.default.inline : _spinnerStyle2.default.block) + '\n          ' + (fullscreen ? _spinnerStyle2.default.fullscreen : '') + '\n          ' + (center ? _spinnerStyle2.default.center : '') + '\n        '
        },
        _react2.default.createElement(
          'div',
          { className: _spinnerStyle2.default.inner },
          fullscreen || center ? this.renderSvg() : _react2.default.createElement(_spinnerIcon2.default, { color: 'inherit' }),
          message && _react2.default.createElement(
            'div',
            { className: _spinnerStyle2.default.message },
            message
          )
        )
      );
    }
  }]);

  return Spinner;
}(_react2.default.Component);

Spinner.propTypes = {
  inline: _propTypes2.default.bool,
  message: _propTypes2.default.string,
  fullscreen: _propTypes2.default.bool,
  center: _propTypes2.default.bool
};
exports.default = Spinner;