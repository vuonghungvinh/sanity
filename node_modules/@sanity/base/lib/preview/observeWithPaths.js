'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.default = observePaths;

var _client = require('part:@sanity/base/client');

var _client2 = _interopRequireDefault(_client);

var _observable = require('@sanity/observable');

var _observable2 = _interopRequireDefault(_observable);

var _debounceCollect = require('./utils/debounceCollect');

var _debounceCollect2 = _interopRequireDefault(_debounceCollect);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _globalListener = void 0;
var getGlobalListener = function getGlobalListener() {
  if (!_globalListener) {
    _globalListener = _observable2.default.from(_client2.default.listen('*[!(_id in path("_.**"))]', {}, { includeResult: false })).share();
  }
  return _globalListener;
};

function listen(id) {
  return _observable2.default.of({ type: 'welcome', documentId: id }).concat(getGlobalListener()).filter(function (event) {
    return event.documentId === id;
  });
}

function fetchAllDocumentSnapshots(selections) {
  var optimizedParams = {};
  var queryParts = selections.map(function (_ref, queryIndex) {
    var _ref2 = _slicedToArray(_ref, 2),
        id = _ref2[0],
        paths = _ref2[1];

    optimizedParams[['id_' + queryIndex]] = id;
    return '*[_id==$id_' + queryIndex + ']{_id,_type,' + paths.join(',') + '}';
  });

  var optimizedQuery = '[' + queryParts.join(',\n') + ']';

  return _client2.default.observable.fetch(optimizedQuery, optimizedParams).map(function (result) {
    return result.map(function (res) {
      return res[0];
    });
  });
}

var debouncedFetchDocumentSnapshot = (0, _debounceCollect2.default)(fetchAllDocumentSnapshots, 50);

// todo: keep for debugging purposes for now
// function fetchDocumentSnapshot(id, selection) {
//   return client.observable.fetch(`*[_id==$id]{_id,_type,${selection.join(',')}}`, {id})
//     .map(result => result[0])
// }

function observePaths(id, paths) {
  return debouncedFetchDocumentSnapshot(id, paths).concat(listen(id).debounceTime(1000).switchMap(function (event) {
    return debouncedFetchDocumentSnapshot(id, paths);
  }));
}