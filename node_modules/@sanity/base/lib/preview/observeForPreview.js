'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = observeForPreview;

var _createPreviewObserver = require('./createPreviewObserver');

var _createPreviewObserver2 = _interopRequireDefault(_createPreviewObserver);

var _observeWithPaths = require('./observeWithPaths');

var _observeWithPaths2 = _interopRequireDefault(_observeWithPaths);

var _resolveRefType = require('./resolveRefType');

var _resolveRefType2 = _interopRequireDefault(_resolveRefType);

var _prepareForPreview = require('./prepareForPreview');

var _prepareForPreview2 = _interopRequireDefault(_prepareForPreview);

var _observable = require('@sanity/observable');

var _observable2 = _interopRequireDefault(_observable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var observe = (0, _createPreviewObserver2.default)(_observeWithPaths2.default);

function is(typeName, type) {
  return type.name === typeName || type.type && is(typeName, type.type);
}

// Takes a value and its type and prepares a snapshot for it that can be passed to a preview component
function observeForPreview(value, type, fields, viewOptions) {
  if (is('reference', type)) {
    // if the value is of type reference, but has no _ref property, we cannot prepare any value for the preview
    // and the most sane thing to do is to return `null` for snapshot
    if (!value._ref) {
      return _observable2.default.of({ snapshot: null });
    }
    // Previewing references actually means getting the referenced value,
    // and preview using the preview config of its type
    // todo: We need a way of knowing the type of the referenced value by looking at the reference record alone
    return (0, _resolveRefType2.default)(value, type).switchMap(function (refType) {
      return refType ? observeForPreview(value, refType) : _observable2.default.of({ snapshot: null });
    });
  }

  var selection = type.preview.select;
  if (selection) {
    var configFields = Object.keys(selection);
    var targetFields = fields ? configFields.filter(function (fieldName) {
      return fields.includes(fieldName);
    }) : configFields;
    var paths = targetFields.map(function (key) {
      return selection[key].split('.');
    });
    return observe(value, paths).map(function (snapshot) {
      return {
        type: type,
        snapshot: (0, _prepareForPreview2.default)(snapshot, type, viewOptions)
      };
    });
  }
  return _observable2.default.of({
    type: type,
    snapshot: (0, _prepareForPreview.invokePrepare)(type, value, viewOptions)
  });
}