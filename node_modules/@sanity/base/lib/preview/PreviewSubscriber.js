'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _observable = require('@sanity/observable');

var _observable2 = _interopRequireDefault(_observable);

var _observeForPreview = require('./observeForPreview');

var _observeForPreview2 = _interopRequireDefault(_observeForPreview);

var _shallowEquals = require('shallow-equals');

var _shallowEquals2 = _interopRequireDefault(_shallowEquals);

var _intersectionObservableFor = require('./streams/intersectionObservableFor');

var _intersectionObservableFor2 = _interopRequireDefault(_intersectionObservableFor);

var _visibilityChange = require('./streams/visibilityChange');

var _visibilityChange2 = _interopRequireDefault(_visibilityChange);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PreviewSubscriber = function (_React$PureComponent) {
  _inherits(PreviewSubscriber, _React$PureComponent);

  function PreviewSubscriber() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, PreviewSubscriber);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = PreviewSubscriber.__proto__ || Object.getPrototypeOf(PreviewSubscriber)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      error: null,
      result: { snapshot: null, type: null },
      isLive: false
    }, _this.setElement = function (element) {
      _this._element = element;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(PreviewSubscriber, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.subscribe(this.props.value, this.props.type, this.props.fields);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.unsubscribe();
    }
  }, {
    key: 'unsubscribe',
    value: function unsubscribe() {
      if (this.subscription) {
        this.subscription.unsubscribe();
        this.subscription = null;
      }
    }
  }, {
    key: 'componentWillUpdate',
    value: function componentWillUpdate(nextProps) {
      if (!(0, _shallowEquals2.default)(nextProps.value, this.props.value)) {
        this.subscribe(nextProps.value, nextProps.type);
      }
    }
  }, {
    key: 'subscribe',
    value: function subscribe(value, type, fields) {
      var _this2 = this;

      this.unsubscribe();

      var viewOptions = this.props.ordering ? { ordering: this.props.ordering } : {};

      var visibilityOn$ = _observable2.default.of(!document.hidden).merge(_visibilityChange2.default.map(function (event) {
        return !event.target.hidden;
      }));

      var inViewport$ = (0, _intersectionObservableFor2.default)(this._element).map(function (event) {
        return event.isIntersecting;
      });

      this.subscription = visibilityOn$.distinctUntilChanged().switchMap(function (isVisible) {
        return isVisible ? inViewport$ : _observable2.default.of(false);
      }).distinctUntilChanged().switchMap(function (isInViewport) {
        return isInViewport ? (0, _observeForPreview2.default)(value, type, fields, viewOptions) : _observable2.default.of(null);
      }).subscribe(function (result) {
        if (result) {
          _this2.setState({ result: result, isLive: true });
        } else {
          _this2.setState({ isLive: false });
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _state = this.state,
          result = _state.result,
          isLive = _state.isLive,
          error = _state.error;

      var _props = this.props,
          Child = _props.children,
          props = _objectWithoutProperties(_props, ['children']);

      return _react2.default.createElement(
        'span',
        { ref: this.setElement },
        _react2.default.createElement(Child, _extends({ snapshot: result.snapshot, type: result.type, isLive: isLive, error: error }, props))
      );
    }
  }]);

  return PreviewSubscriber;
}(_react2.default.PureComponent);

PreviewSubscriber.propTypes = {
  type: _propTypes2.default.object.isRequired,
  fields: _propTypes2.default.arrayOf(_propTypes2.default.oneOf(['title', 'description', 'imageUrl'])),
  value: _propTypes2.default.any.isRequired,
  ordering: _propTypes2.default.object,
  children: _propTypes2.default.func
};
exports.default = PreviewSubscriber;