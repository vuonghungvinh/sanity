'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = fromEvent;

var _observable = require('@sanity/observable');

var _observable2 = _interopRequireDefault(_observable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _supportsPassive = function supportsPassive() {
  _supportsPassive = function supportsPassive() {
    return false;
  };
  try {
    var options = Object.defineProperty({}, 'passive', {
      get: function get() {
        _supportsPassive = function supportsPassive() {
          return true;
        };
      }
    });
    window.addEventListener('test', null, options);
    window.removeEventListener('test', null, options);
  } catch (e) {} // eslint-disable-line no-empty
  return _supportsPassive();
};

function fromEvent(target, eventType, options) {
  if (typeof options === 'boolean') {
    throw new TypeError('The third argument to fromEvent(..) should be an EventListenerOptions object, not a boolean');
  }
  var compatOptions = options;
  if (options && !_supportsPassive()) {
    // eslint-disable-next-line no-console
    console.warn('This browser does not support EventListenerOptions, only `options.capture` will be used when calling addEventListener');
    compatOptions = options.capture;
  }
  return new _observable2.default(function (observer) {
    var listener = function listener(event) {
      return observer.next(event);
    };
    target.addEventListener(eventType, listener, compatOptions);
    // console.log('add', eventType, options)
    return function () {
      // console.log('remove', eventType, options)
      target.removeEventListener(eventType, listener, compatOptions);
    };
  });
}