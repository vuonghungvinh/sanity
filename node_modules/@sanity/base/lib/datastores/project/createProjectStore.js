'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createProjectsStore;

var _observable = require('@sanity/observable');

var _observable2 = _interopRequireDefault(_observable);

var _createActions = require('../utils/createActions');

var _createActions2 = _interopRequireDefault(_createActions);

var _projectFetcher = require('part:@sanity/base/project-fetcher');

var _projectFetcher2 = _interopRequireDefault(_projectFetcher);

var _configSanity = require('config:sanity');

var _configSanity2 = _interopRequireDefault(_configSanity);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function AccessDeniedError(message) {
  this.name = 'AccessDeniedError';
  this.message = message || '';
}
AccessDeniedError.prototype = Object.create(Error.prototype);

function NotFoundError(message) {
  this.name = 'NotFoundError';
  this.message = message || '';
}
NotFoundError.prototype = Object.create(Error.prototype);

function UnknownApiError(error) {
  this.name = 'UnknownApiError';
  this.message = error.message;
  this.code = error.code;
  this.details = error.details;
}
UnknownApiError.prototype = Object.create(Error.prototype);

function handleApiError(errObj, observer) {
  if (errObj.code === 'ACCESS_DENIED') {
    return observer.error(new AccessDeniedError('You are not allowed to perform this action.'));
  }
  if (errObj.code === 'NOT_FOUND_ERROR') {
    return observer.error(new NotFoundError('An project with label \'' + _configSanity2.default.api.dataset + '\' not found. Check your project\'s sanity.json file.'));
  }
  return observer.error(new UnknownApiError(errObj));
}

function currentProject() {

  return new _observable2.default(function (observer) {

    emitProject('snapshot');

    function emitProject(eventName) {
      _projectFetcher2.default.getProject(_configSanity2.default.api.dataset).then(function (project) {
        observer.next({
          event: eventName,
          project: project
        });
      }).catch(function (error) {
        handleApiError(error, observer);
      });
    }
  });
}

function createProjectsStore() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  return {
    actions: (0, _createActions2.default)({}),
    currentProject: currentProject(),
    errors: {
      AccessDeniedError: AccessDeniedError,
      NotFoundError: NotFoundError,
      UnknownApiError: UnknownApiError
    }
  };
}