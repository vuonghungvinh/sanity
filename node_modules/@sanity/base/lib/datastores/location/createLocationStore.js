'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createLocationStore;

var _observable = require('@sanity/observable');

var _observable2 = _interopRequireDefault(_observable);

var _Location = require('../utils/Location');

var _Location2 = _interopRequireDefault(_Location);

var _createBrowserHistory = require('history/createBrowserHistory');

var _createBrowserHistory2 = _interopRequireDefault(_createBrowserHistory);

var _createActions = require('../utils/createActions');

var _createActions2 = _interopRequireDefault(_createActions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var noop = function noop() {}; // eslint-disable-line no-empty-function
var history = (0, _createBrowserHistory2.default)();

function readLocation() {
  return _Location2.default.parse(document.location.href);
}

var interceptors = [];

function navigate(nextUrl, options) {
  if (interceptors.length > 0) {
    var cancelled = false;
    var nextNavigation = {
      nextUrl: nextUrl,
      cancel: function cancel() {
        cancelled = true;
      }
    };

    interceptors.some(function (interceptor) {
      interceptor(nextNavigation);
      return !cancelled;
    });

    if (cancelled) {
      return { progress: new _observable2.default(noop) };
    }
  }

  if (options.replace) {
    history.replace(nextUrl);
  } else {
    history.push(nextUrl);
  }
  return { progress: new _observable2.default(noop) };
}

var locationChange$ = new _observable2.default(function (observer) {
  return history.listen(function () {
    return observer.next(readLocation());
  });
}).map(function (location) {
  return {
    type: 'change',
    location: location
  };
}).share();

function createLocationStore() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var eventStream = new _observable2.default(function (observer) {
    var subscription = locationChange$.subscribe(observer);
    observer.next({
      type: 'snapshot',
      location: readLocation()
    });
    return subscription;
  });

  return {
    state: eventStream,
    intercept: function intercept(interceptor) {
      interceptors.push(interceptor);
      return function () {
        interceptors.splice(interceptors.indexOf(interceptor), 1);
      };
    },

    actions: (0, _createActions2.default)({
      navigate: navigate
    })
  };
}