'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Location implementation which keeps overlapping props in sync, e.g. host / hostname, and search / query


exports.configure = configure;

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function configure() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { qsImpl: require('querystring') },
      qsImpl = _ref.qsImpl;

  var Location = function () {
    function Location() {
      _classCallCheck(this, Location);
    }

    _createClass(Location, [{
      key: 'clone',
      value: function clone() {
        Object.assign(new Location(), this);
      }
    }, {
      key: 'extend',
      value: function extend(properties) {
        return Object.assign(new Location(), this, properties);
      }
    }, {
      key: 'search',
      get: function get() {
        var stringified = qsImpl.stringify(this.query || {});
        return stringified.length > 1 ? '?' + stringified : null;
      },
      set: function set(newSearch) {
        this.query = qsImpl.parse(newSearch.replace(/^\?/, ''));
      }
    }, {
      key: 'host',
      get: function get() {
        return this.port ? this.hostname + ':' + this.port : this.hostname;
      },
      set: function set(newVal) {
        var _newVal$split = newVal.split(':'),
            _newVal$split2 = _slicedToArray(_newVal$split, 2),
            hostname = _newVal$split2[0],
            port = _newVal$split2[1];

        Object.assign(this, {
          hostname: hostname,
          port: port
        });
      }
    }, {
      key: 'path',
      get: function get() {
        return this.pathname + (this.search || '');
      },
      set: function set(newPath) {
        var parsed = _url2.default.parse(newPath, false, false);
        Object.assign(this, {
          pathname: parsed.pathname,
          query: qsImpl.parse(parsed.search.substring(1))
        });
      }
    }, {
      key: 'href',
      get: function get() {
        return _url2.default.format(this);
      },
      set: function set(newHref) {
        var parsed = _url2.default.parse(newHref, false, false);
        Object.assign(this, {
          protocol: parsed.protocol,
          slashes: parsed.slashes,
          hostname: parsed.hostname,
          pathname: parsed.pathname,
          port: parsed.port,
          auth: parsed.auth,
          query: qsImpl.parse((parsed.search || '').substring(1)),
          hash: parsed.hash
        });
      }
    }]);

    return Location;
  }();

  return {
    parse: function parse(urlToParse) {
      return Object.assign(new Location(), {
        href: urlToParse
      });
    },
    stringify: function stringify(u) {
      return _url2.default.format({
        protocol: u.protocol,
        slashes: u.slashes,
        hostname: u.hostname,
        pathname: u.pathname,
        port: u.port,
        search: u.search,
        hash: u.hash
      });
    }
  };
}

exports.default = configure();