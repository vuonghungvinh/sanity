'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _observable = require('@sanity/observable');

var _observable2 = _interopRequireDefault(_observable);

var _documentStore = require('@sanity/document-store');

var _documentStore2 = _interopRequireDefault(_documentStore);

var _client = require('part:@sanity/base/client');

var _client2 = _interopRequireDefault(_client);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function fetchDocumentSnapshot(id) {
  return _client2.default.observable.getDocument(id).map(function (document) {
    return {
      type: 'snapshot',
      document: document
    };
  });
}

function fetchQuerySnapshot(query, params) {
  return _client2.default.observable.fetch(query, params).map(function (documents) {
    return {
      type: 'snapshot',
      documents: documents
    };
  });
}

var serverConnection = {
  byId: function byId(id) {
    return _observable2.default.from(_client2.default.listen('*[_id == $id]', { id: id }, { events: ['welcome', 'mutation'] })).concatMap(function (event) {
      return event.type === 'welcome' ? _observable2.default.from(fetchDocumentSnapshot(id)) : _observable2.default.of(event);
    });
  },
  query: function query(_query, params) {
    return _observable2.default.from(_client2.default.observable.listen(_query, params || {}, { events: ['welcome', 'mutation'] })).concatMap(function (event) {
      return event.type === 'welcome' ? _observable2.default.from(fetchQuerySnapshot(_query, params)) : _observable2.default.of(event);
    });
  },
  mutate: function mutate(mutations) {
    return _observable2.default.from(_client2.default.observable.dataRequest('mutate', mutations, { visibility: 'async', returnDocuments: false }));
  },
  delete: function _delete(id) {
    return _observable2.default.from(_client2.default.observable.delete(id, { visibility: 'async', returnDocuments: false }));
  },
  create: function create(doc) {
    return _observable2.default.from(_client2.default.observable.create(doc));
  },
  createIfNotExists: function createIfNotExists(doc) {
    return _observable2.default.from(_client2.default.observable.createIfNotExists(doc));
  },
  createOrReplace: function createOrReplace(doc) {
    return _observable2.default.from(_client2.default.observable.createOrReplace(doc));
  }
};

exports.default = (0, _documentStore2.default)({ serverConnection: serverConnection });