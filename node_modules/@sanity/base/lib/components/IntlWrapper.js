'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatMessage = exports.formatHTMLMessage = exports.formatRelative = exports.formatPlural = exports.formatNumber = exports.formatTime = exports.formatDate = exports.IntlWrapper = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _intl2 = require('part:@sanity/base/locale/intl');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var intl = null;

var IntlWrapper = exports.IntlWrapper = function (_React$Component) {
  _inherits(IntlWrapper, _React$Component);

  function IntlWrapper() {
    _classCallCheck(this, IntlWrapper);

    return _possibleConstructorReturn(this, (IntlWrapper.__proto__ || Object.getPrototypeOf(IntlWrapper)).apply(this, arguments));
  }

  _createClass(IntlWrapper, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      intl = this.context.intl;
    }
  }, {
    key: 'componentWillUpdate',
    value: function componentWillUpdate() {
      intl = this.context.intl;
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        null,
        this.props.children
      );
    }
  }]);

  return IntlWrapper;
}(_react2.default.Component);

IntlWrapper.contextTypes = {
  intl: _intl2.intlShape
};
IntlWrapper.propTypes = {
  children: _propTypes2.default.node.isRequired
};


var proxies = ['formatDate', 'formatTime', 'formatRelative', 'formatNumber', 'formatPlural', 'formatMessage', 'formatHTMLMessage'].reduce(function (target, fnName) {
  target[fnName] = function () {
    var _intl;

    if (!intl) {
      throw new Error('IntlWrapper must be mounted before using format* functions');
    }

    return (_intl = intl)[fnName].apply(_intl, arguments);
  };
  return target;
}, {});

var formatDate = exports.formatDate = proxies.formatDate;
var formatTime = exports.formatTime = proxies.formatTime;
var formatNumber = exports.formatNumber = proxies.formatNumber;
var formatPlural = exports.formatPlural = proxies.formatPlural;
var formatRelative = exports.formatRelative = proxies.formatRelative;
var formatHTMLMessage = exports.formatHTMLMessage = function formatHTMLMessage(desc, values) {
  return typeof desc === 'string' ? proxies.formatHTMLMessage({ id: desc }, values) : proxies.formatHTMLMessage(desc, values);
};

var formatMessage = exports.formatMessage = function formatMessage(desc, values) {
  return typeof desc === 'string' ? proxies.formatMessage({ id: desc }, values) : proxies.formatMessage(desc, values);
};