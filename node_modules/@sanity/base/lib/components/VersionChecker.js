'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _FullscreenError = require('./FullscreenError');

var _FullscreenError2 = _interopRequireDefault(_FullscreenError);

var _fullscreen = require('part:@sanity/components/dialogs/fullscreen?');

var _fullscreen2 = _interopRequireDefault(_fullscreen);

var _client = require('part:@sanity/base/client');

var _client2 = _interopRequireDefault(_client);

var _sanityVersions = require('sanity:versions');

var _sanityVersions2 = _interopRequireDefault(_sanityVersions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var onIdle = typeof window.requestIdleCallback === 'function' ? window.requestIdleCallback : function (cb) {
  return setTimeout(cb, 0);
};

// eslint-disable-next-line id-length
var buildQueryString = function buildQueryString() {
  return { m: Object.keys(_sanityVersions2.default).map(function (pkg) {
      return pkg + '@' + _sanityVersions2.default[pkg];
    }) };
};
var hashQuery = function hashQuery(items) {
  return items.join(',').replace(/@?sanity[/-]/g, '');
};
var storage = typeof sessionStorage === 'undefined' ? {} : sessionStorage;

var onVersionCheckError = function onVersionCheckError(err) {
  // eslint-disable-next-line no-console
  console.warn('Module versions check failed. Dependencies *might* be out of date.', err);
};

var breakify = function breakify(lines) {
  var nodes = [];
  for (var i = 0; i < lines.length; i++) {
    nodes.push(lines[i]);
    if (i !== lines.length - 1) {
      nodes.push(_react2.default.createElement('br', { key: i }));
    }
  }
  return nodes;
};

var paragraphify = function paragraphify(text) {
  return text.split('\n\n').map(function (para, i) {
    var lines = para.split('\n');
    // eslint-disable-next-line react/no-array-index-key
    return _react2.default.createElement(
      'p',
      { key: i },
      breakify(lines)
    );
  });
};

var checkVersions = function checkVersions() {
  var query = buildQueryString();
  var hash = hashQuery(query.m);
  var local = storage.versionCheck && storage.versionCheck.indexOf(hash) === 0 && storage.versionCheck.slice(hash.length + 1);

  if (local) {
    return Promise.resolve({ result: JSON.parse(local) });
  }

  return _client2.default.request({
    uri: '/versions',
    query: buildQueryString(),
    json: true
  }).then(function (result) {
    return { hash: hash, result: result };
  });
};

var VersionChecker = function (_PureComponent) {
  _inherits(VersionChecker, _PureComponent);

  function VersionChecker() {
    var _ref;

    _classCallCheck(this, VersionChecker);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = VersionChecker.__proto__ || Object.getPrototypeOf(VersionChecker)).call.apply(_ref, [this].concat(args)));

    _this.state = {};
    _this.onResponse = _this.onResponse.bind(_this);
    _this.handleClose = _this.handleClose.bind(_this);
    return _this;
  }

  _createClass(VersionChecker, [{
    key: 'onResponse',
    value: function onResponse(res) {
      if (res.hash && storage) {
        storage.versionCheck = [res.hash, JSON.stringify(res.result)].join('|');
      }

      if (!res.result.isSupported) {
        this.setState({ result: res.result });
      }

      if (__DEV__ && res.result.outdated) {
        var modules = res.result.outdated.map(function (mod) {
          return mod.name;
        }).join('\n  - ');
        var instructions = 'Run `sanity upgrade` to update them';
        // eslint-disable-next-line no-console
        console.warn('The following modules are outdated:\n  - ' + modules + '\n\n' + instructions);
      }
    }
  }, {
    key: 'handleClose',
    value: function handleClose() {
      this.setState({ result: null });
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      onIdle(function () {
        return checkVersions().then(_this2.onResponse).catch(onVersionCheckError);
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var result = this.state.result;
      if (!result || result.isSupported || result.isSupported === undefined) {
        return null;
      }

      var Dialog = _fullscreen2.default || _FullscreenError2.default;
      var title = 'Unsupported module versions';

      return _react2.default.createElement(
        Dialog,
        { centered: true, isOpen: true, color: 'danger', title: title, onClose: this.handleClose },
        paragraphify(result.message || ''),
        result.helpUrl && _react2.default.createElement(
          'p',
          null,
          'For more information, please read ',
          _react2.default.createElement(
            'a',
            { href: result.helpUrl },
            result.helpUrl
          )
        )
      );
    }
  }]);

  return VersionChecker;
}(_react.PureComponent);

exports.default = VersionChecker;