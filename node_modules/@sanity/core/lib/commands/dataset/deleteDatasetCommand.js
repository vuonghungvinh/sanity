'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = {
  name: 'delete',
  group: 'dataset',
  signature: '[datasetName]',
  description: 'Delete a dataset within your project',
  action: (() => {
    var _ref = _asyncToGenerator(function* (args, context) {
      const apiClient = context.apiClient,
            prompt = context.prompt,
            output = context.output;

      var _args$argsWithoutOpti = _slicedToArray(args.argsWithoutOptions, 1);

      const ds = _args$argsWithoutOpti[0];

      if (!ds) {
        throw new Error('Dataset name must be provided');
      }

      const dataset = `${ds}`;

      yield prompt.single({
        type: 'input',
        message: 'Are you ABSOLUTELY sure you want to delete this dataset?\n  Type the name of the dataset to confirm delete:',
        validate: function validate(input) {
          return input === dataset || 'Incorrect dataset name. Ctrl + C to cancel delete.';
        }
      });

      return apiClient().datasets.delete(dataset).then(function () {
        output.print('Dataset deleted successfully');
      });
    });

    return function action(_x, _x2) {
      return _ref.apply(this, arguments);
    };
  })()
};