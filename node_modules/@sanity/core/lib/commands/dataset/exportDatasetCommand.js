'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

let getOutputPath = (() => {
  var _ref2 = _asyncToGenerator(function* (destination, dataset) {
    if (destination === '-') {
      return null;
    }

    const dstPath = _path2.default.isAbsolute(destination) ? destination : _path2.default.resolve(process.cwd(), destination);

    let dstStats = null;
    try {
      dstStats = yield _fsExtra2.default.stat(dstPath);
    } catch (err) {
      // Do nothing
    }

    const looksLikeFile = dstStats ? dstStats.isFile() : _path2.default.basename(dstPath).indexOf('.') !== -1;

    if (!dstStats) {
      const createPath = looksLikeFile ? _path2.default.dirname(dstPath) : dstPath;

      yield _fsExtra2.default.mkdirs(createPath);
    }

    return looksLikeFile ? dstPath : _path2.default.join(dstPath, `${dataset}.ndjson`);
  });

  return function getOutputPath(_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
})();

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _split = require('split2');

var _split2 = _interopRequireDefault(_split);

var _prettyMs = require('pretty-ms');

var _prettyMs2 = _interopRequireDefault(_prettyMs);

var _util = require('@sanity/util');

var _streamDataset = require('../../actions/dataset/streamDataset');

var _streamDataset2 = _interopRequireDefault(_streamDataset);

var _skipSystemDocuments = require('../../util/skipSystemDocuments');

var _skipSystemDocuments2 = _interopRequireDefault(_skipSystemDocuments);

var _chooseDatasetPrompt = require('../../actions/dataset/chooseDatasetPrompt');

var _chooseDatasetPrompt2 = _interopRequireDefault(_chooseDatasetPrompt);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = {
  name: 'export',
  group: 'dataset',
  signature: '[NAME] [DESTINATION]',
  description: 'Export dataset to local filesystem',
  action: (() => {
    var _ref = _asyncToGenerator(function* (args, context) {
      const apiClient = context.apiClient,
            output = context.output,
            chalk = context.chalk,
            workDir = context.workDir,
            prompt = context.prompt;

      const client = apiClient();

      var _args$argsWithoutOpti = _slicedToArray(args.argsWithoutOptions, 2);

      const targetDataset = _args$argsWithoutOpti[0],
            targetDestination = _args$argsWithoutOpti[1];
      const absolutify = _util.pathTools.absolutify;


      let dataset = targetDataset ? `${targetDataset}` : null;
      if (!dataset) {
        dataset = yield (0, _chooseDatasetPrompt2.default)(context, { message: 'Select dataset to export' });
      }

      // Verify existence of dataset before trying to export from it
      const datasets = yield client.datasets.list();
      if (!datasets.find(function (set) {
        return set.name === dataset;
      })) {
        throw new Error(`Dataset with name "${dataset}" not found`);
      }

      let destinationPath = targetDestination;
      if (!destinationPath) {
        destinationPath = yield prompt.single({
          type: 'input',
          message: 'Output path:',
          default: _path2.default.join(workDir, `${dataset}.ndjson`),
          filter: absolutify
        });
      }

      const outputPath = yield getOutputPath(destinationPath, dataset);

      // If we are dumping to a file, let the user know where it's at
      if (outputPath) {
        output.print(`Exporting dataset "${chalk.cyan(dataset)}" to "${chalk.cyan(outputPath)}"`);
      }

      const startTime = Date.now();

      const stream = yield (0, _streamDataset2.default)(client, dataset);
      stream.pipe((0, _split2.default)()).pipe(_skipSystemDocuments2.default).pipe(outputPath ? _fsExtra2.default.createWriteStream(outputPath) : process.stdout).on('error', function (err) {
        return output.error(err);
      }).on('close', function () {
        if (outputPath) {
          const time = (0, _prettyMs2.default)(Date.now() - startTime, { verbose: true });
          output.print(`Done. Time spent: ${chalk.cyan(time)}`);
        }
      });
    });

    return function action(_x, _x2) {
      return _ref.apply(this, arguments);
    };
  })()
};