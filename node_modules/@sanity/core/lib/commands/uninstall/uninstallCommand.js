'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _without2 = require('lodash/without');

var _without3 = _interopRequireDefault(_without2);

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

let uninstallPlugin = (() => {
  var _ref = _asyncToGenerator(function* (plugin, context) {
    const prompt = context.prompt,
          yarn = context.yarn,
          workDir = context.workDir;

    const isFullName = plugin.indexOf('sanity-plugin-') === 0;
    const shortName = isFullName ? plugin.substr(14) : plugin;
    const fullName = isFullName ? plugin : `sanity-plugin-${plugin}`;

    yield removeConfiguration(workDir, fullName, shortName, prompt);
    yield removeFromSanityManifest(workDir, shortName);
    return yarn(['remove', fullName], context);
  });

  return function uninstallPlugin(_x, _x2) {
    return _ref.apply(this, arguments);
  };
})();

let removeConfiguration = (() => {
  var _ref2 = _asyncToGenerator(function* (workDir, fullName, shortName, prompt) {
    const localConfigPath = _path2.default.join(workDir, 'config', `${shortName}.json`);
    const hasLocalConfig = yield (0, _pluginChecksumManifest.localConfigExists)(workDir, shortName);

    if (!hasLocalConfig) {
      return;
    }

    try {
      const localChecksum = yield (0, _generateConfigChecksum2.default)(localConfigPath);
      const sameChecksum = yield (0, _pluginChecksumManifest.hasSameChecksum)(workDir, fullName, localChecksum);

      var _ref3 = yield promptOnAlteredConfiguration(shortName, sameChecksum, prompt);

      const deleteConfig = _ref3.deleteConfig;

      deleteConfiguration(localConfigPath, deleteConfig);
    } catch (err) {
      // Destination file does not exist?
      // Predictable, proceed with uninstall
    }
  });

  return function removeConfiguration(_x3, _x4, _x5, _x6) {
    return _ref2.apply(this, arguments);
  };
})();

let removeFromSanityManifest = (() => {
  var _ref4 = _asyncToGenerator(function* (workDir, pluginName) {
    const manifest = yield (0, _readLocalManifest2.default)(workDir, 'sanity.json');
    manifest.plugins = (0, _without3.default)(manifest.plugins || [], pluginName);
    return _fsExtra2.default.writeJson(_path2.default.join(workDir, 'sanity.json'), manifest, { spaces: 2 });
  });

  return function removeFromSanityManifest(_x7, _x8) {
    return _ref4.apply(this, arguments);
  };
})();

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _readLocalManifest = require('@sanity/util/lib/readLocalManifest');

var _readLocalManifest2 = _interopRequireDefault(_readLocalManifest);

var _generateConfigChecksum = require('../../util/generateConfigChecksum');

var _generateConfigChecksum2 = _interopRequireDefault(_generateConfigChecksum);

var _pluginChecksumManifest = require('../../util/pluginChecksumManifest');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = {
  name: 'uninstall',
  signature: '[plugin]',
  description: 'Removes a Sanity plugin from the current Sanity configuration',
  action: (args, context) => {
    const output = context.output;

    var _args$argsWithoutOpti = _slicedToArray(args.argsWithoutOptions, 1);

    const plugin = _args$argsWithoutOpti[0];

    if (!plugin) {
      return output.error(new Error('Plugin name must be specified'));
    }

    // @todo add support for multiple simultaneous plugins to be uninstalled
    return uninstallPlugin(plugin, context);
  }
};


function deleteConfiguration(configPath, userConfirmed) {
  if (!userConfirmed) {
    return Promise.resolve(); // Leave the configuration in place
  }

  return _fsExtra2.default.unlink(configPath);
}

function promptOnAlteredConfiguration(plugin, sameChecksum, prompt) {
  if (sameChecksum) {
    return Promise.resolve({ deleteConfig: true });
  }

  return prompt([{
    type: 'confirm',
    name: 'deleteConfig',
    message: `Local configuration for '${plugin}' has modifications - remove anyway?`,
    default: true
  }]);
}