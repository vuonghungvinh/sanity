'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const colorizeJson = require('../../util/colorizeJson');

exports.default = {
  name: 'get',
  group: 'documents',
  signature: '[DOCUMENT_ID]',
  description: 'Get and print a document',
  action: (() => {
    var _ref = _asyncToGenerator(function* (args, context) {
      const apiClient = context.apiClient,
            output = context.output,
            chalk = context.chalk;
      const pretty = args.extOptions.pretty;

      var _args$argsWithoutOpti = _slicedToArray(args.argsWithoutOptions, 1);

      const docId = _args$argsWithoutOpti[0];

      const client = apiClient();

      if (!docId) {
        throw new Error('Document ID must be specified');
      }

      try {
        const doc = yield client.getDocument(docId);
        if (!doc) {
          throw new Error('Document not found');
        }

        output.print(pretty ? colorizeJson(doc, chalk) : JSON.stringify(doc, null, 2));
      } catch (err) {
        throw new Error(`Failed to fetch document:\n${err.message}`);
      }
    });

    return function action(_x, _x2) {
      return _ref.apply(this, arguments);
    };
  })()
};