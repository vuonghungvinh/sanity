'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.formatFailure = formatFailure;
exports.getStatus = getStatus;

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = {
  name: 'attempt',
  group: 'hook',
  signature: 'ATTEMPT_ID',
  description: 'Print details of a given webhook delivery attempt',
  action: (() => {
    var _ref = _asyncToGenerator(function* (args, context) {
      const apiClient = context.apiClient,
            output = context.output;

      var _args$argsWithoutOpti = _slicedToArray(args.argsWithoutOptions, 1);

      const attemptId = _args$argsWithoutOpti[0];

      const client = apiClient();

      let attempt;
      try {
        attempt = yield client.request({ uri: `/hooks/attempts/${attemptId}` });
      } catch (err) {
        throw new Error(`Hook attempt retrieval failed:\n${err.message}`);
      }

      var _attempt = attempt;
      const createdAt = _attempt.createdAt,
            resultCode = _attempt.resultCode,
            resultBody = _attempt.resultBody,
            failureReason = _attempt.failureReason,
            inProgress = _attempt.inProgress;


      output.print(`Date: ${createdAt}`);
      output.print(`Status: ${getStatus(attempt)}`);
      output.print(`Status code: ${resultCode}`);

      if (attempt.isFailure) {
        output.print(`Failure: ${formatFailure(attempt)}`);
      }

      if (!inProgress && (!failureReason || failureReason === 'http')) {
        const body = resultBody ? `\n---\n${resultBody}\n---\n` : '<empty>';
        output.print(`Response body: ${body}`);
      }
    });

    return function action(_x, _x2) {
      return _ref.apply(this, arguments);
    };
  })()
};
function formatFailure(attempt) {
  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  let includeHelp = _ref2.includeHelp;
  const id = attempt.id,
        failureReason = attempt.failureReason,
        resultCode = attempt.resultCode;

  const help = includeHelp ? `(run \`sanity hook attempt ${id}\` for details)` : '';
  switch (failureReason) {
    case 'http':
      return `HTTP ${resultCode} ${help}`;
    case 'timeout':
      return 'Request timed out';
    case 'network':
      return 'Network error';
    case 'other':
    default:
  }

  return 'Unknown error';
}

function getStatus(attempt) {
  if (attempt.isFailure) {
    return 'Failed';
  }

  if (attempt.inProgress) {
    return 'In progress';
  }

  return 'Delivered';
}