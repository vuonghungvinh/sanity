'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

let promptForDataset = (() => {
  var _ref2 = _asyncToGenerator(function* (context) {
    const prompt = context.prompt,
          apiClient = context.apiClient;

    const client = apiClient();
    const datasets = yield client.datasets.list();
    const choices = datasets.map(function (dataset) {
      return { value: dataset.name, name: dataset.name };
    });
    choices.push({ value: '*', name: '* (all datasets)' });

    return prompt.single({
      message: 'Select dataset hook should apply to',
      type: 'list',
      choices: choices
    });
  });

  return function promptForDataset(_x3) {
    return _ref2.apply(this, arguments);
  };
})();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = {
  name: 'create',
  group: 'hook',
  signature: '[NAME] [DATASET] [URL]',
  description: 'Create a new hook for the given dataset',
  action: (() => {
    var _ref = _asyncToGenerator(function* (args, context) {
      const apiClient = context.apiClient,
            output = context.output;

      var _args$argsWithoutOpti = _slicedToArray(args.argsWithoutOptions, 3);

      const hookName = _args$argsWithoutOpti[0],
            datasetName = _args$argsWithoutOpti[1],
            hookUrl = _args$argsWithoutOpti[2];

      const client = apiClient();

      const name = yield hookName || promptForHookName(context);
      const dataset = yield datasetName || promptForDataset(context);
      const url = yield hookUrl || promptForHookUrl(context);

      const body = { name: name, dataset: dataset, url: url };
      try {
        yield client.request({ method: 'POST', uri: '/hooks', body: body, json: true });
        output.print('Hook created successfully');
      } catch (err) {
        throw new Error(`Hook creation failed:\n${err.message}`);
      }
    });

    return function action(_x, _x2) {
      return _ref.apply(this, arguments);
    };
  })()
};


function promptForHookName(context) {
  const prompt = context.prompt;

  return prompt.single({
    type: 'input',
    message: 'Hook name:',
    validate: name => name && name.length > 0 && name.length < 250 ? true : 'Hook names must be between 0 and 250 characters'
  });
}

function promptForHookUrl(context) {
  const prompt = context.prompt;

  return prompt.single({
    type: 'input',
    message: 'Hook URL:',
    validate: url => url && /^https?:\/\//.test(url) ? true : 'Hook URL must have an http/https prefix'
  });
}