'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _groupBy2 = require('lodash/groupBy');

var _groupBy3 = _interopRequireDefault(_groupBy2);

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

let promptForHook = (() => {
  var _ref2 = _asyncToGenerator(function* (specified, context) {
    const specifiedName = specified && specified.toLowerCase();
    const prompt = context.prompt,
          apiClient = context.apiClient;

    const client = apiClient();

    const hooks = yield client.request({ uri: '/hooks', json: true });
    if (specifiedName) {
      const selected = hooks.filter(function (hook) {
        return hook.name.toLowerCase() === specifiedName;
      })[0];
      if (!selected) {
        throw new Error(`Hook with name "${specified} not found"`);
      }

      return selected.id;
    }

    if (hooks.length === 0) {
      throw new Error('No hooks currently registered');
    }

    if (hooks.length === 1) {
      return hooks[0].id;
    }

    const choices = hooks.map(function (hook) {
      return { value: hook.id, name: hook.name };
    });
    return prompt.single({
      message: 'Select hook to list logs for',
      type: 'list',
      choices: choices
    });
  });

  return function promptForHook(_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
})();

var _util = require('util');

var _printHookAttemptCommand = require('./printHookAttemptCommand');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = {
  name: 'logs',
  group: 'hook',
  signature: '[NAME]',
  description: 'List latest log entries for a given hook',
  action: (() => {
    var _ref = _asyncToGenerator(function* (args, context) {
      const apiClient = context.apiClient;

      const flags = args.extOptions;

      var _args$argsWithoutOpti = _slicedToArray(args.argsWithoutOptions, 1);

      const name = _args$argsWithoutOpti[0];

      const client = apiClient();

      const hookId = yield promptForHook(name, context);
      let messages;
      let attempts;
      try {
        messages = yield client.request({ uri: `/hooks/${hookId}/messages` });
        attempts = yield client.request({ uri: `/hooks/${hookId}/attempts` });
      } catch (err) {
        throw new Error(`Hook logs retrieval failed:\n${err.message}`);
      }

      const groupedAttempts = (0, _groupBy3.default)(attempts, 'messageId');
      const populated = messages.map(function (msg) {
        return Object.assign(msg, { attempts: groupedAttempts[msg.id] });
      });
      const totalMessages = messages.length - 1;

      populated.forEach(function (message, i) {
        printMessage(message, context, { detailed: flags.detailed });
        printSeparator(context, totalMessages === i);
      });
    });

    return function action(_x, _x2) {
      return _ref.apply(this, arguments);
    };
  })()
};


function printSeparator(context, skip) {
  if (!skip) {
    context.output.print('---\n');
  }
}

function printMessage(message, context, options) {
  const detailed = options.detailed;
  const output = context.output,
        chalk = context.chalk;


  output.print(`Date: ${message.createdAt}`);
  output.print(`Status: ${message.status}`);
  output.print(`Result code: ${message.resultCode}`);

  if (message.failureCount > 0) {
    output.print(`Failures: ${message.failureCount}`);
  }

  if (detailed) {
    output.print('Payload:');
    output.print((0, _util.inspect)(JSON.parse(message.payload), { colors: true }));
  }

  if (detailed && message.attempts) {
    output.print('Attempts:');
    message.attempts.forEach(attempt => {
      const date = attempt.createdAt.replace(/\.\d+Z$/, 'Z');
      const prefix = `  [${date}]`;

      if (attempt.inProgress) {
        output.print(`${prefix} ${chalk.yellow('Pending')}`);
      } else if (attempt.isFailure) {
        const failure = (0, _printHookAttemptCommand.formatFailure)(attempt, { includeHelp: true });
        output.print(`${prefix} ${chalk.yellow(`Failure: ${failure}`)}`);
      } else {
        output.print(`${prefix} Success: HTTP ${attempt.resultCode} (${attempt.duration}ms)`);
      }
    });
  }

  // Leave some empty space between messages
  output.print('');
}