'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

let installPlugin = (() => {
  var _ref2 = _asyncToGenerator(function* (plugin, context) {
    const output = context.output,
          workDir = context.workDir,
          yarn = context.yarn;

    const isNamespaced = plugin[0] === '@';
    let shortName = plugin;
    let fullName = plugin;

    if (!isNamespaced) {
      const isFullName = plugin.indexOf('sanity-plugin-') === 0;
      shortName = isFullName ? plugin.substr(14) : plugin;
      fullName = isFullName ? plugin : `sanity-plugin-${plugin}`;
    }

    yield yarn(['add', fullName], context);
    yield (0, _addPluginToManifest2.default)(workDir, shortName);
    yield copyConfiguration(workDir, fullName, shortName, output);

    output.print(`Plugin '${fullName}' installed`);
  });

  return function installPlugin(_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
})();

let copyConfiguration = (() => {
  var _ref3 = _asyncToGenerator(function* (rootDir, fullName, shortName, output) {
    const configPath = _path2.default.join(rootDir, 'node_modules', fullName, 'config.dist.json');
    const dstPath = _path2.default.join(rootDir, 'config', `${shortName}.json`);

    if (!_fsExtra2.default.existsSync(configPath)) {
      return;
    }

    // Configuration exists, check if user has local configuration already
    if ( // eslint-disable-line no-constant-condition
    false /* disabled for now until we can offer the user a way to fix this */
    && _fsExtra2.default.existsSync(dstPath)) {
      const distChecksum = yield (0, _generateConfigChecksum2.default)(configPath);
      const sameChecksum = yield (0, _pluginChecksumManifest.hasSameChecksum)(rootDir, fullName, distChecksum);
      warnOnDifferentChecksum(shortName, sameChecksum, output.print);
    } else {
      // Destination file does not exist, copy
      yield _fsExtra2.default.copy(configPath, dstPath);
      const checksum = yield (0, _generateConfigChecksum2.default)(configPath);
      yield (0, _pluginChecksumManifest.setChecksum)(rootDir, fullName, checksum);
    }
  });

  return function copyConfiguration(_x5, _x6, _x7, _x8) {
    return _ref3.apply(this, arguments);
  };
})();

// @todo Improve with some sort of helpful key differ or similar


var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _generateConfigChecksum = require('../../util/generateConfigChecksum');

var _generateConfigChecksum2 = _interopRequireDefault(_generateConfigChecksum);

var _addPluginToManifest = require('@sanity/util/lib/addPluginToManifest');

var _addPluginToManifest2 = _interopRequireDefault(_addPluginToManifest);

var _pluginChecksumManifest = require('../../util/pluginChecksumManifest');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = {
  name: 'install',
  signature: '[PLUGIN]',
  description: 'Installs a Sanity plugin to the current Sanity configuration',
  action: (() => {
    var _ref = _asyncToGenerator(function* (args, context) {
      const extOptions = args.extOptions;
      const yarn = context.yarn;

      var _args$argsWithoutOpti = _slicedToArray(args.argsWithoutOptions, 1);

      const plugin = _args$argsWithoutOpti[0];

      if (!plugin) {
        const flags = extOptions.offline ? ['--offline'] : [];
        return yarn(['install'].concat(flags), context);
      }

      // @todo add support for multiple simultaneous plugins to be installed
      return installPlugin(plugin, context);
    });

    return function action(_x, _x2) {
      return _ref.apply(this, arguments);
    };
  })()
};
function warnOnDifferentChecksum(plugin, sameChecksum, printer) {
  if (!sameChecksum) {
    printer([`[Warning] Default configuration for plugin '${plugin}' has changed since you first installed it,`, 'check local configuration vs distributed configuration to ensure your configuration is up to date'].join(' '));
  }
}