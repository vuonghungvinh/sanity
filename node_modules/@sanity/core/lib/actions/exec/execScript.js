'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const spawn = require('child_process').spawn;
const fse = require('fs-extra');
const path = require('path');

module.exports = (() => {
  var _ref = _asyncToGenerator(function* (args) {
    var _args$argsWithoutOpti = _slicedToArray(args.argsWithoutOptions, 1);

    const script = _args$argsWithoutOpti[0];

    const scriptPath = path.resolve(script);

    if (!script) {
      throw new Error('SCRIPT must be provided. `sanity exec <script>`');
    }

    if (!(yield fse.exists(scriptPath))) {
      throw new Error(`${scriptPath} does not exist`);
    }

    const babel = require.resolve('./babel');
    const loader = require.resolve('@sanity/plugin-loader/register');
    const proc = spawn(process.argv[0], ['-r', babel, '-r', loader, scriptPath]);

    proc.stdout.pipe(process.stdout);
    proc.stderr.pipe(process.stderr);
    proc.on('close', process.exit);
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
})();