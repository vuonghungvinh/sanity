'use strict';

var _debug = require('../../debug');

var _debug2 = _interopRequireDefault(_debug);

var _datasetNamePrompt = require('./datasetNamePrompt');

var _datasetNamePrompt2 = _interopRequireDefault(_datasetNamePrompt);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

module.exports = (() => {
  var _ref = _asyncToGenerator(function* (context) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    const apiClient = context.apiClient,
          prompt = context.prompt;
    const message = options.message,
          allowCreation = options.allowCreation;

    const client = apiClient();

    const datasets = yield client.datasets.list();
    const hasProduction = datasets.find(function (dataset) {
      return dataset.name === 'production';
    });
    const datasetChoices = datasets.map(function (dataset) {
      return { value: dataset.name };
    });
    const selected = yield prompt.single({
      message: message || 'Select dataset to use',
      type: 'list',
      choices: allowCreation ? [{ value: 'new', name: 'Create new dataset' }, new prompt.Separator()].concat(_toConsumableArray(datasetChoices)) : datasetChoices
    });

    if (selected === 'new') {
      (0, _debug2.default)('User wants to create a new dataset, prompting for name');
      const newDatasetName = yield (0, _datasetNamePrompt2.default)(prompt, {
        message: 'Name your dataset:',
        default: hasProduction ? undefined : 'production'
      });
      yield client.datasets.create(newDatasetName);
      return newDatasetName;
    }

    return selected;
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
})();