'use strict';

var noop = require('lodash/noop');
var defaults = require('lodash/defaults');
var clientMethods = ['fetch', 'transaction', 'config'];
var allowedOperations = ['create', 'createIfNotExists', 'createOrReplace'];
var defaultOperation = allowedOperations[0];

function validateOptions(input, opts) {
  var options = defaults({}, opts, {
    operation: defaultOperation,
    onProgress: noop
  });

  if (!input || typeof input.pipe !== 'function' && !Array.isArray(input)) {
    throw new Error('Stream does not seem to be a readable stream or an array');
  }

  if (!options.client) {
    throw new Error('`options.client` must be set to an instance of @sanity/client');
  }

  var missing = clientMethods.find(function (key) {
    return typeof options.client[key] !== 'function';
  });

  if (missing) {
    throw new Error(`\`options.client\` is not a valid @sanity/client instance - no "${missing}" method found`);
  }

  var clientConfig = options.client.config();
  if (!clientConfig.token) {
    throw new Error('Client is not instantiated with a `token`');
  }

  if (!allowedOperations.includes(options.operation)) {
    throw new Error(`Operation "${options.operation}" is not supported`);
  }

  return options;
}

module.exports = validateOptions;