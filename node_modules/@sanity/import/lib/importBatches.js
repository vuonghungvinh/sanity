'use strict';

var importBatches = function () {
  var _ref = _asyncToGenerator(function* (batches, options) {
    var progress = progressStepper(options.onProgress, {
      step: 'Importing documents',
      total: batches.length
    });

    var mapOptions = { concurrency: DOCUMENT_IMPORT_CONCURRENCY };
    var batchSizes = yield pMap(batches, importBatch.bind(null, options, progress), mapOptions);

    return batchSizes.reduce(function (prev, add) {
      return prev + add;
    }, 0);
  });

  return function importBatches(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var pMap = require('p-map');
var progressStepper = require('./util/progressStepper');

var DOCUMENT_IMPORT_CONCURRENCY = 3;

function importBatch(options, progress, batch) {
  var client = options.client,
      operation = options.operation;

  return batch.reduce(function (trx, doc) {
    return trx[operation](doc);
  }, client.transaction()).commit({ visibility: 'async' }).then(progress).then(function (res) {
    return res.results.length;
  });
}

module.exports = importBatches;