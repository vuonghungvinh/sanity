'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _fallbackInputs = require('./fallbackInputs');

var _schema = require('@sanity/schema');

var _schema2 = _interopRequireDefault(_schema);

var _nanoPubsub = require('nano-pubsub');

var _nanoPubsub2 = _interopRequireDefault(_nanoPubsub);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var NOOP = function NOOP() {};

function resolve(type) {
  var providedResolve = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : NOOP;

  var itType = type;
  while (itType) {
    var resolved = providedResolve(itType);
    if (resolved) {
      return resolved;
    }
    itType = itType.type;
  }
  return undefined;
}

// Memoize return values from a method that takes a single arg
// memoized as a map of argument => return value
function memoizeMap(method) {
  var map = new WeakMap();
  return function memoizedMap(arg) {
    if (map.has(arg)) {
      return map.get(arg);
    }
    var val = method.call(this, arg);
    if (arg) {
      map.set(arg, val);
    }
    return val;
  };
}

// Memoize return value from method that takes no args
function memoize(method) {
  var called = false;
  var val = void 0;
  return function memoized() {
    if (called) {
      return val;
    }
    val = method.call(this);
    called = true;
    return val;
  };
}

var FormBuilderContext = function (_React$Component) {
  _inherits(FormBuilderContext, _React$Component);

  function FormBuilderContext() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, FormBuilderContext);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = FormBuilderContext.__proto__ || Object.getPrototypeOf(FormBuilderContext)).call.apply(_ref, [this].concat(args))), _this), _this.getDocument = function () {
      return _this.props.value;
    }, _this.resolveInputComponent = memoizeMap(function (type) {
      var resolveInputComponent = _this.props.resolveInputComponent;

      return resolve(type, resolveInputComponent) || _fallbackInputs.fallbackInputs[type.jsonType];
    }), _this.resolvePreviewComponent = memoizeMap(function (type) {
      var resolvePreviewComponent = _this.props.resolvePreviewComponent;

      return resolve(type, resolvePreviewComponent);
    }), _this.getChildContext = memoize(function () {
      var _this$props = _this.props,
          schema = _this$props.schema,
          patchChannel = _this$props.patchChannel;

      return {
        getValuePath: function getValuePath() {
          return [];
        },
        formBuilder: {
          onPatch: patchChannel ? patchChannel.onPatch : function () {
            // eslint-disable-next-line no-console
            console.warn('No patch channel provided to form-builder. If you need input based patch updates, please provide one');
            return NOOP;
          },
          schema: schema,
          resolveInputComponent: _this.resolveInputComponent,
          resolvePreviewComponent: _this.resolvePreviewComponent,
          getDocument: _this.getDocument
        }
      };
    }), _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(FormBuilderContext, [{
    key: 'render',
    value: function render() {
      return this.props.children;
    }
  }]);

  return FormBuilderContext;
}(_react2.default.Component);

FormBuilderContext.createPatchChannel = function () {
  var channel = (0, _nanoPubsub2.default)();
  return { onPatch: channel.subscribe, receivePatches: channel.publish };
};

FormBuilderContext.propTypes = {
  schema: _propTypes2.default.instanceOf(_schema2.default).isRequired,
  value: _propTypes2.default.any,
  children: _propTypes2.default.any.isRequired,
  patchChannel: _propTypes2.default.shape({
    onPatch: _propTypes2.default.func
  }).isRequired,
  resolveInputComponent: _propTypes2.default.func.isRequired,
  resolvePreviewComponent: _propTypes2.default.func.isRequired
};
FormBuilderContext.childContextTypes = {
  getValuePath: _propTypes2.default.func,
  onPatch: _propTypes2.default.func,
  formBuilder: _propTypes2.default.shape({
    schema: _propTypes2.default.instanceOf(_schema2.default),
    resolveInputComponent: _propTypes2.default.func,
    document: _propTypes2.default.any
  })
};
exports.default = FormBuilderContext;