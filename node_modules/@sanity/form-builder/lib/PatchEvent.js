'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.insert = exports.setIfMissing = exports.unset = exports.set = undefined;

var _flatten2 = require('lodash/flatten');

var _flatten3 = _interopRequireDefault(_flatten2);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _patches = require('./utils/patches');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*:: import type {PathSegment, Patch} from './utils/patches'*/
exports.set = _patches.set;
exports.unset = _patches.unset;
exports.setIfMissing = _patches.setIfMissing;
exports.insert = _patches.insert;
/*:: type PatchArg = Patch | Array<Patch>*/

var PatchEvent = function () {
  _createClass(PatchEvent, null, [{
    key: 'from',
    value: function from() {
      for (var _len = arguments.length, patches = Array(_len), _key = 0; _key < _len; _key++) {
        patches[_key] = arguments[_key];
      }

      return new PatchEvent((0, _flatten3.default)(patches));
    }
  }]);

  function PatchEvent(patches /*: Array<Patch>*/) {
    _classCallCheck(this, PatchEvent);

    this.patches = patches;
  }

  _createClass(PatchEvent, [{
    key: 'prepend',
    value: function prepend() /*: PatchEvent*/ {
      for (var _len2 = arguments.length, patches = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        patches[_key2] = arguments[_key2];
      }

      return PatchEvent.from([].concat(_toConsumableArray((0, _flatten3.default)(patches)), _toConsumableArray(this.patches)));
    }
  }, {
    key: 'append',
    value: function append() /*: PatchEvent*/ {
      for (var _len3 = arguments.length, patches = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        patches[_key3] = arguments[_key3];
      }

      return PatchEvent.from([].concat(_toConsumableArray(this.patches), _toConsumableArray((0, _flatten3.default)(patches))));
    }
  }, {
    key: 'prefixAll',
    value: function prefixAll(segment /*: PathSegment*/) /*: PatchEvent*/ {
      return PatchEvent.from(this.patches.map(function (patch) {
        return (0, _patches.prefixPath)(patch, segment);
      }));
    }
  }]);

  return PatchEvent;
}();

exports.default = PatchEvent;