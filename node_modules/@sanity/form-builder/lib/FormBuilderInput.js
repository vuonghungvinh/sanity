'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FormBuilderInput = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var NOOP = function NOOP() {};

var FormBuilderInput = exports.FormBuilderInput = function (_React$Component) {
  _inherits(FormBuilderInput, _React$Component);

  function FormBuilderInput() {
    _classCallCheck(this, FormBuilderInput);

    return _possibleConstructorReturn(this, (FormBuilderInput.__proto__ || Object.getPrototypeOf(FormBuilderInput)).apply(this, arguments));
  }

  _createClass(FormBuilderInput, [{
    key: 'resolveInputComponent',
    value: function resolveInputComponent(type) {
      return this.context.formBuilder.resolveInputComponent(type);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          onChange = _props.onChange,
          value = _props.value,
          type = _props.type,
          level = _props.level,
          isRoot = _props.isRoot,
          rest = _objectWithoutProperties(_props, ['onChange', 'value', 'type', 'level', 'isRoot']);

      var InputComponent = this.resolveInputComponent(type);
      if (!InputComponent) {
        return _react2.default.createElement(
          'div',
          null,
          'No input resolved for type ',
          JSON.stringify(type.name)
        );
      }

      var rootProps = isRoot ? { isRoot: isRoot } : {};

      return _react2.default.createElement(InputComponent, _extends({}, rest, {
        value: value,
        type: type,
        onChange: type.readOnly ? NOOP : onChange,
        level: level
      }, rootProps));
    }
  }]);

  return FormBuilderInput;
}(_react2.default.Component);

FormBuilderInput.propTypes = {
  value: _propTypes2.default.any,
  type: _propTypes2.default.object.isRequired,
  onChange: _propTypes2.default.func.isRequired,
  level: _propTypes2.default.number.isRequired,
  isRoot: _propTypes2.default.bool
};
FormBuilderInput.contextTypes = {
  formBuilder: _propTypes2.default.object
};
FormBuilderInput.defaultProps = {
  isRoot: false
};