'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _kebabCase2 = require('lodash/kebabCase');

var _kebabCase3 = _interopRequireDefault(_kebabCase2);

var _deburr2 = require('lodash/deburr');

var _deburr3 = _interopRequireDefault(_deburr2);

var _debounce2 = require('lodash/debounce');

var _debounce3 = _interopRequireDefault(_debounce2);

var _uniqueId2 = require('lodash/uniqueId');

var _uniqueId3 = _interopRequireDefault(_uniqueId2);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _FormBuilderPropTypes = require('../../FormBuilderPropTypes');

var _FormBuilderPropTypes2 = _interopRequireDefault(_FormBuilderPropTypes);

var _inInput = require('part:@sanity/components/buttons/in-input');

var _inInput2 = _interopRequireDefault(_inInput);

var _inInputStyle = require('part:@sanity/components/buttons/in-input-style');

var _inInputStyle2 = _interopRequireDefault(_inInputStyle);

var _default = require('part:@sanity/components/formfields/default');

var _default2 = _interopRequireDefault(_default);

var _default3 = require('part:@sanity/components/textinputs/default');

var _default4 = _interopRequireDefault(_default3);

var _spinner = require('part:@sanity/components/loading/spinner');

var _spinner2 = _interopRequireDefault(_spinner);

var _PatchEvent = require('../../PatchEvent');

var _PatchEvent2 = _interopRequireDefault(_PatchEvent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Fallback slugify function if not defined in factory function
// or in the type definition's options
function defaultSlugify(value) {
  return (0, _kebabCase3.default)((0, _deburr3.default)(value));
}

function tryPromise(fn) {
  return Promise.resolve().then(function () {
    return fn();
  });
}

var makeCancelable = function makeCancelable(promise) {
  var hasCanceled_ = false;

  var wrappedPromise = new Promise(function (resolve, reject) {
    var cancelError = new Error('Promise was canceled');
    cancelError.isCanceled = true;
    promise.then(function (val) {
      return hasCanceled_ ? reject(cancelError) : resolve(val);
    });
    promise.catch(function (error) {
      return hasCanceled_ ? reject(cancelError) : reject(error);
    });
  });

  return {
    promise: wrappedPromise,
    cancel: function cancel() {
      hasCanceled_ = true;
    }
  };
};

var vanillaState = {
  inputText: undefined,
  loading: false
};

var SlugInput = function (_React$Component) {
  _inherits(SlugInput, _React$Component);

  function SlugInput(props) {
    _classCallCheck(this, SlugInput);

    var _this = _possibleConstructorReturn(this, (SlugInput.__proto__ || Object.getPrototypeOf(SlugInput)).call(this, props));

    _this.state = vanillaState;

    _this.handleChange = function (event) {
      var _this$props = _this.props,
          checkValidityFn = _this$props.checkValidityFn,
          value = _this$props.value;

      if (_this.finalizeSlugTimeout) {
        clearTimeout(_this.finalizeSlugTimeout);
      }
      _this.setState({ inputText: event.target.value.toString() });
      _this.finalizeSlugTimeout = setTimeout(function () {
        var newCurrent = typeof _this.state.inputText === 'undefined' ? undefined : _this.slugify(_this.state.inputText);
        _this.setState({ inputText: newCurrent });
        var newVal = { current: newCurrent, auto: value.auto };
        if (checkValidityFn) {
          _this.updateValueWithUniquenessCheck(newVal);
          return;
        }
        _this.updateValue(newVal);
      }, 500);
    };

    _this.handleChangeButtonClick = function (event) {
      var value = _this.props.value;

      _this.setState({ inputText: _this.state.validationError ? undefined : value.current });
      _this.updateValue({ current: value.current, auto: false });
    };

    _this.handleAutoButtonClicked = function (event) {
      var value = _this.props.value;

      _this.updateValue({ current: value.current, auto: true });
    };

    _this.updateValueWithUniquenessCheck = (0, _debounce3.default)(_this.updateValueWithUniquenessCheck.bind(_this), 500);
    return _this;
  }

  _createClass(SlugInput, [{
    key: 'updateValue',
    value: function updateValue(value) {
      this.setState({ loading: false });
      this.props.onChange(_PatchEvent2.default.from(value ? (0, _PatchEvent.set)(value) : (0, _PatchEvent.unset)()));
    }
  }, {
    key: 'updateValueWithUniquenessCheck',
    value: function updateValueWithUniquenessCheck(value) {
      var _this2 = this;

      var _props = this.props,
          type = _props.type,
          checkValidityFn = _props.checkValidityFn,
          document = _props.document;

      var docId = document._id;
      return makeCancelable(tryPromise(function () {
        if (!value.current) {
          _this2.updateValue(value);
          _this2.setState({ loading: false, validationError: null });
          return Promise.resolve();
        }
        _this2.setState({ loading: true, validationError: null });
        return checkValidityFn(type, value.current, docId);
      })).promise.then(function (validationError) {
        if (!validationError) {
          _this2.updateValue(value);
          _this2.setState({ loading: false, validationError: null });
          return Promise.resolve();
        }
        var proposedNewCurrent = value.current + '-1';
        var newVal = { current: proposedNewCurrent, auto: false };
        _this2.setState({
          loading: false,
          inputText: proposedNewCurrent,
          validationError: validationError.toString()
        });
        return _this2.updateValueWithUniquenessCheck(newVal);
      }).catch(function (err) {
        if (err.isCanceled) {
          return null;
        }
        console.error(err); // eslint-disable-line no-console
        _this2.setState({
          loading: false,
          validationError: 'Got javascript error trying to validate the slug. ' + 'See javascript console for more info.'
        });
        _this2.updateValue({ current: value.current, auto: false });
        return Promise.resolve();
      });
    }
  }, {
    key: 'slugify',
    value: function slugify(sourceValue) {
      if (!sourceValue) {
        return sourceValue;
      }
      var _props2 = this.props,
          type = _props2.type,
          slugifyFn = _props2.slugifyFn;


      var slugify = (0, _get3.default)(type, 'options.slugifyFn') || slugifyFn;

      return slugify(type, sourceValue);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var checkValidityFn = this.props.checkValidityFn;
      var document = nextProps.document,
          type = nextProps.type,
          value = nextProps.value;

      // Reset state if document is changed

      var oldDocId = this.props.document._id;
      var newDocId = document._id;
      if (oldDocId !== newDocId) {
        this.setState(vanillaState);
        return;
      }

      // If slug is set to auto and the source field has changed,
      // verify and set the new slug if it is different from the current one
      var newCurrent = void 0;
      var source = (0, _get3.default)(type, 'options.source');
      if (value.auto && source) {
        var newFromSource = typeof source === 'function' ? source(document) : (0, _get3.default)(document, source);
        newCurrent = this.slugify(newFromSource);
      }
      if (newCurrent && newCurrent !== value.current) {
        var newVal = { current: newCurrent, auto: value.auto };
        if (checkValidityFn) {
          this.updateValueWithUniquenessCheck(newVal);
          this.setState({ inputText: newCurrent });
          return;
        }
        this.updateValue(newVal);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props3 = this.props,
          value = _props3.value,
          type = _props3.type,
          level = _props3.level;

      var hasSourceField = type.options && type.options.source;
      var _state = this.state,
          loading = _state.loading,
          validationError = _state.validationError,
          inputText = _state.inputText;

      var formFieldProps = {
        label: type.title,
        description: type.description,
        level: level
      };

      var inputId = (0, _uniqueId3.default)('FormBuilderSlug');
      var isAuto = type.options && type.options.source && value.auto;
      return _react2.default.createElement(
        _default2.default,
        formFieldProps,
        validationError && _react2.default.createElement(
          'p',
          null,
          validationError
        ),
        _react2.default.createElement(
          'div',
          { className: _inInputStyle2.default.wrapper },
          _react2.default.createElement(_default4.default, {
            id: inputId,
            disabled: isAuto,
            placeholder: type.placeholder,
            onChange: this.handleChange,
            value: typeof inputText === 'string' ? inputText : value.current
          }),
          _react2.default.createElement(
            'div',
            { className: _inInputStyle2.default.container },
            loading && _react2.default.createElement(_spinner2.default, { inline: true, message: 'Loading\u2026' }),
            hasSourceField && value.auto && _react2.default.createElement(
              _inInput2.default,
              { onClick: this.handleChangeButtonClick },
              'Edit'
            ),
            hasSourceField && !value.auto && _react2.default.createElement(
              _inInput2.default,
              { onClick: this.handleAutoButtonClicked },
              'Auto'
            )
          )
        )
      );
    }
  }]);

  return SlugInput;
}(_react2.default.Component);

SlugInput.propTypes = {
  type: _FormBuilderPropTypes2.default.type.isRequired,
  level: _propTypes2.default.number.isRequired,
  value: _propTypes2.default.shape({
    current: _propTypes2.default.string,
    auto: _propTypes2.default.bool
  }),
  checkValidityFn: _propTypes2.default.func,
  slugifyFn: _propTypes2.default.func,
  document: _propTypes2.default.object.isRequired,
  onChange: _propTypes2.default.func
};
SlugInput.defaultProps = {
  value: { current: undefined, auto: true },
  onChange: function onChange() {},

  slugifyFn: defaultSlugify
};
exports.default = SlugInput;