'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ARROW_STYLE = {
  fontSize: '0.8em',
  display: 'inline-block',
  width: '1em',
  marginRight: '0.4em'
};

var CONTAINER_STYLE = {
  cursor: 'default',
  userSelect: 'none',
  WebkitUserSelect: 'none',
  outline: 'none'
};

var Details = function (_React$Component) {
  _inherits(Details, _React$Component);

  function Details(props) {
    _classCallCheck(this, Details);

    var _this = _possibleConstructorReturn(this, (Details.__proto__ || Object.getPrototypeOf(Details)).call(this));

    _this.handleToggle = function () {
      _this.setState(function (prevState) {
        return { isOpen: !prevState.isOpen };
      });
    };

    _this.state = {
      isOpen: props.isOpen
    };
    return _this;
  }

  _createClass(Details, [{
    key: 'render',
    value: function render() {
      var isOpen = this.state.isOpen;
      var _props = this.props,
          title = _props.title,
          children = _props.children;

      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          'div',
          { tabIndex: '0', onClick: this.handleToggle, style: CONTAINER_STYLE },
          _react2.default.createElement(
            'span',
            { style: ARROW_STYLE },
            isOpen ? '▼' : '▶'
          ),
          title
        ),
        isOpen ? children : null
      );
    }
  }]);

  return Details;
}(_react2.default.Component);

Details.propTypes = {
  children: _propTypes2.default.node,
  isOpen: _propTypes2.default.bool,
  title: _propTypes2.default.string
};
Details.defaultProps = {
  title: 'Details',
  isOpen: false
};
exports.default = Details;