'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _is_valid = require('date-fns/is_valid');

var _is_valid2 = _interopRequireDefault(_is_valid);

var _parse = require('date-fns/parse');

var _parse2 = _interopRequireDefault(_parse);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TRUTHY_STRINGS = ['yes', 'true', '1'];
var FALSEY_STRINGS = ['false', 'no', 'false', '0', 'null'];
var BOOL_STRINGS = TRUTHY_STRINGS.concat(FALSEY_STRINGS);

var TRUE = function TRUE() {
  return true;
};

var has = function has(prop) {
  return function (val) {
    return val && val[prop];
  };
};
var is = function is(typeName) {
  return function (val) {
    return (val && val._type) === typeName;
  };
};

function toLocalDate(input) {
  var newDate = new Date(input.getTime() + input.getTimezoneOffset() * 60 * 1000);
  var offset = input.getTimezoneOffset() / 60;
  var hours = input.getHours();
  newDate.setHours(hours - offset);
  return newDate;
}

function getTZName() {
  try {
    return Intl.DateTimeFormat().resolvedOptions().timeZone;
  } catch (e) {} // eslint-disable-line no-empty
  return null;
}

exports.default = {
  string: {
    number: {
      test: Number,
      convert: Number
    },
    boolean: {
      test: function test(value) {
        return BOOL_STRINGS.includes(value.toLowerCase());
      },
      convert: function convert(value) {
        return TRUTHY_STRINGS.includes(value.toLowerCase()) || !FALSEY_STRINGS.includes(value.toLowerCase());
      }
    },
    richDate: {
      test: function test(val) {
        return (0, _is_valid2.default)((0, _parse2.default)(val));
      },
      convert: function convert(value) {
        return {
          _type: 'richDate',
          local: toLocalDate(new Date(value)).toJSON(),
          utc: new Date(value).toJSON(),
          timezone: getTZName(),
          offset: new Date().getTimezoneOffset()
        };
      }
    }
  },
  date: {
    richDate: {
      test: is('date'),
      convert: function convert(value) {
        return Object.assign({}, value, { _type: 'richDate' });
      }
    }
  },
  richDate: {
    datetime: {
      test: has('utc'),
      convert: function convert(value) {
        return value.utc;
      }
    }
  },
  number: {
    string: {
      test: TRUE,
      convert: String
    },
    boolean: {
      test: TRUE,
      convert: Number
    }
  },
  boolean: {
    string: {
      test: TRUE,
      convert: function convert(value) {
        return value ? 'Yes' : 'No';
      }
    },
    number: {
      test: TRUE,
      convert: Number
    }
  }
};