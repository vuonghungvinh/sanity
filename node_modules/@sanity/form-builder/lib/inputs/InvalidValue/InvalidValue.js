'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _default = require('part:@sanity/components/buttons/default');

var _default2 = _interopRequireDefault(_default);

var _Details = require('../common/Details');

var _Details2 = _interopRequireDefault(_Details);

var _InvalidValue = require('./InvalidValue.css');

var _InvalidValue2 = _interopRequireDefault(_InvalidValue);

var _PatchEvent = require('../../PatchEvent');

var _PatchEvent2 = _interopRequireDefault(_PatchEvent);

var _converters = require('./converters');

var _converters2 = _interopRequireDefault(_converters);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var setAutoHeight = function setAutoHeight(el) {
  if (el) {
    el.style.height = Math.min(300, el.scrollHeight) + 'px';
    el.style.padding = 4 + 'px';
    el.style.overflow = 'auto';
  }
};

function getConverters(value, actualType, validTypes) {
  if (!(actualType in _converters2.default)) {
    return [];
  }
  return Object.keys(_converters2.default[actualType]).filter(function (targetType) {
    return validTypes.includes(targetType);
  }).map(function (targetType) {
    return _extends({
      from: actualType,
      to: targetType
    }, _converters2.default[actualType][targetType]);
  }).filter(function (converter) {
    return converter.test(value);
  });
}

var InvalidValue = function (_React$PureComponent) {
  _inherits(InvalidValue, _React$PureComponent);

  function InvalidValue() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, InvalidValue);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = InvalidValue.__proto__ || Object.getPrototypeOf(InvalidValue)).call.apply(_ref, [this].concat(args))), _this), _this.handleClearClick = function () {
      _this.props.onChange(_PatchEvent2.default.from((0, _PatchEvent.unset)()));
    }, _this.handleConvertTo = function (converted) {
      _this.props.onChange(_PatchEvent2.default.from((0, _PatchEvent.set)(converted)));
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(InvalidValue, [{
    key: 'renderValidTypes',
    value: function renderValidTypes() {
      var validTypes = this.props.validTypes;

      if (validTypes.length === 1) {
        return _react2.default.createElement(
          'div',
          null,
          'Only content of type ',
          _react2.default.createElement(
            'code',
            null,
            validTypes[0]
          ),
          ' are valid here according to schema'
        );
      }
      return _react2.default.createElement(
        'div',
        null,
        'Only the following types are valid here according to schema: ',
        validTypes.map(function (validType) {
          return _react2.default.createElement(
            'li',
            { key: validType },
            _react2.default.createElement(
              'code',
              null,
              validType
            )
          );
        })
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          value = _props.value,
          actualType = _props.actualType,
          validTypes = _props.validTypes;

      var converters = getConverters(value, actualType, validTypes);
      return _react2.default.createElement(
        'div',
        { className: _InvalidValue2.default.root },
        _react2.default.createElement(
          'h3',
          null,
          'Content has invalid type: ',
          _react2.default.createElement(
            'code',
            null,
            actualType
          )
        ),
        _react2.default.createElement(
          _Details2.default,
          null,
          'Encountered a value of type ',
          _react2.default.createElement(
            'code',
            null,
            actualType
          ),
          '.',
          this.renderValidTypes(),
          _react2.default.createElement(
            'h4',
            null,
            'The current value is:'
          ),
          _react2.default.createElement('textarea', {
            ref: setAutoHeight,
            className: _InvalidValue2.default.currentValueDump,
            onFocus: function onFocus(e) {
              return e.target.select();
            },
            readOnly: true,
            value: value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' ? JSON.stringify(value, null, 2) : value
          }),
          converters.map(function (converter) {
            return _react2.default.createElement(
              _default2.default,
              {
                key: converter.from + '-' + converter.to,
                onClick: function onClick() {
                  return _this2.handleConvertTo(converter.convert(value));
                },
                color: 'primary'
              },
              'Convert value to ',
              converter.to
            );
          }),
          _react2.default.createElement(
            _default2.default,
            { onClick: this.handleClearClick, color: 'danger' },
            'Remove value'
          )
        )
      );
    }
  }]);

  return InvalidValue;
}(_react2.default.PureComponent);

InvalidValue.propTypes = {
  actualType: _propTypes2.default.string,
  validTypes: _propTypes2.default.array,
  value: _propTypes2.default.any,
  onChange: _propTypes2.default.func
};
exports.default = InvalidValue;