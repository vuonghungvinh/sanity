'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _default = require('part:@sanity/components/fieldsets/default');

var _default2 = _interopRequireDefault(_default);

var _PatchEvent = require('../../PatchEvent');

var _PatchEvent2 = _interopRequireDefault(_PatchEvent);

var _Item = require('./Item');

var _Item2 = _interopRequireDefault(_Item);

var _resolveTypeName = require('../../utils/resolveTypeName');

var _legacyOptionsSupport = require('./legacyOptionsSupport');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function isEqual(item, otherItem) {
  if ((0, _legacyOptionsSupport.isLegacyOptionsItem)(item) || (0, _legacyOptionsSupport.isLegacyOptionsItem)(otherItem)) {
    return item.value === otherItem.value;
  }
  if (item === otherItem) {
    return true;
  }
  if ((typeof item === 'undefined' ? 'undefined' : _typeof(item)) !== (typeof otherItem === 'undefined' ? 'undefined' : _typeof(otherItem))) {
    return false;
  }
  if ((typeof item === 'undefined' ? 'undefined' : _typeof(item)) !== 'object' && !Array.isArray(item)) {
    return item === otherItem;
  }
  if (item._key && item._key === otherItem._key) {
    return true;
  }
  if (Array.isArray(item)) {
    if (!item.length !== otherItem.length) {
      return false;
    }
    return item.every(function (it, i) {
      return isEqual(item[i], otherItem[i]);
    });
  }
  var keys = Object.keys(item);
  var otherKeys = Object.keys(item);
  if (keys.length !== otherKeys.length) {
    return false;
  }
  return keys.every(function (keyName) {
    return isEqual(item[keyName], otherItem[keyName]);
  });
}

function inArray(array, candidate) {
  return array ? array.some(function (item) {
    return isEqual(item, candidate);
  }) : false;
}

var OptionsArrayInput = function (_React$PureComponent) {
  _inherits(OptionsArrayInput, _React$PureComponent);

  function OptionsArrayInput() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, OptionsArrayInput);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = OptionsArrayInput.__proto__ || Object.getPrototypeOf(OptionsArrayInput)).call.apply(_ref, [this].concat(args))), _this), _this.handleChange = function (isChecked, optionValue) {
      var _this$props = _this.props,
          type = _this$props.type,
          _this$props$value = _this$props.value,
          value = _this$props$value === undefined ? [] : _this$props$value;


      var list = (0, _get3.default)(type.options, 'list');

      if (!isChecked && optionValue._key) {
        // This is an optimization that only works if list items are _keyed
        _this.props.onChange(_PatchEvent2.default.from((0, _PatchEvent.unset)({ _key: optionValue._key })));
      }

      var nextValue = list.filter(function (item) {
        return isEqual(optionValue, item) ? isChecked : inArray(value, (0, _legacyOptionsSupport.resolveValueWithLegacyOptionsSupport)(item));
      }).map(_legacyOptionsSupport.resolveValueWithLegacyOptionsSupport);

      _this.props.onChange(_PatchEvent2.default.from(nextValue.length > 0 ? (0, _PatchEvent.set)(nextValue) : (0, _PatchEvent.unset)()));
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(OptionsArrayInput, [{
    key: 'getMemberTypeOfItem',
    value: function getMemberTypeOfItem(option) {
      var type = this.props.type;

      return type.of.find(function (memberType) {
        return memberType.name === (0, _resolveTypeName.resolveTypeName)((0, _legacyOptionsSupport.resolveValueWithLegacyOptionsSupport)(option));
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          type = _props.type,
          value = _props.value,
          level = _props.level;


      var options = (0, _get3.default)(type.options, 'list');
      var direction = (0, _get3.default)(type.options, 'direction');

      return _react2.default.createElement(
        _default2.default,
        { legend: type.title, description: type.description, level: level },
        options.map(function (option, index) {
          var optionType = _this2.getMemberTypeOfItem(option);
          if (!optionType) {
            var actualType = (0, _resolveTypeName.resolveTypeName)((0, _legacyOptionsSupport.resolveValueWithLegacyOptionsSupport)(option));
            var validTypes = type.of.map(function (ofType) {
              return ofType.name;
            });
            return _react2.default.createElement(
              'div',
              { key: option._key || index },
              'Invalid option type: Type ',
              _react2.default.createElement(
                'code',
                null,
                actualType
              ),
              ' not valid for array of [',
              validTypes.join(', '),
              ']. Check the list options of this field'
            );
          }
          var checked = inArray(value, (0, _legacyOptionsSupport.resolveValueWithLegacyOptionsSupport)(option));
          return _react2.default.createElement(
            'div',
            {
              key: option._key || index,
              style: {
                display: direction === 'horizontal' ? 'inline-block' : 'block',
                marginRight: direction === 'horizontal' ? '1em' : '0'
              }
            },
            _react2.default.createElement(_Item2.default, {
              type: optionType,
              value: option,
              checked: checked,
              onChange: _this2.handleChange
            })
          );
        })
      );
    }
  }]);

  return OptionsArrayInput;
}(_react2.default.PureComponent);

OptionsArrayInput.propTypes = {
  type: _propTypes2.default.shape({
    options: _propTypes2.default.shape({
      list: _propTypes2.default.array,
      direction: _propTypes2.default.string
    }),
    name: _propTypes2.default.string,
    description: _propTypes2.default.string,
    of: _propTypes2.default.array
  }),
  value: _propTypes2.default.array,
  level: _propTypes2.default.number,
  onChange: _propTypes2.default.func
};
exports.default = OptionsArrayInput;