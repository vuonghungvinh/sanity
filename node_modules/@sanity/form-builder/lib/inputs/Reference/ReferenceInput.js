'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _searchable = require('part:@sanity/components/selects/searchable');

var _searchable2 = _interopRequireDefault(_searchable);

var _default = require('part:@sanity/components/formfields/default');

var _default2 = _interopRequireDefault(_default);

var _Preview = require('../../Preview');

var _Preview2 = _interopRequireDefault(_Preview);

var _subscriptionManager = require('../../utils/subscriptionManager');

var _subscriptionManager2 = _interopRequireDefault(_subscriptionManager);

var _PatchEvent = require('../../../PatchEvent');

var _PatchEvent2 = _interopRequireDefault(_PatchEvent);

var _linkIcon = require('part:@sanity/base/link-icon');

var _linkIcon2 = _interopRequireDefault(_linkIcon);

var _router = require('part:@sanity/base/router');

var _ReferenceInput = require('./styles/ReferenceInput.css');

var _ReferenceInput2 = _interopRequireDefault(_ReferenceInput);

var _default3 = require('part:@sanity/components/buttons/default');

var _default4 = _interopRequireDefault(_default3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*:: import type {Reference, Type} from '../../typedefs'*/
/*:: import type {ObservableI} from '../../typedefs/observable'*/
/*:: type SearchHit = {
  _id: string,
  _type: string
}*/
/*:: type PreviewSnapshot = {
  title: string,
  description: string
}*/
/*:: type Props = {
  value: ?Reference,
  type: Type,
  onSearch: (query: string, type: Type) => ObservableI<Array<SearchHit>>,
  getPreviewSnapshot: (Reference, Type) => ObservableI<PreviewSnapshot>,
  onChange: PatchEvent => void,
  level: number
}*/
/*:: type State = {
  isFetching: boolean,
  hits: Array<SearchHit>,
  previewSnapshot: ?PreviewSnapshot,
  refCache: { [string]: SearchHit }
}*/


var MISSING_SNAPSHOT = {};

var getInitialState = function getInitialState() /*: State*/ {
  return {
    isFetching: false,
    hits: [],
    previewSnapshot: null,
    refCache: {}
  };
};

var ReferenceInput = function (_React$Component) {
  _inherits(ReferenceInput, _React$Component);

  function ReferenceInput() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ReferenceInput);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ReferenceInput.__proto__ || Object.getPrototypeOf(ReferenceInput)).call.apply(_ref, [this].concat(args))), _this), _this.state = getInitialState(), _this.subscriptions = (0, _subscriptionManager2.default)('search', 'previewSnapshot'), _this._lastQuery = '', _this.handleFocus = function () {
      if (_this._lastQuery) {
        _this.search(_this._lastQuery);
      }
    }, _this.handleChange = function (item /*: SearchHit*/) {
      var type = _this.props.type;

      _this.props.onChange(_PatchEvent2.default.from((0, _PatchEvent.setIfMissing)({
        _type: type.name,
        _ref: item._id
      }), type.weak === true ? (0, _PatchEvent.set)(true, ['_weak']) : (0, _PatchEvent.unset)(['_weak']), (0, _PatchEvent.set)(item._id, ['_ref'])));
    }, _this.handleFixWeak = function () {
      var type = _this.props.type;

      _this.props.onChange(_PatchEvent2.default.from(type.weak === true ? (0, _PatchEvent.set)(true, ['_weak']) : (0, _PatchEvent.unset)(['_weak'])));
    }, _this.handleClear = function () {
      _this.props.onChange(_PatchEvent2.default.from((0, _PatchEvent.unset)()));
    }, _this.handleSearch = function (query /*: string*/) {
      _this.search(query);
    }, _this.handleOpen = function () {
      _this.search('*');
    }, _this.search = function (query /*: string*/) {
      var _this$props = _this.props,
          type = _this$props.type,
          onSearch = _this$props.onSearch;


      _this.setState({
        isFetching: true
      });

      _this.subscriptions.replace('search', onSearch(query, type).subscribe(function (items /*: Array<SearchHit>*/) {
        var updatedCache = items.reduce(function (cache, item) {
          cache[item._id] = item;
          return cache;
        }, Object.assign({}, _this.state.refCache));

        _this.setState({
          hits: items,
          isFetching: false,
          refCache: updatedCache
        });
      }));
    }, _this.renderHit = function (item /*: SearchHit*/) {
      var type = _this.getMemberTypeFor(item._type);
      return _react2.default.createElement(_Preview2.default, {
        type: type,
        value: item,
        layout: 'default'
      });
    }, _this.renderOpenItemElement = function () {
      var value = _this.props.value;
      var previewSnapshot = _this.state.previewSnapshot;

      return value && previewSnapshot !== MISSING_SNAPSHOT && _react2.default.createElement(
        _router.IntentLink,
        {
          title: previewSnapshot && 'Open ' + previewSnapshot.title,
          intent: 'edit',
          params: { id: value._ref }
        },
        _react2.default.createElement(_linkIcon2.default, null)
      );
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ReferenceInput, [{
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.subscriptions.unsubscribeAll();
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.getPreviewSnapshot(this.props.value);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps /*: Props*/) {
      if (nextProps.value !== this.props.value) {
        this.setState(getInitialState());
        this.getPreviewSnapshot(nextProps.value);
      }
    }
  }, {
    key: 'getPreviewSnapshot',
    value: function getPreviewSnapshot(value /*: Reference*/) {
      var _this2 = this;

      if (!value || !value._ref) {
        return;
      }
      var _props = this.props,
          getPreviewSnapshot = _props.getPreviewSnapshot,
          type = _props.type;


      this.subscriptions.replace('previewSnapshot', getPreviewSnapshot(value, type).subscribe(function (snapshot) {
        _this2.setState({ previewSnapshot: snapshot || MISSING_SNAPSHOT });
      }));
    }
  }, {
    key: 'getMemberTypeFor',
    value: function getMemberTypeFor(typeName /*: string*/) {
      var type = this.props.type;

      return type.to.find(function (ofType) {
        return ofType.type.name === typeName;
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          type = _props2.type,
          value = _props2.value,
          level = _props2.level,
          onSearch = _props2.onSearch,
          getPreviewSnapshot = _props2.getPreviewSnapshot,
          rest = _objectWithoutProperties(_props2, ['type', 'value', 'level', 'onSearch', 'getPreviewSnapshot']);

      var _state = this.state,
          previewSnapshot = _state.previewSnapshot,
          isFetching = _state.isFetching,
          hits = _state.hits;

      var valueFromHit = value && hits.find(function (hit) {
        return hit._id === value._ref;
      });

      var weakIs = value && value._weak ? 'weak' : 'strong';
      var weakShouldBe = type.weak === true ? 'weak' : 'strong';

      var isMissing = previewSnapshot === MISSING_SNAPSHOT;
      var hasRef = value && value._ref;
      var hasWeakMismatch = hasRef && !isMissing && weakIs !== weakShouldBe;

      return _react2.default.createElement(
        _default2.default,
        { label: type.title, level: level, description: type.description },
        _react2.default.createElement(
          'div',
          { className: hasWeakMismatch || isMissing ? _ReferenceInput2.default.hasWarnings : '' },
          hasWeakMismatch && _react2.default.createElement(
            'div',
            { className: _ReferenceInput2.default.weakRefMismatchWarning },
            'Warning: This reference is ',
            _react2.default.createElement(
              'em',
              null,
              weakIs
            ),
            ', but should be ',
            _react2.default.createElement(
              'em',
              null,
              weakShouldBe
            ),
            ' according to schema.',
            _react2.default.createElement(
              'div',
              null,
              _react2.default.createElement(
                _default4.default,
                { onClick: this.handleFixWeak },
                'Convert to ',
                weakShouldBe
              )
            )
          ),
          _react2.default.createElement(_searchable2.default, _extends({}, rest, {
            placeholder: 'Type to search\u2026',
            title: isMissing && hasRef ? 'Document id: ' + (value._ref || 'unknown') : previewSnapshot && previewSnapshot.description,
            onOpen: this.handleOpen,
            onFocus: this.handleFocus,
            onSearch: this.handleSearch,
            onChange: this.handleChange,
            onClear: this.handleClear,
            openItemElement: this.renderOpenItemElement,
            value: valueFromHit || value,
            inputValue: isMissing ? '<Unpublished or missing document>' : previewSnapshot && previewSnapshot.title,
            renderItem: this.renderHit,
            isLoading: isFetching,
            items: hits
          }))
        )
      );
    }
  }]);

  return ReferenceInput;
}(_react2.default.Component);

exports.default = ReferenceInput;