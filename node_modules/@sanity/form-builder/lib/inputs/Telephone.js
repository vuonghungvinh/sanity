'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _FormBuilderPropTypes = require('../FormBuilderPropTypes');

var _FormBuilderPropTypes2 = _interopRequireDefault(_FormBuilderPropTypes);

var _default = require('part:@sanity/components/textinputs/default');

var _default2 = _interopRequireDefault(_default);

var _default3 = require('part:@sanity/components/formfields/default');

var _default4 = _interopRequireDefault(_default3);

var _PatchEvent = require('../PatchEvent');

var _PatchEvent2 = _interopRequireDefault(_PatchEvent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TelephoneInput = function (_React$PureComponent) {
  _inherits(TelephoneInput, _React$PureComponent);

  function TelephoneInput() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, TelephoneInput);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TelephoneInput.__proto__ || Object.getPrototypeOf(TelephoneInput)).call.apply(_ref, [this].concat(args))), _this), _this.handleChange = function (event) {
      var value = event.target.value || undefined;
      _this.props.onChange(_PatchEvent2.default.from(value ? (0, _PatchEvent.set)(value) : (0, _PatchEvent.unset)()));
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(TelephoneInput, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          value = _props.value,
          type = _props.type,
          level = _props.level,
          rest = _objectWithoutProperties(_props, ['value', 'type', 'level']);

      return _react2.default.createElement(
        _default4.default,
        {
          level: level,
          label: type.title,
          description: type.description
        },
        _react2.default.createElement(_default2.default, _extends({}, rest, {
          type: 'tel',
          value: value,
          placeholder: type.placeholder,
          onChange: this.handleChange
        }))
      );
    }
  }]);

  return TelephoneInput;
}(_react2.default.PureComponent);

TelephoneInput.propTypes = {
  type: _FormBuilderPropTypes2.default.type.isRequired,
  level: _propTypes2.default.number.isRequired,
  value: _propTypes2.default.string,
  onChange: _propTypes2.default.func
};
TelephoneInput.defaultProps = {
  value: '',
  onChange: function onChange() {}
};
exports.default = TelephoneInput;