'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _default = require('part:@sanity/components/formfields/default');

var _default2 = _interopRequireDefault(_default);

var _textfield = require('part:@sanity/components/tags/textfield');

var _textfield2 = _interopRequireDefault(_textfield);

var _PatchEvent = require('../../PatchEvent');

var _PatchEvent2 = _interopRequireDefault(_PatchEvent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*:: import type {Type} from '../../typedefs'*/
/*:: type Props = {
  type: Type,
  value: Array<string>,
  level: number,
  onChange: (PatchEvent) => void
}*/

var TagsArrayInput = function (_React$PureComponent) {
  _inherits(TagsArrayInput, _React$PureComponent);

  function TagsArrayInput() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, TagsArrayInput);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TagsArrayInput.__proto__ || Object.getPrototypeOf(TagsArrayInput)).call.apply(_ref, [this].concat(args))), _this), _this.handleAddItem = function (itemValue /*: string*/) {
      _this.set((_this.props.value || []).concat(itemValue));
    }, _this.handleRemoveItem = function (index /*: number*/) {
      var copy = [].concat(_this.props.value);
      copy.splice(index, 1);
      _this.set(copy);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(TagsArrayInput, [{
    key: 'set',
    value: function set(nextValue /*: string[]*/) {
      var patch = nextValue.length === 0 ? (0, _PatchEvent.unset)() : (0, _PatchEvent.set)(nextValue);
      this.props.onChange(_PatchEvent2.default.from(patch));
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          type = _props.type,
          value = _props.value,
          level = _props.level;

      return _react2.default.createElement(
        _default2.default,
        {
          level: level,
          label: type.title,
          description: type.description
        },
        _react2.default.createElement(_textfield2.default, {
          label: type.title,
          level: level,
          description: type.description,
          tags: value || [],
          onRemoveTag: this.handleRemoveItem,
          onAddTag: this.handleAddItem
        })
      );
    }
  }]);

  return TagsArrayInput;
}(_react2.default.PureComponent);

exports.default = TagsArrayInput;