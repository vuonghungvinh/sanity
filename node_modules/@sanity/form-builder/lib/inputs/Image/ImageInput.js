'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _groupBy2 = require('lodash/groupBy');

var _groupBy3 = _interopRequireDefault(_groupBy2);

var _omit2 = require('lodash/omit');

var _omit3 = _interopRequireDefault(_omit2);

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _default = require('part:@sanity/components/buttons/default');

var _default2 = _interopRequireDefault(_default);

var _fullscreen = require('part:@sanity/components/dialogs/fullscreen');

var _fullscreen2 = _interopRequireDefault(_fullscreen);

var _default3 = require('part:@sanity/components/imageinput/default');

var _default4 = _interopRequireDefault(_default3);

var _imageLoader = require('part:@sanity/components/utilities/image-loader');

var _imageLoader2 = _interopRequireDefault(_imageLoader);

var _default5 = require('part:@sanity/components/fieldsets/default');

var _default6 = _interopRequireDefault(_default5);

var _Field = require('../Object/Field');

var _Field2 = _interopRequireDefault(_Field);

var _imagetool = require('@sanity/imagetool');

var _imagetool2 = _interopRequireDefault(_imagetool);

var _HotspotImage = require('@sanity/imagetool/HotspotImage');

var _HotspotImage2 = _interopRequireDefault(_HotspotImage);

var _constants = require('@sanity/imagetool/constants');

var _subscriptionManager = require('../../utils/subscriptionManager');

var _subscriptionManager2 = _interopRequireDefault(_subscriptionManager);

var _PatchEvent = require('../../PatchEvent');

var _PatchEvent2 = _interopRequireDefault(_PatchEvent);

var _SelectAsset = require('./SelectAsset');

var _SelectAsset2 = _interopRequireDefault(_SelectAsset);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DEFAULT_HOTSPOT = {
  height: 1,
  width: 1,
  x: 0.5,
  y: 0.5
};

var ASPECT_RATIOS = [['Landscape', 16 / 9], ['Portrait', 9 / 16], ['Square', 1], ['Panorama', 4]];

function getInitialState() {
  return {
    status: 'ready',
    error: null,
    progress: null,
    uploadingImage: null,
    materializedImage: null,
    isAdvancedEditOpen: false,
    isSelectAssetOpen: false
  };
}

var ImageInput = function (_React$PureComponent) {
  _inherits(ImageInput, _React$PureComponent);

  function ImageInput() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ImageInput);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ImageInput.__proto__ || Object.getPrototypeOf(ImageInput)).call.apply(_ref, [this].concat(args))), _this), _this.state = getInitialState(), _this.subscriptions = (0, _subscriptionManager2.default)('upload', 'materialize'), _this.handleUploadProgress = function (event) {
      if (event.type === 'progress' && event.stage === 'upload') {
        _this.setStateIfMounted({
          status: 'pending',
          progress: { percent: event.percent }
        });
      }

      if (event.type === 'complete') {
        var _this$props = _this.props,
            onChange = _this$props.onChange,
            type = _this$props.type;

        _this.setStateIfMounted({
          uploadingImage: null,
          status: 'complete',
          materializedImage: event.asset
        }, function () {
          // Important: needs to be emitted after the state is updated
          // or else materializing on the next componentWillReceiveProps may not
          // be able to compare with current materialized image
          onChange(_PatchEvent2.default.from((0, _PatchEvent.setIfMissing)({
            _type: type.name,
            asset: { _type: 'reference' }
          }), (0, _PatchEvent.set)({ _type: 'reference', _ref: event.id }, ['asset'])));
        });
      }
    }, _this.handleUploadError = function (error) {
      _this.setState({
        status: 'error'
      });
    }, _this.handleSelect = function (images) {
      _this.upload(images[0]);
    }, _this.handleClearValue = function (event) {
      event.preventDefault();
      var onChange = _this.props.onChange;

      onChange(_PatchEvent2.default.from((0, _PatchEvent.unset)()));
      _this.setState({ status: 'ready' });
    }, _this.handleCancel = function () {
      _this.cancelUpload();
      _this.setState({
        status: 'ready',
        progress: null,
        uploadingImage: null
      });
    }, _this.handleFieldChange = function (event /*: PatchEvent*/, field) {
      var _this$props2 = _this.props,
          onChange = _this$props2.onChange,
          type = _this$props2.type;


      onChange(event.prefixAll(field.name).prepend((0, _PatchEvent.setIfMissing)({
        _type: type.name,
        asset: { _type: 'reference' }
      })));
    }, _this.handleEditDialogClose = function (event) {
      _this.setState({ isAdvancedEditOpen: false });
    }, _this.handleImageToolChange = function (newValue) {
      var _this$props3 = _this.props,
          onChange = _this$props3.onChange,
          type = _this$props3.type;

      onChange(_PatchEvent2.default.from((0, _PatchEvent.setIfMissing)({
        _type: type.name,
        asset: { _type: 'reference' }
      }), (0, _PatchEvent.set)(newValue.crop, ['crop']), (0, _PatchEvent.set)(newValue.hotspot, ['hotspot'])));
    }, _this.handleOpenAdvancedEdit = function () {
      _this.setState({
        isAdvancedEditOpen: true
      });
    }, _this.handleOpenSelectAsset = function () {
      _this.setState({
        isSelectAssetOpen: true
      });
    }, _this.handleCloseSelectAsset = function () {
      _this.setState({
        isSelectAssetOpen: false
      });
    }, _this.handleSelectAsset = function (asset) {
      var _this$props4 = _this.props,
          onChange = _this$props4.onChange,
          type = _this$props4.type;

      onChange(_PatchEvent2.default.from([(0, _PatchEvent.setIfMissing)({
        _type: type.name
      }), (0, _PatchEvent.set)({
        _type: 'reference',
        _ref: asset._id
      }, ['asset'])]));

      _this.setState({
        isSelectAssetOpen: false
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ImageInput, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var value = this.props.value;

      if (value) {
        this.syncImageRef(value.asset);
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var currentRef = (0, _get3.default)(this.props, 'value.asset');
      var nextRef = (0, _get3.default)(nextProps, 'value.asset');

      var shouldUpdate = currentRef !== nextRef || (0, _get3.default)(currentRef, '_ref') !== (0, _get3.default)(nextRef, '_ref');

      if (shouldUpdate) {
        this.setState((0, _omit3.default)(getInitialState(), 'materializedImage', 'uploadingImage'));
        this.cancelUpload();
        this.syncImageRef(nextRef);
      }
    }
  }, {
    key: 'upload',
    value: function upload(image) {
      this.cancelUpload();
      this.setState({ uploadingImage: image });

      this.subscriptions.replace('upload', this.props.uploadFn(image.file).subscribe({
        next: this.handleUploadProgress,
        error: this.handleUploadError
      }));
    }
  }, {
    key: 'syncImageRef',
    value: function syncImageRef(reference) {
      var _this2 = this;

      if (!reference) {
        this.setState({ materializedImage: null });
        return;
      }
      var materializeReferenceFn = this.props.materializeReferenceFn;

      this.subscriptions.replace('materialize', materializeReferenceFn(reference._ref).subscribe(function (materialized) {
        _this2.setState({ materializedImage: materialized });
      }));
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.subscriptions.unsubscribe('materialize');
      // todo: fix this properly by unsubscribing to upload observable without cancelling it
      this._unmounted = true;
    }
  }, {
    key: 'cancelUpload',
    value: function cancelUpload() {
      this.subscriptions.unsubscribe('upload');
    }
  }, {
    key: 'hasField',
    value: function hasField(fieldName) {
      return this.props.type.fields.find(function (field) {
        return field.name === fieldName;
      });
    }
  }, {
    key: 'setStateIfMounted',
    value: function setStateIfMounted() {
      if (!this._unmounted) {
        this.setState.apply(this, arguments);
      }
    }
  }, {
    key: 'renderFields',
    value: function renderFields(fields) {
      var _this3 = this;

      return fields.map(function (field) {
        return _this3.renderField(field);
      });
    }
  }, {
    key: 'getImageUrl',
    value: function getImageUrl() {
      var _state = this.state,
          uploadingImage = _state.uploadingImage,
          materializedImage = _state.materializedImage;

      if (uploadingImage) {
        return uploadingImage.previewUrl;
      }
      if (materializedImage && materializedImage.url) {
        return '' + materializedImage.url;
      }
      return null;
    }
  }, {
    key: 'isImageToolEnabled',
    value: function isImageToolEnabled() {
      return this.hasField('hotspot') && this.hasField('crop');
    }
  }, {
    key: 'renderImageTool',
    value: function renderImageTool() {
      var value = this.props.value;

      var hotspot = value && value.hotspot || DEFAULT_HOTSPOT;
      var crop = value && value.crop || _constants.DEFAULT_CROP;

      var _state2 = this.state,
          uploadingImage = _state2.uploadingImage,
          materializedImage = _state2.materializedImage;


      var imageUrl = uploadingImage ? uploadingImage.previewUrl : (materializedImage || {}).url;
      return _react2.default.createElement(
        'div',
        { style: { display: 'flex', flexDirection: 'row', width: 800 } },
        _react2.default.createElement(
          'div',
          { style: { width: '40%' } },
          _react2.default.createElement(_imagetool2.default, {
            value: { hotspot: hotspot, crop: crop },
            src: imageUrl,
            onChange: this.handleImageToolChange
          })
        ),
        _react2.default.createElement(
          'div',
          { style: { width: '60%', display: 'flex', flexDirection: 'row' } },
          ASPECT_RATIOS.map(function (_ref2) {
            var _ref3 = _slicedToArray(_ref2, 2),
                title = _ref3[0],
                ratio = _ref3[1];

            return _react2.default.createElement(
              'div',
              { key: ratio, style: { flexGrow: 1 } },
              _react2.default.createElement(
                'h4',
                null,
                title
              ),
              _react2.default.createElement(
                _imageLoader2.default,
                { src: imageUrl },
                function (_ref4) {
                  var image = _ref4.image,
                      error = _ref4.error;

                  return _react2.default.createElement(
                    'div',
                    { style: { margin: 4, border: '1px dashed #999', backgroundColor: '#eee' } },
                    _react2.default.createElement(_HotspotImage2.default, {
                      aspectRatio: ratio,
                      src: image.src,
                      srcAspectRatio: image.width / image.height,
                      hotspot: hotspot,
                      crop: crop
                    })
                  );
                }
              )
            );
          })
        )
      );
    }
  }, {
    key: 'renderAdvancedEdit',
    value: function renderAdvancedEdit(fields) {
      var grouped = (0, _groupBy3.default)(fields, function (field) {
        if (field.name === 'hotspot' || field.name === 'crop') {
          return 'imagetool';
        }
        return 'other';
      });
      return _react2.default.createElement(
        _fullscreen2.default,
        { title: 'Edit details', onClose: this.handleEditDialogClose, isOpen: true },
        grouped.imagetool && _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement(
            'h2',
            null,
            'Hotspot/crop'
          ),
          _react2.default.createElement(
            'div',
            null,
            grouped.imagetool && this.renderImageTool()
          )
        ),
        _react2.default.createElement(
          'div',
          null,
          grouped.other && this.renderFields(grouped.other)
        ),
        _react2.default.createElement(
          _default2.default,
          { onClick: this.handleEditDialogClose },
          'Close'
        )
      );
    }
  }, {
    key: 'renderField',
    value: function renderField(field) {
      var _props = this.props,
          value = _props.value,
          level = _props.level;

      var fieldValue = value && value[field.name];

      return _react2.default.createElement(_Field2.default, {
        key: field.name,
        field: field,
        value: fieldValue,
        onChange: this.handleFieldChange,
        level: level + 1
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _state3 = this.state,
          status = _state3.status,
          progress = _state3.progress,
          isAdvancedEditOpen = _state3.isAdvancedEditOpen,
          isSelectAssetOpen = _state3.isSelectAssetOpen;
      var _props2 = this.props,
          type = _props2.type,
          level = _props2.level,
          value = _props2.value;


      var fieldGroups = Object.assign({ asset: [], highlighted: [], other: [] }, (0, _groupBy3.default)(type.fields, function (field) {
        if (field.name === 'asset') {
          return 'asset';
        }
        var options = field.type.options || {};
        if (options.isHighlighted) {
          return 'highlighted';
        }
        return 'other';
      }));

      var imageUrl = this.getImageUrl();

      var isImageToolEnabled = this.isImageToolEnabled();

      var accept = (0, _get3.default)(type, 'options.accept');

      var hasAdvancedFields = fieldGroups.other.length > 0;
      var onEdit = hasAdvancedFields ? this.handleOpenAdvancedEdit : null;
      return _react2.default.createElement(
        _default6.default,
        { legend: type.title, description: type.description, level: level },
        _react2.default.createElement(
          _default4.default,
          {
            status: status,
            legend: type.title,
            level: level,
            percent: progress && progress.percent,
            onSelect: this.handleSelect,
            onCancel: this.handleCancel,
            onClear: this.handleClearValue,
            onEdit: onEdit,
            showContent: fieldGroups.highlighted.length > 0,
            multiple: false,
            accept: accept || 'image/*',
            hotspotImage: {
              hotspot: isImageToolEnabled ? value && value.hotspot : DEFAULT_HOTSPOT,
              crop: isImageToolEnabled ? value && value.crop : _constants.DEFAULT_CROP,
              imageUrl: imageUrl
            }
          },
          fieldGroups.highlighted.length > 0 && this.renderFields(fieldGroups.highlighted),
          isSelectAssetOpen && _react2.default.createElement(
            _fullscreen2.default,
            { title: 'Select image', onClose: this.handleCloseSelectAsset, isOpen: true },
            _react2.default.createElement(_SelectAsset2.default, { onSelect: this.handleSelectAsset })
          ),
          isAdvancedEditOpen && this.renderAdvancedEdit(fieldGroups.highlighted.concat(fieldGroups.other))
        ),
        _react2.default.createElement(
          _default2.default,
          { onClick: this.handleOpenSelectAsset },
          'Select from library\u2026'
        )
      );
    }
  }]);

  return ImageInput;
}(_react2.default.PureComponent);

ImageInput.propTypes = {
  type: _propTypes2.default.shape({
    name: _propTypes2.default.string.isRequired,
    fields: _propTypes2.default.array
  }),
  value: _propTypes2.default.object,
  onChange: _propTypes2.default.func,
  uploadFn: _propTypes2.default.func.isRequired,
  materializeReferenceFn: _propTypes2.default.func.isRequired,
  level: _propTypes2.default.number
};
exports.default = ImageInput;