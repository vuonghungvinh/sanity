'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _groupBy2 = require('lodash/groupBy');

var _groupBy3 = _interopRequireDefault(_groupBy2);

var _omit2 = require('lodash/omit');

var _omit3 = _interopRequireDefault(_omit2);

var _uniqueId2 = require('lodash/uniqueId');

var _uniqueId3 = _interopRequireDefault(_uniqueId2);

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _anchor = require('part:@sanity/components/buttons/anchor');

var _anchor2 = _interopRequireDefault(_anchor);

var _default = require('part:@sanity/components/buttons/default');

var _default2 = _interopRequireDefault(_default);

var _button = require('part:@sanity/components/fileinput/button');

var _button2 = _interopRequireDefault(_button);

var _default3 = require('part:@sanity/components/formfields/default');

var _default4 = _interopRequireDefault(_default3);

var _bar = require('part:@sanity/components/progress/bar');

var _bar2 = _interopRequireDefault(_bar);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _PatchEvent = require('../../PatchEvent');

var _PatchEvent2 = _interopRequireDefault(_PatchEvent);

var _FileInput = require('./styles/FileInput.css');

var _FileInput2 = _interopRequireDefault(_FileInput);

var _subscriptionManager = require('../../utils/subscriptionManager');

var _subscriptionManager2 = _interopRequireDefault(_subscriptionManager);

var _fullscreen = require('part:@sanity/components/dialogs/fullscreen');

var _fullscreen2 = _interopRequireDefault(_fullscreen);

var _Field = require('../Object/Field');

var _Field2 = _interopRequireDefault(_Field);

var _editIcon = require('part:@sanity/base/edit-icon');

var _editIcon2 = _interopRequireDefault(_editIcon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function getInitialState() {
  return {
    status: 'ready',
    error: null,
    progress: null,
    uploadingFile: null,
    materializedFile: null,
    isAdvancedEditOpen: false
  };
}

var FileInput = function (_React$PureComponent) {
  _inherits(FileInput, _React$PureComponent);

  function FileInput() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, FileInput);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = FileInput.__proto__ || Object.getPrototypeOf(FileInput)).call.apply(_ref, [this].concat(args))), _this), _this.state = getInitialState(), _this.subscriptions = (0, _subscriptionManager2.default)('upload', 'materialize'), _this._inputId = (0, _uniqueId3.default)('FileInput'), _this.handleUploadProgress = function (event) {
      if (event.type === 'progress' && event.stage === 'upload') {
        _this.setState({
          status: 'pending',
          progress: { percent: event.percent }
        });
      }

      if (event.type === 'complete') {
        _this.setRef(event.id);
        _this.setState({
          uploadingFile: null,
          status: 'complete'
        });
      }
    }, _this.handleUploadError = function (error) {
      _this.setState({
        status: 'error'
      });
    }, _this.handleUploadComplete = function () {
      _this.setState({
        status: 'complete'
      });
    }, _this.handleSelect = function (files) {
      _this.upload(files[0]);
    }, _this.handleCancel = function () {
      _this.cancelCurrent();
      _this.setState({
        status: 'cancelled',
        progress: {},
        uploadingFile: null
      });
    }, _this.handleStartAdvancedEdit = function () {
      _this.setState({ isAdvancedEditOpen: true });
    }, _this.handleStopAdvancedEdit = function (event) {
      _this.setState({ isAdvancedEditOpen: false });
    }, _this.handleFieldChange = function (event /*: PatchEvent*/, field) {
      var _this$props = _this.props,
          onChange = _this$props.onChange,
          type = _this$props.type;


      onChange(event.prefixAll(field.name).prepend((0, _PatchEvent.setIfMissing)({
        _type: type.name,
        asset: { _type: 'reference' }
      })));
    }, _this.handleRemoveButtonClick = function (event) {
      _this.props.onChange(_PatchEvent2.default.from((0, _PatchEvent.unset)()));
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(FileInput, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var value = this.props.value;

      if (value) {
        this.syncFileRef(value.asset);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.subscriptions.unsubscribe('materialize');
      // todo: fix this properly by unsubscribing to upload observable without cancelling it
      this._unmounted = true;
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var currentRef = (0, _get3.default)(this.props, 'value.asset');
      var nextRef = (0, _get3.default)(nextProps, 'value.asset');

      var shouldUpdate = currentRef !== nextRef && (0, _get3.default)(currentRef, '_ref') !== (0, _get3.default)(nextRef, '_ref');

      if (shouldUpdate) {
        this.setState((0, _omit3.default)(getInitialState(), 'materializedFile', 'uploadingFile'));
        this.cancelCurrent();
        this.syncFileRef(nextRef);
      }
    }
  }, {
    key: 'upload',
    value: function upload(file) {
      this.cancelCurrent();
      this.setState({ uploadingFile: file });

      this.subscription = this.props.upload(file).subscribe({
        next: this.handleUploadProgress,
        error: this.handleUploadError
      });
    }
  }, {
    key: 'cancelCurrent',
    value: function cancelCurrent() {
      this.subscriptions.unsubscribe('upload');
    }
  }, {
    key: 'syncFileRef',
    value: function syncFileRef(reference) {
      var _this2 = this;

      if (!reference) {
        this.setState({ materializedFile: null });
        return;
      }
      if (this.state.materializedFile && this.state.materializedFile._id === reference._id) {
        return;
      }
      var materializeReference = this.props.materializeReference;

      this.subscriptions.replace('materialize', materializeReference(reference._ref).subscribe(function (materialized) {
        _this2.setState({ materializedFile: materialized });
      }));
    }
  }, {
    key: 'setRef',
    value: function setRef(id) {
      this.props.onChange(_PatchEvent2.default.from((0, _PatchEvent.setIfMissing)({
        _type: this.props.type.name
      }), (0, _PatchEvent.set)({
        _ref: id,
        _type: 'reference'
      }, ['asset'])));
    }
  }, {
    key: 'renderAdvancedEdit',
    value: function renderAdvancedEdit(fields) {
      return _react2.default.createElement(
        _fullscreen2.default,
        { title: 'Edit details', onClose: this.handleStopAdvancedEdit, isOpen: true },
        _react2.default.createElement(
          'div',
          null,
          this.renderFields(fields)
        ),
        _react2.default.createElement(
          _default2.default,
          { onClick: this.handleStopAdvancedEdit },
          'Close'
        )
      );
    }
  }, {
    key: 'renderFields',
    value: function renderFields(fields) {
      var _this3 = this;

      return _react2.default.createElement(
        'div',
        { className: _FileInput2.default.fields },
        fields.map(function (field) {
          return _this3.renderField(field);
        })
      );
    }
  }, {
    key: 'renderField',
    value: function renderField(field) {
      var _props = this.props,
          value = _props.value,
          level = _props.level;

      var fieldValue = value && value[field.name];

      return _react2.default.createElement(_Field2.default, {
        key: field.name,
        field: field,
        value: fieldValue,
        onChange: this.handleFieldChange,
        level: level + 1
      });
    }
  }, {
    key: 'render',
    value: function render() {
      // TODO: Render additional fields
      var _state = this.state,
          status = _state.status,
          progress = _state.progress,
          uploadingFile = _state.uploadingFile,
          materializedFile = _state.materializedFile,
          isAdvancedEditOpen = _state.isAdvancedEditOpen;
      var _props2 = this.props,
          type = _props2.type,
          level = _props2.level,
          value = _props2.value;


      var progressClasses = '';

      if (status === 'complete') {
        progressClasses = _FileInput2.default.progressBarCompleted;
      } else if (status === 'pending') {
        progressClasses = _FileInput2.default.progressBar;
      } else {
        progressClasses = _FileInput2.default.progressBarIdle;
      }

      var fieldGroups = Object.assign({ asset: [], highlighted: [], other: [] }, (0, _groupBy3.default)(type.fields, function (field) {
        if (field.name === 'asset') {
          return 'asset';
        }
        var options = field.type.options || {};
        if (options.isHighlighted) {
          return 'highlighted';
        }
        return 'other';
      }));

      return _react2.default.createElement(
        _default4.default,
        { label: type.title, labelFor: this._inputId, level: level },
        _react2.default.createElement(
          'div',
          { className: _FileInput2.default.wrapper },
          _react2.default.createElement(
            'div',
            { className: progressClasses },
            (progress && uploadingFile || status === 'complete') && _react2.default.createElement(_bar2.default, {
              percent: status === 'complete' ? 100 : progress.percent,
              text: status === 'complete' ? 'Complete' : 'Uploading "' + uploadingFile.name + '"',
              showPercent: true,
              animation: true,
              completed: status === 'complete'
            })
          ),
          value && fieldGroups.highlighted.length > 0 && this.renderFields(fieldGroups.highlighted),
          materializedFile && _react2.default.createElement(
            'div',
            null,
            materializedFile.originalFilename
          ),
          materializedFile && _react2.default.createElement(
            _anchor2.default,
            { href: materializedFile.url, download: true },
            'Download'
          ),
          _react2.default.createElement(
            _button2.default,
            {
              onSelect: this.handleSelect
            },
            materializedFile ? 'Replace file…' : 'Select file…'
          ),
          value && fieldGroups.other.length > 0 && _react2.default.createElement(
            _default2.default,
            {
              icon: _editIcon2.default,
              title: 'Edit details',
              onClick: this.handleStartAdvancedEdit
            },
            'Edit\u2026'
          ),
          value && value.asset && _react2.default.createElement(
            _default2.default,
            { color: 'danger', onClick: this.handleRemoveButtonClick },
            'Remove'
          ),
          uploadingFile && _react2.default.createElement(
            _default2.default,
            {
              kind: 'simple',
              color: 'danger',
              onClick: this.handleCancel
            },
            'Cancel'
          ),
          isAdvancedEditOpen && this.renderAdvancedEdit(fieldGroups.highlighted.concat(fieldGroups.other))
        )
      );
    }
  }]);

  return FileInput;
}(_react2.default.PureComponent);

FileInput.propTypes = {
  value: _propTypes2.default.object,
  type: _propTypes2.default.object.isRequired,
  level: _propTypes2.default.number,
  onChange: _propTypes2.default.func,
  materializeReference: _propTypes2.default.func.isRequired,
  upload: _propTypes2.default.func.isRequired
};
exports.default = FileInput;