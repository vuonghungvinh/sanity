'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _FormBuilderPropTypes = require('../../FormBuilderPropTypes');

var _FormBuilderPropTypes2 = _interopRequireDefault(_FormBuilderPropTypes);

var _Field = require('./Field');

var _Field2 = _interopRequireDefault(_Field);

var _default = require('part:@sanity/components/fieldsets/default');

var _default2 = _interopRequireDefault(_default);

var _PatchEvent = require('../../PatchEvent');

var _PatchEvent2 = _interopRequireDefault(_PatchEvent);

var _isEmpty = require('../../utils/isEmpty');

var _isEmpty2 = _interopRequireDefault(_isEmpty);

var _UnknownFields = require('./UnknownFields');

var _UnknownFields2 = _interopRequireDefault(_UnknownFields);

var _Field3 = require('./styles/Field.css');

var _Field4 = _interopRequireDefault(_Field3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
// weak


var ObjectInput = function (_React$PureComponent) {
  _inherits(ObjectInput, _React$PureComponent);

  function ObjectInput() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ObjectInput);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ObjectInput.__proto__ || Object.getPrototypeOf(ObjectInput)).call.apply(_ref, [this].concat(args))), _this), _this.handleFieldChange = function (fieldEvent /*: PatchEvent*/, field) {
      var _this$props = _this.props,
          onChange = _this$props.onChange,
          type = _this$props.type,
          value = _this$props.value,
          isRoot = _this$props.isRoot;


      var event = fieldEvent.prefixAll(field.name);

      if (!isRoot) {
        event = event.prepend((0, _PatchEvent.setIfMissing)(type.name === 'object' ? {} : { _type: type.name }));
        if (value) {
          var valueTypeName = value && value._type;
          var schemaTypeName = type.name;

          if (valueTypeName && schemaTypeName === 'object') {
            // eslint-disable-line max-depth
            // The value has a _type key, but the type name from schema is 'object',
            // but _type: 'object' is implicit so we should fix it by removing it
            event = event.prepend((0, _PatchEvent.unset)(['_type']));
          } else if (schemaTypeName !== 'object' && valueTypeName !== schemaTypeName) {
            // There's a mismatch between schema type and the value _type
            // fix it by setting _type to type name defined in schema
            event = event.prepend((0, _PatchEvent.set)(schemaTypeName, ['_type']));
          }
        }
      }
      onChange(event);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ObjectInput, [{
    key: 'handleBlur',
    value: function handleBlur() {
      var _props = this.props,
          onChange = _props.onChange,
          value = _props.value;

      if ((0, _isEmpty2.default)(value)) {
        onChange(_PatchEvent2.default.from((0, _PatchEvent.unset)()));
      }
    }
  }, {
    key: 'renderField',
    value: function renderField(field, level, index) {
      if (field.type.hidden) {
        return null;
      }

      var _props2 = this.props,
          value = _props2.value,
          autoFocus = _props2.autoFocus;

      var fieldValue = value && value[field.name];

      return _react2.default.createElement(_Field2.default, {
        key: field.name,
        field: field,
        value: fieldValue,
        onChange: this.handleFieldChange,
        level: level,
        autoFocus: autoFocus && index === 0
      });
    }
  }, {
    key: 'renderFieldset',
    value: function renderFieldset(fieldset, fieldsetIndex) {
      var _this2 = this;

      var level = this.props.level;

      var columns = fieldset.options && fieldset.options.columns;
      var collapsable = fieldset.options && fieldset.options.collapsable;
      return _react2.default.createElement(
        'div',
        { key: fieldset.name, className: _Field4.default.root },
        _react2.default.createElement(
          _default2.default,
          {
            legend: fieldset.title,
            description: fieldset.description,
            level: level + 1,
            columns: columns,
            collapsable: collapsable
          },
          fieldset.fields.map(function (field, fieldIndex) {
            return _this2.renderField(field, level + 2, fieldsetIndex + fieldIndex);
          })
        )
      );
    }
  }, {
    key: 'getRenderedFields',
    value: function getRenderedFields() {
      var _this3 = this;

      var _props3 = this.props,
          type = _props3.type,
          level = _props3.level;


      if (!type.fieldsets) {
        // this is a fallback for schema types that are not parsed to be objects, but still has jsonType == 'object'
        return (type.fields || []).map(function (field, i) {
          return _this3.renderField(field, level + 1, i);
        });
      }

      return type.fieldsets.map(function (fieldset, i) {
        return fieldset.single ? _this3.renderField(fieldset.field, level + 1, i) : _this3.renderFieldset(fieldset, i);
      });
    }
  }, {
    key: 'renderUnknownFields',
    value: function renderUnknownFields() {
      var _props4 = this.props,
          value = _props4.value,
          type = _props4.type,
          onChange = _props4.onChange;

      if (!type.fields) {
        return null;
      }

      var knownFieldNames = type.fields.map(function (field) {
        return field.name;
      });
      var unknownFields = Object.keys(value || {}).filter(function (key) {
        return !key.startsWith('_') && !knownFieldNames.includes(key);
      });

      if (unknownFields.length === 0) {
        return null;
      }

      return _react2.default.createElement(_UnknownFields2.default, {
        fieldNames: unknownFields,
        value: value,
        onChange: onChange
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props5 = this.props,
          type = _props5.type,
          level = _props5.level;


      var renderedFields = this.getRenderedFields();
      var renderedUnknownFields = this.renderUnknownFields();

      if (level === 0) {
        return _react2.default.createElement(
          'div',
          null,
          renderedFields,
          renderedUnknownFields
        );
      }

      var columns = type.options && type.options.columns;
      var collapsable = type.options && type.options.collapsable;

      return _react2.default.createElement(
        _default2.default,
        {
          level: level,
          legend: type.title,
          description: type.description,
          columns: columns,
          collapsable: collapsable
        },
        renderedFields,
        renderedUnknownFields
      );
    }
  }]);

  return ObjectInput;
}(_react2.default.PureComponent);

ObjectInput.propTypes = {
  type: _FormBuilderPropTypes2.default.type,
  value: _propTypes2.default.object,
  onChange: _propTypes2.default.func,
  level: _propTypes2.default.number,
  isRoot: _propTypes2.default.bool,
  autoFocus: _propTypes2.default.bool
};
ObjectInput.defaultProps = {
  onChange: function onChange() {},

  level: 0,
  isRoot: false
};
exports.default = ObjectInput;