'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _FormBuilderPropTypes = require('../../FormBuilderPropTypes');

var _FormBuilderPropTypes2 = _interopRequireDefault(_FormBuilderPropTypes);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _default = require('part:@sanity/components/fieldsets/default');

var _default2 = _interopRequireDefault(_default);

var _FormBuilderInput = require('../../FormBuilderInput');

var _InvalidValue = require('../InvalidValue');

var _InvalidValue2 = _interopRequireDefault(_InvalidValue);

var _Member = require('../../Member');

var _Member2 = _interopRequireDefault(_Member);

var _Field = require('./styles/Field.css');

var _Field2 = _interopRequireDefault(_Field);

var _resolveTypeName = require('../../utils/resolveTypeName');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// This component renders a single type in an object type. It emits onChange events telling the owner about the name of the type
// that changed. This gives the owner an opportunity to use the same event handler function for all of its fields
var Field = function (_React$Component) {
  _inherits(Field, _React$Component);

  function Field() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Field);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Field.__proto__ || Object.getPrototypeOf(Field)).call.apply(_ref, [this].concat(args))), _this), _this.handleChange = function (event) {
      var _this$props = _this.props,
          field = _this$props.field,
          onChange = _this$props.onChange;

      if (!field.type.readOnly) {
        onChange(event, field);
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Field, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          value = _props.value,
          field = _props.field,
          level = _props.level,
          autoFocus = _props.autoFocus;


      if (typeof value !== 'undefined') {
        var expectedType = field.type.name;
        var actualType = (0, _resolveTypeName.resolveTypeName)(value);

        // todo: we should consider removing this, and not allow aliasing native types
        // + ensure custom object types always gets annotated with _type
        var isCompatible = actualType === field.type.jsonType;

        if (expectedType !== actualType && !isCompatible) {
          return _react2.default.createElement(
            _default2.default,
            { legend: field.type.title, level: level },
            _react2.default.createElement(_InvalidValue2.default, {
              value: value,
              onChange: this.handleChange,
              validTypes: [field.type.name],
              actualType: actualType
            })
          );
        }
      }

      return _react2.default.createElement(
        'div',
        { className: _Field2.default.root },
        _react2.default.createElement(
          _Member2.default,
          { path: field.name },
          _react2.default.createElement(_FormBuilderInput.FormBuilderInput, {
            value: value,
            type: field.type,
            onChange: this.handleChange,
            level: level,
            autoFocus: autoFocus
          })
        )
      );
    }
  }]);

  return Field;
}(_react2.default.Component);

Field.propTypes = {
  field: _FormBuilderPropTypes2.default.field.isRequired,
  value: _propTypes2.default.any,
  onChange: _propTypes2.default.func,
  level: _propTypes2.default.number,
  autoFocus: _propTypes2.default.bool
};
exports.default = Field;