'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Details = require('../common/Details');

var _Details2 = _interopRequireDefault(_Details);

var _default = require('part:@sanity/components/buttons/default');

var _default2 = _interopRequireDefault(_default);

var _PatchEvent = require('../../PatchEvent');

var _PatchEvent2 = _interopRequireDefault(_PatchEvent);

var _UnknownFields = require('./styles/UnknownFields.css');

var _UnknownFields2 = _interopRequireDefault(_UnknownFields);

var _activateOnFocus = require('part:@sanity/components/utilities/activate-on-focus');

var _activateOnFocus2 = _interopRequireDefault(_activateOnFocus);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var UnknownFields = function (_React$Component) {
  _inherits(UnknownFields, _React$Component);

  function UnknownFields() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, UnknownFields);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = UnknownFields.__proto__ || Object.getPrototypeOf(UnknownFields)).call.apply(_ref, [this].concat(args))), _this), _this.handleUnsetClick = function (fieldName) {
      _this.props.onChange(_PatchEvent2.default.from((0, _PatchEvent.unset)([fieldName])));
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(UnknownFields, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          fieldNames = _props.fieldNames,
          value = _props.value;

      return _react2.default.createElement(
        'div',
        { className: _UnknownFields2.default.root },
        _react2.default.createElement(
          'h2',
          { className: _UnknownFields2.default.heading },
          'Found ',
          fieldNames.length,
          ' unknown fields'
        ),
        _react2.default.createElement(
          'div',
          { className: _UnknownFields2.default.content },
          _react2.default.createElement(
            _Details2.default,
            null,
            'These are not defined in the current schema as valid fields for this value. This could mean that the field has been removed, or that someone else has added it to their own local schema that is not yet deployed.',
            fieldNames.map(function (fieldName) {
              return _react2.default.createElement(
                'div',
                { key: fieldName },
                _react2.default.createElement(
                  'h4',
                  null,
                  fieldName
                ),
                _react2.default.createElement(
                  _activateOnFocus2.default,
                  null,
                  _react2.default.createElement(
                    'pre',
                    { className: _UnknownFields2.default.inspectValue },
                    JSON.stringify(value[fieldName], null, 2)
                  )
                ),
                _react2.default.createElement(
                  _default2.default,
                  { onClick: function onClick() {
                      return _this2.handleUnsetClick(fieldName);
                    }, color: 'danger' },
                  'Unset ',
                  fieldName
                )
              );
            })
          )
        )
      );
    }
  }]);

  return UnknownFields;
}(_react2.default.Component);

exports.default = UnknownFields;