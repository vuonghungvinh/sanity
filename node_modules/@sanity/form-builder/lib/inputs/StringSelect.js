'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _FormBuilderPropTypes = require('../FormBuilderPropTypes');

var _FormBuilderPropTypes2 = _interopRequireDefault(_FormBuilderPropTypes);

var _default = require('part:@sanity/components/selects/default');

var _default2 = _interopRequireDefault(_default);

var _radio = require('part:@sanity/components/selects/radio');

var _radio2 = _interopRequireDefault(_radio);

var _PatchEvent = require('../PatchEvent');

var _PatchEvent2 = _interopRequireDefault(_PatchEvent);

var _default3 = require('part:@sanity/components/formfields/default');

var _default4 = _interopRequireDefault(_default3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EMPTY_ITEM = { title: '', value: undefined };

var StringSelect = function (_React$PureComponent) {
  _inherits(StringSelect, _React$PureComponent);

  function StringSelect() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, StringSelect);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = StringSelect.__proto__ || Object.getPrototypeOf(StringSelect)).call.apply(_ref, [this].concat(args))), _this), _this.handleChange = function (item) {
      var onChange = _this.props.onChange;


      onChange(_PatchEvent2.default.from((0, _PatchEvent.set)(typeof item === 'string' ? item : item.value)));
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(StringSelect, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          value = _props.value,
          type = _props.type,
          level = _props.level;

      // Support array of string if not objects

      var items = type.options.list;

      if (typeof items[0] === 'string') {
        items = items.map(function (item) {
          return {
            title: item,
            value: item
          };
        });
      }

      var currentItem = items.find(function (item) {
        return item.value === value;
      });

      var isRadio = type.options && type.options.layout === 'radio';
      return _react2.default.createElement(
        _default4.default,
        {
          level: level,
          label: type.title,
          description: type.description
        },
        isRadio ? _react2.default.createElement(_radio2.default, {
          name: type.name,
          legend: type.title,
          items: items,
          onChange: this.handleChange,
          value: currentItem,
          direction: type.options.direction || 'vertical'
        }) : _react2.default.createElement(_default2.default, {
          label: type.title,
          value: currentItem,
          placeholder: type.placeholder,
          onChange: this.handleChange,
          items: [EMPTY_ITEM].concat(items)
        })
      );
    }
  }]);

  return StringSelect;
}(_react2.default.PureComponent);

StringSelect.propTypes = {
  type: _FormBuilderPropTypes2.default.type.isRequired,
  level: _propTypes2.default.number.isRequired,
  value: _propTypes2.default.string,
  onChange: _propTypes2.default.func
};
StringSelect.defaultProps = {
  value: '',
  onChange: function onChange() {}
};
exports.default = StringSelect;