'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _sortBy2 = require('lodash/sortBy');

var _sortBy3 = _interopRequireDefault(_sortBy2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _dropdown = require('part:@sanity/components/buttons/dropdown');

var _dropdown2 = _interopRequireDefault(_dropdown);

var _default = require('part:@sanity/components/snackbar/default');

var _default2 = _interopRequireDefault(_default);

var _default3 = require('part:@sanity/components/dialogs/default');

var _default4 = _interopRequireDefault(_default3);

var _default5 = require('part:@sanity/components/buttons/default');

var _default6 = _interopRequireDefault(_default5);

var _default7 = require('part:@sanity/components/fieldsets/default');

var _default8 = _interopRequireDefault(_default7);

var _ItemValue = require('./ItemValue');

var _ItemValue2 = _interopRequireDefault(_ItemValue);

var _Array = require('./styles/Array.css');

var _Array2 = _interopRequireDefault(_Array);

var _humanizeList = require('humanize-list');

var _humanizeList2 = _interopRequireDefault(_humanizeList);

var _randomKey = require('./randomKey');

var _randomKey2 = _interopRequireDefault(_randomKey);

var _PatchEvent = require('../../PatchEvent');

var _PatchEvent2 = _interopRequireDefault(_PatchEvent);

var _resolveListComponents = require('./resolveListComponents');

var _resolveListComponents2 = _interopRequireDefault(_resolveListComponents);

var _resolveTypeName = require('../../utils/resolveTypeName');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*:: import type {ArrayType, ItemValue} from './typedefs'*/
/*:: import type {Uploader} from '../../sanity/uploads/typedefs'*/
/*:: import type {Type} from '../../typedefs'*/


function hasKeys(object) {
  var exclude = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  for (var key in object) {
    if (!exclude.includes(key)) {
      return true;
    }
  }
  return false;
}

function isEmpty(value /*: ?ItemValue*/) {
  return value === undefined || !hasKeys(value, ['_key', '_type', 'index']);
}

function createProtoValue(type /*: Type*/) /*: ItemValue*/ {
  if (type.jsonType !== 'object') {
    throw new Error('Invalid item type: "' + type.type + '". Default array input can only contain objects (for now)');
  }
  var key = (0, _randomKey2.default)(12);
  return type.name === 'object' ? { _key: key } : {
    _type: type.name,
    _key: key
  };
}

/*:: type UploadOption = {
  type: Type,
  uploader: Uploader
}*/
/*:: type UploadTask = {
  file: File,
  uploaderCandidates: Array<UploadOption>
}*/
/*:: type Props = {
  type: ArrayType,
  value: Array<ItemValue>,
  level: number,
  onChange: (event: PatchEvent) => void,
  resolveUploader?: (type: Type, file: File) => Uploader
}*/
/*:: type State = {
  editItemKey: ?string,
  rejected: Array<UploadTask>,
  ambiguous: Array<UploadTask>,
  isMoving: ?boolean
}*/

var ArrayInput = function (_React$Component) {
  _inherits(ArrayInput, _React$Component);

  function ArrayInput() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ArrayInput);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ArrayInput.__proto__ || Object.getPrototypeOf(ArrayInput)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      editItemKey: null,
      rejected: [],
      ambiguous: [],
      isMoving: false
    }, _this.uploadSubscriptions = {}, _this.handleRemoveItem = function (item /*: ItemValue*/) {
      _this.removeItem(item);
    }, _this.handleItemEditStop = function (item /*: ItemValue*/) {
      var itemValue = _this.getEditItem();
      if (itemValue && isEmpty(itemValue)) {
        _this.removeItem(itemValue);
      }
      _this.setState({ editItemKey: null });
    }, _this.handleItemEditStart = function (item /*: ItemValue*/) {
      _this.setState({ editItemKey: item._key });
    }, _this.handleDropDownAction = function (menuItem /*: { type: Type }*/) {
      var item = createProtoValue(menuItem.type);
      _this.append(item);
      _this.setState({ editItemKey: item._key });
    }, _this.handleAddBtnClick = function () {
      var type = _this.props.type;

      var memberType = type.of[0];
      if (!memberType) {
        throw new Error('Nothing to add');
      }
      var item = createProtoValue(memberType);
      _this.append(item);
      _this.setState({ editItemKey: item._key });
    }, _this.handlePaste = function (ev /*: SyntheticClipboardEvent<*>*/) {
      if (ev.clipboardData.files) {
        ev.preventDefault();
        ev.stopPropagation();
        if (_this.props.resolveUploader) {
          _this.uploadFiles(Array.from(ev.clipboardData.files));
        }
      }
    }, _this.handleDragOver = function (ev /*: SyntheticDragEvent<*>*/) {
      if (_this.props.resolveUploader) {
        ev.preventDefault();
        ev.stopPropagation();
      }
    }, _this.handleDrop = function (ev /*: SyntheticDragEvent<*>*/) {
      if (_this.props.resolveUploader && ev.dataTransfer.files) {
        // todo: support folders with webkitGetAsEntry
        ev.preventDefault();
        ev.stopPropagation();
        _this.uploadFiles(Array.from(ev.dataTransfer.files));
      }
    }, _this.getUploadOptions = function (file /*: File*/) /*: Array<UploadOption>*/ {
      var _this$props = _this.props,
          type = _this$props.type,
          resolveUploader = _this$props.resolveUploader;

      if (!resolveUploader) {
        return [];
      }
      return type.of.map(function (memberType) {
        var uploader = resolveUploader(memberType, file);
        return uploader && {
          type: memberType,
          uploader: uploader
        };
      }).filter(Boolean);
    }, _this.handleItemChange = function (event /*: PatchEvent*/, item /*: ItemValue*/) {
      var _this$props2 = _this.props,
          onChange = _this$props2.onChange,
          value = _this$props2.value;


      var memberType = _this.getMemberTypeOfItem(item);
      if (!memberType) {
        // eslint-disable-next-line no-console
        console.log('Could not find member type of item ', item);
        return;
      }
      if (memberType.readOnly) {
        return;
      }

      var key = item._key || (0, _randomKey2.default)(12);
      onChange(event.prefixAll({ _key: key }).prepend(item._key ? [] : (0, _PatchEvent.set)(key, [value.indexOf(item), '_key'])));
    }, _this.handleSortStart = function () {
      _this.setState({ isMoving: true });
    }, _this.handleSortEnd = function (event /*: { newIndex: number, oldIndex: number }*/) {
      _this.setState({ isMoving: false });
      var _this$props3 = _this.props,
          value = _this$props3.value,
          onChange = _this$props3.onChange;

      var item = value[event.oldIndex];
      var refItem = value[event.newIndex];

      // console.log('from %d => %d', event.oldIndex, event.newIndex, event)
      if (!item._key || !refItem._key) {
        // eslint-disable-next-line no-console
        console.error('Neither the item you are moving nor the item you are moving to have a key. Cannot continue.');
        return;
      }

      if (event.oldIndex === event.newIndex || item._key === refItem._key) {
        return;
      }

      onChange(_PatchEvent2.default.from((0, _PatchEvent.unset)([{ _key: item._key }]), (0, _PatchEvent.insert)([item], event.oldIndex > event.newIndex ? 'before' : 'after', [{ _key: refItem._key }])));
    }, _this.renderList = function () {
      var _this$props4 = _this.props,
          type = _this$props4.type,
          value = _this$props4.value;
      var isMoving = _this.state.isMoving;

      var options = type.options || {};

      var isSortable = options.sortable !== false;
      var isGrid = options.layout === 'grid';

      var _resolveListComponent = (0, _resolveListComponents2.default)(isSortable, isGrid),
          List = _resolveListComponent.List,
          Item = _resolveListComponent.Item;

      var listProps = isSortable ? {
        movingItemClass: _Array2.default.movingItem,
        onSortEnd: _this.handleSortEnd,
        onSortStart: _this.handleSortStart
      } : {};
      var listItemClassName = isMoving ? _Array2.default.listItemMute : _Array2.default.listItem;
      return _react2.default.createElement(
        List,
        _extends({
          lockToContainerEdges: true,
          className: isGrid ? undefined : _Array2.default.list,
          useDragHandle: !isGrid
        }, listProps),
        value.map(function (item, index) {
          var editItemKey = _this.state.editItemKey;

          var itemProps = isSortable ? { index: index } : {};
          return _react2.default.createElement(
            Item,
            _extends({
              key: item._key,
              className: isGrid ? _Array2.default.gridItem : listItemClassName
            }, itemProps),
            _react2.default.createElement(_ItemValue2.default, {
              type: type,
              value: item,
              onRemove: _this.handleRemoveItem,
              onChange: _this.handleItemChange,
              onEditStart: _this.handleItemEditStart,
              onEditStop: _this.handleItemEditStop,
              isEditing: editItemKey === item._key
            })
          );
        })
      );
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ArrayInput, [{
    key: 'insert',
    value: function insert(itemValue /*: ItemValue*/, position /*: 'before' | 'after'*/, atIndex /*: number*/) {
      var onChange = this.props.onChange;

      onChange(_PatchEvent2.default.from((0, _PatchEvent.setIfMissing)([]), (0, _PatchEvent.insert)([itemValue], position, [atIndex])));
    }
  }, {
    key: 'prepend',
    value: function prepend(value /*: ItemValue*/) {
      this.insert(value, 'before', 0);
    }
  }, {
    key: 'append',
    value: function append(value /*: ItemValue*/) {
      this.insert(value, 'after', -1);
    }
  }, {
    key: 'removeItem',
    value: function removeItem(item /*: ItemValue*/) {
      var _props = this.props,
          onChange = _props.onChange,
          value = _props.value;

      if (item._key === this.state.editItemKey) {
        this.setState({ editItemKey: null });
      }
      onChange(_PatchEvent2.default.from((0, _PatchEvent.unset)(item._key ? [{ _key: item._key }] : [value.indexOf(item)])));
      if (item._key in this.uploadSubscriptions) {
        this.uploadSubscriptions[item._key].unsubscribe();
      }
    }
  }, {
    key: 'renderSelectType',
    value: function renderSelectType() {
      var type = this.props.type;


      var items = type.of.map(function (memberDef, i) {
        return {
          title: memberDef.title || memberDef.type.name,
          type: memberDef
        };
      });

      return _react2.default.createElement(
        _dropdown2.default,
        { items: items, color: 'primary', onAction: this.handleDropDownAction },
        'New ',
        this.props.type.title
      );
    }
  }, {
    key: 'uploadFiles',
    value: function uploadFiles(files /*: Array<File>*/) {
      var _this2 = this;

      var tasks = files.map(function (file) {
        return {
          file: file,
          uploaderCandidates: _this2.getUploadOptions(file)
        };
      });

      var ready = tasks.filter(function (task) {
        return task.uploaderCandidates.length > 0;
      });

      var rejected = tasks.filter(function (task) {
        return task.uploaderCandidates.length === 0;
      });
      this.setState({ rejected: rejected });

      // todo: consider if we need to ask the user
      // the list of candidates is sorted by their priority and the first one is selected
      // const ambiguous = tasks
      //   .filter(task => task.uploaderCandidates.length > 1)

      ready.forEach(function (task) {
        _this2.uploadFile(task.file, (0, _sortBy3.default)(task.uploaderCandidates, function (cand) {
          return cand.uploader.priority;
        })[0]);
      });
    }
  }, {
    key: 'uploadFile',
    value: function uploadFile(file /*: File*/, uploadOption /*: UploadOption*/) {
      var onChange = this.props.onChange;
      var type = uploadOption.type,
          uploader = uploadOption.uploader;

      var item = createProtoValue(type);

      var key = item._key;
      this.append(item);

      var events$ = uploader.upload(file, type).map(function (uploadEvent) {
        return _PatchEvent2.default.from(uploadEvent.patches).prefixAll({ _key: key });
      });

      this.uploadSubscriptions = _extends({}, this.uploadSubscriptions, _defineProperty({}, key, events$.subscribe(onChange)));
    }
  }, {
    key: 'getEditItem',
    value: function getEditItem() /*: ? ItemValue*/ {
      var editItemKey = this.state.editItemKey;
      var value = this.props.value;

      return typeof editItemKey === 'number' ? value[editItemKey] : value.find(function (item) {
        return item._key === editItemKey;
      });
    }
  }, {
    key: 'getMemberTypeOfItem',
    value: function getMemberTypeOfItem(item /*: ItemValue*/) /*: ? Type*/ {
      var type = this.props.type;

      var itemTypeName = (0, _resolveTypeName.resolveTypeName)(item);
      return type.of.find(function (memberType) {
        return memberType.name === itemTypeName;
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _props2 = this.props,
          type = _props2.type,
          level = _props2.level,
          value = _props2.value;
      var _state = this.state,
          rejected = _state.rejected,
          ambiguous = _state.ambiguous;


      return _react2.default.createElement(
        _default8.default,
        {
          legend: type.title,
          description: type.description,
          level: level,
          tabIndex: '0',
          onPaste: this.handlePaste /* note: the onPaste must be on fieldset for it to work in chrome */
          , onDragOver: this.handleDragOver,
          onDrop: this.handleDrop
        },
        _react2.default.createElement(
          'div',
          { className: _Array2.default.root },
          value && value.length > 0 && _react2.default.createElement(
            'div',
            { className: _Array2.default.list },
            this.renderList()
          ),
          !type.readOnly && _react2.default.createElement(
            'div',
            { className: _Array2.default.functions },
            this.props.type.of.length === 1 && _react2.default.createElement(
              _default6.default,
              { onClick: this.handleAddBtnClick, className: _Array2.default.addButton },
              'Add'
            ),
            this.props.type.of.length > 1 && this.renderSelectType()
          )
        ),
        ambiguous.length > 0 && // not in use right now as we just pick the first uploader
        _react2.default.createElement(
          _default4.default,
          {
            isOpen: true,
            title: 'Select how to represent',
            actions: [{ title: 'Cancel' }],
            onAction: function onAction() {
              return _this3.setState({ ambiguous: [] });
            }
          },
          ambiguous.map(function (task) {
            return _react2.default.createElement(
              'div',
              { key: task.file.name },
              'The file ',
              task.file.name,
              ' can be converted to several types of content. Please select how you want to represent it:',
              _react2.default.createElement(
                'ul',
                null,
                task.uploaderCandidates.map(function (uploaderCandidate) {
                  return _react2.default.createElement(
                    'li',
                    { key: uploaderCandidate.type.name },
                    _react2.default.createElement(
                      _default6.default,
                      {
                        onClick: function onClick() {
                          _this3.uploadFile(task.file, uploaderCandidate);
                          _this3.setState({ ambiguous: ambiguous.filter(function (t) {
                              return t !== task;
                            }) });
                        }
                      },
                      'Represent as ',
                      uploaderCandidate.type.name
                    )
                  );
                })
              )
            );
          })
        ),
        rejected.length > 0 && _react2.default.createElement(
          _default2.default,
          {
            kind: 'warning',
            action: { title: 'OK' },
            onAction: function onAction() {
              return _this3.setState({ rejected: [] });
            }
          },
          'File(s) not accepted:',
          (0, _humanizeList2.default)(rejected.map(function (task) {
            return task.file.name;
          }))
        )
      );
    }
  }]);

  return ArrayInput;
}(_react2.default.Component);

exports.default = ArrayInput;