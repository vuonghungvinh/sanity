'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _ItemValue = require('./styles/ItemValue.css');

var _ItemValue2 = _interopRequireDefault(_ItemValue);

var _ConfirmButton = require('./ConfirmButton');

var _ConfirmButton2 = _interopRequireDefault(_ConfirmButton);

var _linkIcon = require('part:@sanity/base/link-icon');

var _linkIcon2 = _interopRequireDefault(_linkIcon);

var _fold = require('part:@sanity/components/edititem/fold');

var _fold2 = _interopRequireDefault(_fold);

var _popover = require('part:@sanity/components/edititem/popover');

var _popover2 = _interopRequireDefault(_popover);

var _fullscreen = require('part:@sanity/components/dialogs/fullscreen');

var _fullscreen2 = _interopRequireDefault(_fullscreen);

var _ItemForm = require('./ItemForm');

var _ItemForm2 = _interopRequireDefault(_ItemForm);

var _Member = require('../../Member');

var _Member2 = _interopRequireDefault(_Member);

var _PatchEvent = require('../../PatchEvent');

var _PatchEvent2 = _interopRequireDefault(_PatchEvent);

var _Preview = require('../../Preview');

var _Preview2 = _interopRequireDefault(_Preview);

var _sortable = require('part:@sanity/components/lists/sortable');

var _router = require('part:@sanity/base/router');

var _resolveTypeName = require('../../utils/resolveTypeName');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*:: import type {ItemValue, ArrayType} from './typedefs'*/
/*:: import type {Node} from 'react'*/
/*:: type Props = {
  type: ArrayType,
  value: ItemValue,
  level: number,
  layout: 'media' | 'default',
  onRemove: (ItemValue) => void,
  onChange: (PatchEvent, ItemValue) => void,
  onEditStart: (ItemValue) => void,
  onEditStop: (ItemValue) => void,
  isEditing: boolean
}*/

var Item = function (_React$Component) {
  _inherits(Item, _React$Component);

  function Item() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Item);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Item.__proto__ || Object.getPrototypeOf(Item)).call.apply(_ref, [this].concat(args))), _this), _this.handleRemove = function () {
      var _this$props = _this.props,
          onRemove = _this$props.onRemove,
          value = _this$props.value;

      onRemove(value);
    }, _this.handleEditStart = function () {
      var _this$props2 = _this.props,
          value = _this$props2.value,
          onEditStart = _this$props2.onEditStart;

      onEditStart(value);
    }, _this.handleEditStop = function () {
      var _this$props3 = _this.props,
          value = _this$props3.value,
          onEditStop = _this$props3.onEditStop;

      onEditStop(value);
    }, _this.handleKeyPress = function (event /*: SyntheticKeyboardEvent<*>*/) {
      var _this$props4 = _this.props,
          value = _this$props4.value,
          onEditStart = _this$props4.onEditStart;

      if (event.key === 'Enter' || event.key === ' ') {
        event.preventDefault();
        onEditStart(value);
      }
    }, _this.setElement = function (el /*: ?HTMLElement*/) {
      _this.domElement = el;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Item, [{
    key: 'getMemberType',
    value: function getMemberType() /*: ?Type*/ {
      var _props = this.props,
          value = _props.value,
          type = _props.type;

      var itemTypeName = (0, _resolveTypeName.resolveTypeName)(value);
      return type.of.find(function (memberType) {
        return memberType.name === itemTypeName;
      });
    }
  }, {
    key: 'renderEditItemForm',
    value: function renderEditItemForm(item /*: ItemValue*/) /*: Node*/ {
      var _props2 = this.props,
          type = _props2.type,
          onChange = _props2.onChange,
          onRemove = _props2.onRemove;

      var options = type.options || {};

      var memberType = this.getMemberType() || {};

      // Reset level if a full screen modal
      var level = options.editModal === 'fullscreen' ? 1 : this.props.level + 1;

      var content = _react2.default.createElement(
        _Member2.default,
        { path: { _key: item._key } },
        _react2.default.createElement(_ItemForm2.default, {
          autoFocus: true,
          itemKey: item._key,
          type: memberType,
          level: level,
          value: item,
          onChange: onChange,
          onRemove: onRemove
        })
      );

      if (options.editModal === 'fullscreen') {
        return _react2.default.createElement(
          _fullscreen2.default,
          { title: memberType.title, onClose: this.handleEditStop, isOpen: true },
          content
        );
      }

      if (options.editModal === 'fold') {
        return _react2.default.createElement(
          'div',
          { className: _ItemValue2.default.popupAnchorRelative },
          _react2.default.createElement(
            _fold2.default,
            { title: memberType.title, onClose: this.handleEditStop },
            content
          )
        );
      }

      return _react2.default.createElement(
        'div',
        { className: _ItemValue2.default.popupAnchor },
        _react2.default.createElement(
          _popover2.default,
          { onClose: this.handleEditStop, key: item._key },
          content
        )
      );
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps /*: Props*/) {
      if (this.domElement && prevProps.isEditing && !this.props.isEditing) {
        this.domElement.focus();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props3 = this.props,
          value = _props3.value,
          type = _props3.type,
          isEditing = _props3.isEditing;


      var options = type.options || {};
      var isGrid = options.layout === 'grid';
      var isSortable = options.sortable !== false;
      var previewLayout = isGrid ? 'media' : 'default';

      return _react2.default.createElement(
        'div',
        {
          className: isGrid ? _ItemValue2.default.gridItem : _ItemValue2.default.listItem,
          ref: this.setElement
        },
        _react2.default.createElement(
          'div',
          { className: _ItemValue2.default.inner },
          !isGrid && isSortable && _react2.default.createElement(_sortable.DragHandle, { className: _ItemValue2.default.dragHandle }),
          _react2.default.createElement(
            'div',
            {
              className: _ItemValue2.default.preview,
              tabIndex: 0,
              onClick: this.handleEditStart,
              onKeyPress: this.handleKeyPress
            },
            _react2.default.createElement(_Preview2.default, {
              layout: previewLayout,
              value: value,
              type: this.getMemberType()
            })
          ),
          _react2.default.createElement(
            'div',
            { className: _ItemValue2.default.functions },
            value._ref && _react2.default.createElement(
              _router.IntentLink,
              {
                className: _ItemValue2.default.linkToReference,
                intent: 'edit',
                params: { id: value._ref }
              },
              _react2.default.createElement(_linkIcon2.default, null)
            ),
            !type.readOnly && _react2.default.createElement(_ConfirmButton2.default, {
              title: 'Remove this item',
              onConfirm: this.handleRemove
            })
          )
        ),
        _react2.default.createElement(
          'div',
          {
            className: options.editModal === 'fold' ? _ItemValue2.default.editRootFold : _ItemValue2.default.editRoot
          },
          isEditing && this.renderEditItemForm(value)
        )
      );
    }
  }]);

  return Item;
}(_react2.default.Component);

exports.default = Item;