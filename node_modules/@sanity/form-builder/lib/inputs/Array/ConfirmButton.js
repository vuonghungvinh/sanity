'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _default = require('part:@sanity/components/buttons/default');

var _default2 = _interopRequireDefault(_default);

var _ConfirmButton = require('./styles/ConfirmButton.css');

var _ConfirmButton2 = _interopRequireDefault(_ConfirmButton);

var _trashIcon = require('part:@sanity/base/trash-icon');

var _trashIcon2 = _interopRequireDefault(_trashIcon);

var _popover = require('part:@sanity/components/dialogs/popover');

var _popover2 = _interopRequireDefault(_popover);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ConfirmButton = function (_React$Component) {
  _inherits(ConfirmButton, _React$Component);

  function ConfirmButton() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ConfirmButton);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ConfirmButton.__proto__ || Object.getPrototypeOf(ConfirmButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      showConfirmDialog: false
    }, _this.handleClick = function (event) {
      _this.setState({
        showConfirmDialog: true
      });
    }, _this.handleConfirmPopoverClose = function (event) {
      _this.setState({
        showConfirmDialog: false
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ConfirmButton, [{
    key: 'render',
    value: function render() {
      var showConfirmDialog = this.state.showConfirmDialog;

      var _props = this.props,
          onConfirm = _props.onConfirm,
          rest = _objectWithoutProperties(_props, ['onConfirm']);

      return _react2.default.createElement(
        _default2.default,
        _extends({}, rest, {
          tabIndex: 0,
          kind: 'simple',
          color: 'danger',
          icon: _trashIcon2.default,
          onClick: this.handleClick
        }),
        _react2.default.createElement(
          'div',
          { className: _ConfirmButton2.default.popoverAnchor },
          showConfirmDialog && _react2.default.createElement(
            _popover2.default,
            {
              color: 'danger',
              useOverlay: false,
              onClose: this.handleConfirmPopoverClose
            },
            _react2.default.createElement(
              _default2.default,
              {
                kind: 'simple',
                onClick: onConfirm,
                icon: _trashIcon2.default
              },
              'Confirm remove'
            )
          )
        )
      );
    }
  }]);

  return ConfirmButton;
}(_react2.default.Component);

ConfirmButton.propTypes = {
  children: _propTypes2.default.func,
  onConfirm: _propTypes2.default.func
};
exports.default = ConfirmButton;