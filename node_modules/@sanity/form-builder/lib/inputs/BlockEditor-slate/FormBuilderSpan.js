'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _default = require('part:@sanity/components/buttons/default');

var _default2 = _interopRequireDefault(_default);

var _popover = require('part:@sanity/components/edititem/popover');

var _popover2 = _interopRequireDefault(_popover);

var _FormBuilderInput = require('../../FormBuilderInput');

var _FormBuilderSpan = require('./styles/FormBuilderSpan.css');

var _FormBuilderSpan2 = _interopRequireDefault(_FormBuilderSpan);

var _simplePatch = require('../../simplePatch');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function isEmpty(object, ignoreKeys) {
  for (var key in object) {
    if (!ignoreKeys.includes(key)) {
      return false;
    }
  }
  return true;
}

var FormBuilderSpan = function (_React$Component) {
  _inherits(FormBuilderSpan, _React$Component);

  function FormBuilderSpan() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, FormBuilderSpan);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = FormBuilderSpan.__proto__ || Object.getPrototypeOf(FormBuilderSpan)).call.apply(_ref, [this].concat(args))), _this), _this.state = { isEditing: false, focusedAnnotationName: undefined }, _this._clickCounter = 0, _this._isMarkingText = false, _this._editorNodeRect = null, _this.destroy = function () {
      _this.props.editor.props.blockEditor.operations.removeSpan(_this.props.node);
    }, _this.isEmptyAnnotation = function (annotation) {
      return isEmpty(annotation, ['_type', '_key']);
    }, _this.handleCloseInput = function () {
      // Let it happen after focus is set in the editor (state may be out of sync)
      _this.props.editor.focus();
      setTimeout(function () {
        if (_this.state.isEditing) {
          _this.setState({ isEditing: false, focusedAnnotationName: undefined });
        }
        _this.garbageCollect();
      }, 100);
    }, _this.handleMouseDown = function () {
      _this._isMarkingText = true;
      setTimeout(function () {
        if (_this._clickCounter === 1 && !_this._isMarkingText) {
          _this.setState({ isEditing: true });
        }
        _this._clickCounter = 0;
      }, 350);
      _this._clickCounter++;
    }, _this.handleMouseUp = function () {
      _this._isMarkingText = false;
    }, _this.handleNodeClick = function () {
      var annotations = _this.getAnnotations();
      // Don't do anyting if this type doesn't have annotations.
      if (_this.props.type.annotations.length === 0) {
        return;
      }
      // Try to figure out which annotation that should be focused when user clicks the span
      var focusedAnnotationName = void 0;
      if (_this.props.type.annotations.length === 1) {
        // Only one annotation type, always focus this one
        focusedAnnotationName = _this.props.type.annotations[0].name;
      } else if (annotations && Object.keys(annotations).length === 1) {
        // Only one annotation value, focus it
        focusedAnnotationName = annotations[Object.keys(annotations)[0]]._type;
      }
      if (focusedAnnotationName) {
        _this.focusAnnotation(focusedAnnotationName);
      }
      // If no focusedAnnotationName was found, buttons to edit respective annotations will be show
    }, _this.handleAnnotationChange = function (event) {
      var name = _this.state.focusedAnnotationName;
      var annotations = _this.getAnnotations();
      var nextAnnotations = _extends({}, annotations, _defineProperty({}, name, (0, _simplePatch.applyAll)(annotations[name], event.patches)));
      var _this$props = _this.props,
          node = _this$props.node,
          editor = _this$props.editor;

      var data = _extends({}, node.data.toObject(), {
        focusedAnnotationName: _this.state.focusedAnnotationName,
        annotations: nextAnnotations
      });
      var change = editor.getState().change().setNodeByKey(node.key, { data: data });
      editor.onChange(change);
    }, _this.setRootElement = function (element) {
      _this.setState({ rootElement: element });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(FormBuilderSpan, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.setState({
        isEditing: false,
        focusedAnnotationName: this.props.node.data && this.props.node.data.get('focusedAnnotationName')
      });
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._editorNodeRect = _reactDom2.default.findDOMNode(this.props.editor).getBoundingClientRect();
      if (this.state.focusedAnnotationName) {
        this.setState({ isEditing: true });
      }
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      return nextState.isEditing !== this.state.isEditing || nextState.rootElement !== this.state.rootElement || nextState.focusedAnnotationName !== this.state.focusedAnnotationName || nextProps.state.focusOffset !== this.props.state.focusOffset || nextProps.node.data !== this.props.node.data;
    }
  }, {
    key: 'componentWillUpdate',
    value: function componentWillUpdate(nextProps, nextState) {
      // If annotations where emptied, just destroy this span (unwrap it to text actually)
      if (!nextProps.node.data.get('annotations')) {
        this.destroy();
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      // Close popover and clean up if it is unnanotated and no annotation type is in focus
      if (this.isUnannotated() && this.state.isEditing && !this.state.focusedAnnotationName) {
        this.handleCloseInput();
      }
    }
  }, {
    key: 'isUnannotated',
    value: function isUnannotated() {
      var _this2 = this;

      var annotations = this.getAnnotations();
      if (!annotations) {
        return true;
      }
      return !Object.keys(annotations).filter(function (key) {
        return !_this2.isEmptyAnnotation(annotations[key]);
      }).length === 0;
    }
  }, {
    key: 'getAnnotations',
    value: function getAnnotations() {
      return this.props.node.data.get('annotations');
    }
  }, {
    key: 'garbageCollect',
    value: function garbageCollect() {
      var _this3 = this;

      var nextAnnotations = _extends({}, this.getAnnotations());
      Object.keys(nextAnnotations).forEach(function (key) {
        if (_this3.isEmptyAnnotation(nextAnnotations[key])) {
          delete nextAnnotations[key];
        }
      });
      var _props = this.props,
          editor = _props.editor,
          node = _props.node;

      if (Object.keys(nextAnnotations).length === 0) {
        nextAnnotations = undefined;
      }
      var data = _extends({}, node.data.toObject(), {
        focusedAnnotationName: undefined,
        annotations: nextAnnotations
      });
      var change = editor.getState().change().setNodeByKey(node.key, { data: data });

      editor.onChange(change);
    }
  }, {
    key: 'focusAnnotation',
    value: function focusAnnotation(annotationName) {
      var _props2 = this.props,
          editor = _props2.editor,
          node = _props2.node;

      this.setState({ focusedAnnotationName: annotationName });
      var data = _extends({}, node.data.toObject(), {
        focusedAnnotationName: annotationName
      });
      var change = editor.getState().change().setNodeByKey(node.key, { data: data });
      editor.onChange(change);
    }

    // Open dialog when user clicks the node,
    // but support double clicks, and mark text as normal

  }, {
    key: 'renderInput',
    value: function renderInput() {
      var _this4 = this;

      var annotations = this.getAnnotations();
      var annotationTypes = this.props.type.annotations;
      var focusedAnnotationName = this.state.focusedAnnotationName;


      var style = {};
      if (this.state.rootElement) {
        var _state$rootElement$ge = this.state.rootElement.getBoundingClientRect(),
            width = _state$rootElement$ge.width,
            height = _state$rootElement$ge.height,
            left = _state$rootElement$ge.left;

        style.width = width + 'px';
        style.height = height + 'px';
        style.left = left - this._editorNodeRect.left + 'px';
        style.top = this.state.rootElement.offsetTop + height + 10 + 'px';
      }

      var annotationTypeInFocus = annotationTypes.find(function (type) {
        return type.name === focusedAnnotationName;
      });
      var focusedAnnotationKey = Object.keys(annotations).find(function (key) {
        return annotations[key]._type === focusedAnnotationName;
      });
      var annotationValue = focusedAnnotationKey && annotations && annotations[focusedAnnotationKey];
      return _react2.default.createElement(
        'span',
        { className: _FormBuilderSpan2.default.editSpanContainer, style: style },
        _react2.default.createElement(
          _popover2.default,
          {
            onClose: this.handleCloseInput
          },
          !focusedAnnotationName && Object.keys(annotations).length > 1 && _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement(
              'h3',
              null,
              'Which annotation?'
            ),
            Object.keys(annotations).map(function (annotationKey) {
              if (!annotations[annotationKey]) {
                return null;
              }
              var setFieldFunc = function setFieldFunc() {
                _this4.focusAnnotation(annotations[annotationKey]._type);
              };
              return _react2.default.createElement(
                _default2.default,
                {
                  key: 'annotationButton' + annotationKey,
                  onClick: setFieldFunc
                },
                annotationTypes.find(function (type) {
                  return type.name === annotations[annotationKey]._type;
                }).title
              );
            })
          ),
          focusedAnnotationName && _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement(_FormBuilderInput.FormBuilderInput, {
              value: annotationValue,
              type: annotationTypeInFocus,
              level: 0,
              onChange: this.handleAnnotationChange,
              autoFocus: true
            })
          )
        )
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var isEditing = this.state.isEditing;
      var attributes = this.props.attributes;

      return _react2.default.createElement(
        'span',
        _extends({}, attributes, {
          onMouseDown: this.handleMouseDown,
          onMouseUp: this.handleMouseUp,
          onClick: this.handleNodeClick,
          className: _FormBuilderSpan2.default.root,
          ref: this.setRootElement
        }),
        this.props.children,
        isEditing && this.renderInput()
      );
    }
  }]);

  return FormBuilderSpan;
}(_react2.default.Component);

FormBuilderSpan.propTypes = {
  type: _propTypes2.default.object,
  editor: _propTypes2.default.object,
  state: _propTypes2.default.object,
  attributes: _propTypes2.default.object,
  children: _propTypes2.default.node,
  node: _propTypes2.default.object
};
exports.default = FormBuilderSpan;