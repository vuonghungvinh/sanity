'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _FormBuilderPropTypes = require('../../FormBuilderPropTypes');

var _FormBuilderPropTypes2 = _interopRequireDefault(_FormBuilderPropTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ItemForm = function (_React$PureComponent) {
  _inherits(ItemForm, _React$PureComponent);

  function ItemForm() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ItemForm);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ItemForm.__proto__ || Object.getPrototypeOf(ItemForm)).call.apply(_ref, [this].concat(args))), _this), _this.handleChange = function (event) {
      var onChange = _this.props.onChange;

      onChange(event);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ItemForm, [{
    key: 'resolveInputComponent',
    value: function resolveInputComponent(type, fieldType) {
      return this.context.formBuilder.resolveInputComponent(type, fieldType);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          value = _props.value,
          type = _props.type,
          level = _props.level;


      var InputComponent = this.context.formBuilder.resolveInputComponent(type);
      if (!InputComponent) {
        return _react2.default.createElement(
          'div',
          null,
          'No input component resolved for type ',
          '"' + type.name + '"'
        );
      }

      return _react2.default.createElement(InputComponent, {
        value: value,
        type: type,
        level: level,
        onChange: this.handleChange
      });
    }
  }]);

  return ItemForm;
}(_react2.default.PureComponent);

ItemForm.propTypes = {
  type: _FormBuilderPropTypes2.default.type.isRequired,
  value: _propTypes2.default.any,
  level: _propTypes2.default.number,
  onChange: _propTypes2.default.func
};
ItemForm.contextTypes = {
  formBuilder: _propTypes2.default.object
};
exports.default = ItemForm;