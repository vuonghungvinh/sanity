'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _throttle2 = require('lodash/throttle');

var _throttle3 = _interopRequireDefault(_throttle2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _blockTools = require('@sanity/block-tools');

var _blockTools2 = _interopRequireDefault(_blockTools);

var _generateHelpUrl = require('@sanity/generate-help-url');

var _generateHelpUrl2 = _interopRequireDefault(_generateHelpUrl);

var _default = require('part:@sanity/components/formfields/default');

var _default2 = _interopRequireDefault(_default);

var _BlockEditor = require('./BlockEditor');

var _BlockEditor2 = _interopRequireDefault(_BlockEditor);

var _slate = require('slate');

var _PatchEvent = require('../../PatchEvent');

var _PatchEvent2 = _interopRequireDefault(_PatchEvent);

var _withPatchSubscriber = require('../../utils/withPatchSubscriber');

var _withPatchSubscriber2 = _interopRequireDefault(_withPatchSubscriber);

var _default3 = require('part:@sanity/components/buttons/default');

var _default4 = _interopRequireDefault(_default3);

var _Syncer = require('./styles/Syncer.css');

var _Syncer2 = _interopRequireDefault(_Syncer);

var _simplePatch = require('../../simplePatch');

var _simplePatch2 = _interopRequireDefault(_simplePatch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function deserialize(value, type) {
  return _slate.State.fromJSON(_blockTools2.default.blocksToSlateState(value, type));
}

function serialize(state, type) {
  return _blockTools2.default.slateStateToBlocks(state.toJSON({ preserveKeys: true }), type);
}

function isDocumentEqual(slateState, otherSlateState) {
  return slateState.get('document') === otherSlateState.get('document');
}

function isDeprecatedBlockSchema(type) {
  var blockType = type.of.find(function (ofType) {
    return ofType.name === 'block';
  });
  if (blockType.span !== undefined) {
    return true;
  }
  return false;
}

function isDeprecatedBlockValue(value) {
  if (!value) {
    return false;
  }
  var block = value.find(function (item) {
    return item._type === 'block';
  });
  if (block && Object.keys(block).includes('spans')) {
    return true;
  }
  return false;
}

exports.default = (0, _withPatchSubscriber2.default)((_temp = _class = function (_React$PureComponent) {
  _inherits(Syncer, _React$PureComponent);

  function Syncer(props) {
    _classCallCheck(this, Syncer);

    var _this = _possibleConstructorReturn(this, (Syncer.__proto__ || Object.getPrototypeOf(Syncer)).call(this));

    _this.handleNodePatch = function (patchEvent) {
      _this.setState(function (prevState) {
        if (prevState.isOutOfSync) {
          return prevState;
        }
        var nextValue = patchEvent.patches.reduce(function (state, patch) {
          var _patch$path = _toArray(patch.path),
              key = _patch$path[0],
              path = _patch$path.slice(1);

          var nodeValue = state.document.getDescendant(key).data.get('value');
          var change = state.change().setNodeByKey(key, {
            data: { value: (0, _simplePatch2.default)(nodeValue, _extends({}, patch, { path: path })) }
          });
          return change.state;
        }, prevState.value);

        return { value: nextValue };
      });
    };

    _this.handleChange = function (slateChange) {
      _this.setState(function (prevState) {
        return prevState.isOutOfSync ? {} : { value: slateChange.state };
      });
    };

    _this.receivePatches = function (_ref) {
      var snapshot = _ref.snapshot,
          shouldReset = _ref.shouldReset,
          patches = _ref.patches;

      if (patches.some(function (patch) {
        return patch.origin === 'remote';
      })) {
        _this.setState({ isOutOfSync: true });
      }

      if (shouldReset) {}
      // @todo
      // eslint-disable-next-line no-console
      // console.warn('[BlockEditor] Reset state due to set patch that targeted ancestor path:', patches)
      // this.setState({value: deserialize(snapshot, this.props.type)})
      // else {
      //   // console.log('TODO: Apply patches:', patches)
      // }
    };

    _this.handleSynchronize = function () {
      _this.setState({
        value: deserialize(_this.props.value, _this.props.type),
        isOutOfSync: false
      });
    };

    _this.emitSet = (0, _throttle3.default)(function () {
      var onChange = _this.props.onChange;
      // const onChange = event => console.log(event.patch.type, event.patch.value)

      var value = _this.state.value;

      var nextVal = serialize(value);

      onChange(_PatchEvent2.default.from(nextVal ? (0, _PatchEvent.set)(nextVal) : (0, _PatchEvent.unset)()));
    }, 1000, { trailing: true });

    var deprecatedSchema = isDeprecatedBlockSchema(props.type);
    var deprecatedBlockValue = isDeprecatedBlockValue(props.value);
    _this.state = {
      isOutOfSync: false,
      deprecatedSchema: deprecatedSchema,
      deprecatedBlockValue: deprecatedBlockValue,
      value: deprecatedSchema || deprecatedBlockValue ? undefined : deserialize(props.value, props.type)
    };
    _this.unsubscribe = props.subscribe(_this.receivePatches);
    return _this;
  }

  _createClass(Syncer, [{
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      // This is a defensive workaround for an issue causing content to be overwritten
      // It cancels any pending saves, so if the component gets unmounted within the
      // 1 second window, work may be lost.
      // This is by no means ideal, but preferable to overwriting content in other documents
      // Should be fixed by making the block editor "real" realtime
      this.emitSet.cancel();

      this.unsubscribe();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps, prevState) {
      var didSync = prevState.isOutOfSync && !this.state.isOutOfSync;
      if (!didSync && !isDocumentEqual(prevState.value, this.state.value)) {
        this.emitSet();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _state = this.state,
          value = _state.value,
          isOutOfSync = _state.isOutOfSync,
          deprecatedSchema = _state.deprecatedSchema,
          deprecatedBlockValue = _state.deprecatedBlockValue;

      var isDeprecated = deprecatedSchema || deprecatedBlockValue;
      var type = this.props.type;

      return _react2.default.createElement(
        'div',
        { className: _Syncer2.default.root },
        !isDeprecated && _react2.default.createElement(_BlockEditor2.default, _extends({}, this.props, {
          disabled: isOutOfSync,
          onChange: this.handleChange,
          onNodePatch: this.handleNodePatch,
          value: value
        })),
        isDeprecated && _react2.default.createElement(
          _default2.default,
          {
            label: type.title
          },
          _react2.default.createElement(
            'div',
            { className: _Syncer2.default.disabledEditor },
            _react2.default.createElement(
              'strong',
              null,
              'Heads up!'
            ),
            _react2.default.createElement(
              'p',
              null,
              'You\'re using a new version of the Studio with',
              deprecatedSchema && ' a block schema that hasn\'t been updated.',
              deprecatedSchema && deprecatedBlockValue && ' Also block text needs to be updated.',
              deprecatedBlockValue && !deprecatedSchema && ' block text that hasn\'t been updated.'
            ),
            _react2.default.createElement(
              'p',
              null,
              _react2.default.createElement(
                'a',
                {
                  href: (0, _generateHelpUrl2.default)('migrate-to-block-children'),
                  rel: 'noopener noreferrer',
                  target: '_blank'
                },
                'Read more'
              )
            )
          )
        ),
        isOutOfSync && _react2.default.createElement(
          'div',
          { className: _Syncer2.default.isOutOfSyncWarning },
          'Heads up! Someone else edited this field. Make sure to let your co-workers know that you are working on this part of the document!',
          _react2.default.createElement('br', null),
          'We\'re sorry for the inconvenience and working hard to get it working properly.',
          _react2.default.createElement(
            'p',
            null,
            _react2.default.createElement(
              _default4.default,
              { inverted: true, primary: true, onClick: this.handleSynchronize },
              'Load remote changes'
            )
          )
        )
      );
    }
  }]);

  return Syncer;
}(_react2.default.PureComponent), _class.propTypes = {
  schema: _propTypes2.default.object,
  value: _propTypes2.default.array,
  type: _propTypes2.default.object.isRequired,
  onChange: _propTypes2.default.func,
  subscribe: _propTypes2.default.func
}, _temp));