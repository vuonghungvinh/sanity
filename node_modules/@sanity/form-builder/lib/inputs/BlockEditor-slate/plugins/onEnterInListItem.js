'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

// This plugin handles enter on empty list elements, deletes it,
// and either creates a new empty default block or subleveled list block below

function createOnKeyDown(defaultBlock, callbackFn) {
  return function onKeyDown(event, data, change, editor) {
    var _change$state = change.state,
        document = _change$state.document,
        startKey = _change$state.startKey,
        startBlock = _change$state.startBlock;

    // only for key

    if (data.key !== 'enter') {
      return null;
    }

    // Only do listItem nodes
    var isList = startBlock.data.get('listItem');
    if (!isList) {
      return null;
    }

    // Return if current listItem is not empty
    if (startBlock.text !== '') {
      return null;
    }

    var previousBlock = document.getPreviousBlock(startKey);
    if (previousBlock && !previousBlock.data.get('listItem')) {
      return null;
    }

    // If on top of document
    // and no text insert a node before
    if (!previousBlock) {
      change.insertBlock(defaultBlock).focus();
      if (callbackFn) {
        callbackFn(change);
      }
      return change;
    }

    // Delete previous listItem if previous list item is empty
    if (previousBlock && previousBlock.data.get('listItem')) {
      change.deleteBackward(1);
    }

    var blockToInsert = defaultBlock;

    // If level is > 1, insert a blank list element with the sublevel below
    var level = startBlock.data.get('level') || 1;
    if (level > 1) {
      blockToInsert = _extends({}, defaultBlock, {
        data: startBlock.data.toObject()
      });
      blockToInsert.data.level = level - 1;
    }

    // Jump to next node if next node is not a listItem or a void block
    var nextBlock = document.getNextBlock(startKey);
    if (nextBlock && !nextBlock.data.get('listItem') && !nextBlock.isVoid) {
      change.collapseToStartOf(nextBlock);
    } else {
      change.insertBlock(blockToInsert).focus();
    }
    if (callbackFn) {
      callbackFn(change);
    }
    return change;
  };
}

function onEnterInListItem(defaultBlock, callbackFn) {
  return {
    onKeyDown: createOnKeyDown(defaultBlock, callbackFn)
  };
}

exports.default = onEnterInListItem;