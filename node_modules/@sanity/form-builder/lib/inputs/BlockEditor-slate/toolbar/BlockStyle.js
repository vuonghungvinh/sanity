'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.blockStyleShape = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _style = require('part:@sanity/components/selects/style');

var _style2 = _interopRequireDefault(_style);

var _BlockStyle = require('./styles/BlockStyle.css');

var _BlockStyle2 = _interopRequireDefault(_BlockStyle);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var blockStyleShape = exports.blockStyleShape = _propTypes2.default.shape({
  key: _propTypes2.default.string,
  active: _propTypes2.default.bool,
  title: _propTypes2.default.string,
  preview: _propTypes2.default.node
});

var BlockStyle = function (_React$Component) {
  _inherits(BlockStyle, _React$Component);

  function BlockStyle() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, BlockStyle);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = BlockStyle.__proto__ || Object.getPrototypeOf(BlockStyle)).call.apply(_ref, [this].concat(args))), _this), _this.renderItem = function (item) {
      return item.preview;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(BlockStyle, [{
    key: 'render',
    value: function render() {
      if (!this.props.items || this.props.items.length === 0) {
        return null;
      }
      return _react2.default.createElement(
        'label',
        { className: _BlockStyle2.default.root },
        _react2.default.createElement(
          'span',
          { style: { display: 'none' } },
          'Text'
        ),
        _react2.default.createElement(_style2.default, {
          items: this.props.items,
          value: this.props.value,
          onChange: this.props.onSelect,
          renderItem: this.renderItem,
          transparent: true
        })
      );
    }
  }]);

  return BlockStyle;
}(_react2.default.Component);

BlockStyle.propTypes = {
  value: _propTypes2.default.arrayOf(blockStyleShape),
  items: _propTypes2.default.arrayOf(blockStyleShape),
  onSelect: _propTypes2.default.func
};
exports.default = BlockStyle;