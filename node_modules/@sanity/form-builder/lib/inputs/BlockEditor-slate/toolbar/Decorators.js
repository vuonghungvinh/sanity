'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decorator = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _button = require('part:@sanity/components/toggles/button');

var _button2 = _interopRequireDefault(_button);

var _formatBoldIcon = require('part:@sanity/base/format-bold-icon');

var _formatBoldIcon2 = _interopRequireDefault(_formatBoldIcon);

var _formatItalicIcon = require('part:@sanity/base/format-italic-icon');

var _formatItalicIcon2 = _interopRequireDefault(_formatItalicIcon);

var _formatStrikethroughIcon = require('part:@sanity/base/format-strikethrough-icon');

var _formatStrikethroughIcon2 = _interopRequireDefault(_formatStrikethroughIcon);

var _formatUnderlinedIcon = require('part:@sanity/base/format-underlined-icon');

var _formatUnderlinedIcon2 = _interopRequireDefault(_formatUnderlinedIcon);

var _formatCodeIcon = require('part:@sanity/base/format-code-icon');

var _formatCodeIcon2 = _interopRequireDefault(_formatCodeIcon);

var _sanityLogoIcon = require('part:@sanity/base/sanity-logo-icon');

var _sanityLogoIcon2 = _interopRequireDefault(_sanityLogoIcon);

var _Decorators = require('./styles/Decorators.css');

var _Decorators2 = _interopRequireDefault(_Decorators);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var decorator = exports.decorator = _propTypes2.default.shape({
  active: _propTypes2.default.bool,
  type: _propTypes2.default.string
});

var Decorators = function (_React$Component) {
  _inherits(Decorators, _React$Component);

  function Decorators() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Decorators);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Decorators.__proto__ || Object.getPrototypeOf(Decorators)).call.apply(_ref, [this].concat(args))), _this), _this.renderDecoratorButton = function (item) {
      var onClick = function onClick(event) {
        _this.props.onClick(item);
      };
      var Icon = _this.getIcon(item.type);
      var title = item.type;
      title = title.charAt(0).toUpperCase() + title.slice(1);
      return _react2.default.createElement(
        _button2.default,
        {
          key: 'decoratorButton' + item.type,
          selected: !!item.active,
          onClick: onClick,
          title: title,
          className: _Decorators2.default.button
        },
        _react2.default.createElement(
          'div',
          { className: _Decorators2.default.iconContainer },
          _react2.default.createElement(Icon, null)
        )
      );
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Decorators, [{
    key: 'getIcon',
    value: function getIcon(type) {
      switch (type) {
        case 'strong':
          return _formatBoldIcon2.default;
        case 'em':
          return _formatItalicIcon2.default;
        case 'underline':
          return _formatUnderlinedIcon2.default;
        case 'strike-through':
          return _formatStrikethroughIcon2.default;
        case 'code':
          return _formatCodeIcon2.default;
        default:
          return _sanityLogoIcon2.default;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return this.props.decorators ? _react2.default.createElement(
        'div',
        { className: _Decorators2.default.root },
        this.props.decorators.map(this.renderDecoratorButton)
      ) : null;
    }
  }]);

  return Decorators;
}(_react2.default.Component);

Decorators.propTypes = {
  onClick: _propTypes2.default.func,
  decorators: _propTypes2.default.arrayOf(decorator)
};
exports.default = Decorators;