'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _button = require('part:@sanity/components/toggles/button');

var _button2 = _interopRequireDefault(_button);

var _linkIcon = require('part:@sanity/base/link-icon');

var _linkIcon2 = _interopRequireDefault(_linkIcon);

var _AnnotationButton = require('./styles/AnnotationButton.css');

var _AnnotationButton2 = _interopRequireDefault(_AnnotationButton);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AnnotationButton = function (_React$Component) {
  _inherits(AnnotationButton, _React$Component);

  function AnnotationButton() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, AnnotationButton);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = AnnotationButton.__proto__ || Object.getPrototypeOf(AnnotationButton)).call.apply(_ref, [this].concat(args))), _this), _this.handleToggleButtonClick = function () {
      _this.props.onClick(_this.props.annotation);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(AnnotationButton, [{
    key: 'render',
    value: function render() {
      var annotation = this.props.annotation;

      return _react2.default.createElement(
        _button2.default,
        {
          onClick: this.handleToggleButtonClick,
          title: annotation.type.title,
          disabled: annotation.disabled,
          selected: annotation.active,
          className: _AnnotationButton2.default.button
        },
        _react2.default.createElement(
          'div',
          { className: _AnnotationButton2.default.iconContainer },
          _react2.default.createElement(_linkIcon2.default, null)
        )
      );
    }
  }]);

  return AnnotationButton;
}(_react2.default.Component);

AnnotationButton.propTypes = {
  onClick: _propTypes2.default.func,
  annotation: _propTypes2.default.object
};
exports.default = AnnotationButton;