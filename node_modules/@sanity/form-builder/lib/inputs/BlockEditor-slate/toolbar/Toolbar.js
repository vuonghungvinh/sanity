'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Toolbar = require('./styles/Toolbar.css');

var _Toolbar2 = _interopRequireDefault(_Toolbar);

var _InsertBlocks = require('./InsertBlocks');

var _InsertBlocks2 = _interopRequireDefault(_InsertBlocks);

var _Decorators = require('./Decorators');

var _Decorators2 = _interopRequireDefault(_Decorators);

var _ListItems = require('./ListItems');

var _ListItems2 = _interopRequireDefault(_ListItems);

var _BlockStyle = require('./BlockStyle');

var _BlockStyle2 = _interopRequireDefault(_BlockStyle);

var _default = require('part:@sanity/components/buttons/default');

var _default2 = _interopRequireDefault(_default);

var _fullscreenIcon = require('part:@sanity/base/fullscreen-icon');

var _fullscreenIcon2 = _interopRequireDefault(_fullscreenIcon);

var _closeIcon = require('part:@sanity/base/close-icon');

var _closeIcon2 = _interopRequireDefault(_closeIcon);

var _AnnotationButton = require('./AnnotationButton');

var _AnnotationButton2 = _interopRequireDefault(_AnnotationButton);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Toolbar = function (_React$Component) {
  _inherits(Toolbar, _React$Component);

  function Toolbar() {
    _classCallCheck(this, Toolbar);

    return _possibleConstructorReturn(this, (Toolbar.__proto__ || Object.getPrototypeOf(Toolbar)).apply(this, arguments));
  }

  _createClass(Toolbar, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      return this.props.decorators !== nextProps.decorators || this.props.blockStyles !== nextProps.blockStyles || this.props.fullscreen !== nextProps.fullscreen || this.props.annotations !== nextProps.annotations;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          className = _props.className,
          fullscreen = _props.fullscreen,
          annotations = _props.annotations,
          decorators = _props.decorators,
          listItems = _props.listItems,
          blockStyles = _props.blockStyles,
          insertBlocks = _props.insertBlocks,
          onInsertBlock = _props.onInsertBlock,
          onMarkButtonClick = _props.onMarkButtonClick,
          onListButtonClick = _props.onListButtonClick,
          onBlockStyleChange = _props.onBlockStyleChange,
          onAnnotationButtonClick = _props.onAnnotationButtonClick,
          style = _props.style;


      return _react2.default.createElement(
        'div',
        { className: _Toolbar2.default.root + ' ' + className, style: style },
        _react2.default.createElement(
          'div',
          { className: _Toolbar2.default.blockFormatContainer },
          _react2.default.createElement(_BlockStyle2.default, { value: blockStyles.value, items: blockStyles.items, onSelect: onBlockStyleChange })
        ),
        _react2.default.createElement(
          'div',
          { className: _Toolbar2.default.canBeMinimized },
          _react2.default.createElement(
            'div',
            { className: _Toolbar2.default.formatButtons },
            decorators && decorators.length > 0 && _react2.default.createElement(
              'div',
              { className: _Toolbar2.default.decoratorContainer },
              _react2.default.createElement(_Decorators2.default, { decorators: decorators, onClick: onMarkButtonClick })
            ),
            listItems && listItems.length > 0 && _react2.default.createElement(
              'div',
              { className: _Toolbar2.default.listFormatContainer },
              _react2.default.createElement(_ListItems2.default, { listItems: listItems, onClick: onListButtonClick })
            )
          ),
          annotations && annotations.length > 0 && _react2.default.createElement(
            'div',
            { className: _Toolbar2.default.annotationsContainer },
            annotations.map(function (annotation) {
              return _react2.default.createElement(_AnnotationButton2.default, {
                key: 'annotationButton' + annotation.type.name,
                annotation: annotation, onClick: onAnnotationButtonClick
              });
            })
          )
        ),
        insertBlocks.length > 0 && _react2.default.createElement(
          'div',
          { className: _Toolbar2.default.insertContainer },
          _react2.default.createElement(_InsertBlocks2.default, { blocks: insertBlocks, onInsertBlock: onInsertBlock })
        ),
        _react2.default.createElement(
          'div',
          { className: _Toolbar2.default.fullscreenButtonContainer },
          _react2.default.createElement(_default2.default, {
            kind: 'simple',
            onClick: this.props.onFullscreenEnable,
            icon: fullscreen ? _closeIcon2.default : _fullscreenIcon2.default
          })
        )
      );
    }
  }]);

  return Toolbar;
}(_react2.default.Component);

Toolbar.propTypes = {

  className: _propTypes2.default.string,
  style: _propTypes2.default.object,

  fullscreen: _propTypes2.default.bool,

  blockStyles: _propTypes2.default.shape({
    value: _propTypes2.default.arrayOf(_BlockStyle.blockStyleShape),
    items: _propTypes2.default.arrayOf(_BlockStyle.blockStyleShape),
    onSelect: _propTypes2.default.func
  }),

  annotations: _propTypes2.default.arrayOf(_propTypes2.default.object),
  decorators: _propTypes2.default.arrayOf(_Decorators.decorator),
  insertBlocks: _propTypes2.default.arrayOf(_InsertBlocks.insertBlockShape),
  listItems: _propTypes2.default.arrayOf(_ListItems.listItem),

  onInsertBlock: _propTypes2.default.func,
  onFullscreenEnable: _propTypes2.default.func,
  onMarkButtonClick: _propTypes2.default.func,
  onListButtonClick: _propTypes2.default.func,
  onBlockStyleChange: _propTypes2.default.func,
  onAnnotationButtonClick: _propTypes2.default.func
};
exports.default = Toolbar;