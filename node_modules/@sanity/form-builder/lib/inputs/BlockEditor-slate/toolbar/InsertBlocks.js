'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.insertBlockShape = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _dropdown = require('part:@sanity/components/buttons/dropdown');

var _dropdown2 = _interopRequireDefault(_dropdown);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var insertBlockShape = exports.insertBlockShape = _propTypes2.default.shape({
  type: _propTypes2.default.object,
  title: _propTypes2.default.string
});

var InsertBlocks = function (_React$Component) {
  _inherits(InsertBlocks, _React$Component);

  function InsertBlocks() {
    _classCallCheck(this, InsertBlocks);

    return _possibleConstructorReturn(this, (InsertBlocks.__proto__ || Object.getPrototypeOf(InsertBlocks)).apply(this, arguments));
  }

  _createClass(InsertBlocks, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      return this.props.blocks !== nextProps.blocks;
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        _dropdown2.default,
        {
          items: this.props.blocks,
          onAction: this.props.onInsertBlock,
          kind: 'simple',
          origin: 'right'
        },
        'Insert'
      );
    }
  }]);

  return InsertBlocks;
}(_react2.default.Component);

InsertBlocks.propTypes = {
  onInsertBlock: _propTypes2.default.func,
  blocks: _propTypes2.default.arrayOf(insertBlockShape)
};
exports.default = InsertBlocks;