'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _FormBuilderInput = require('../../FormBuilderInput');

var _Item = require('./styles/Item.css');

var _Item2 = _interopRequireDefault(_Item);

var _default = require('part:@sanity/components/buttons/default');

var _default2 = _interopRequireDefault(_default);

var _trashIcon = require('part:@sanity/base/trash-icon');

var _trashIcon2 = _interopRequireDefault(_trashIcon);

var _PatchEvent = require('../../PatchEvent');

var _PatchEvent2 = _interopRequireDefault(_PatchEvent);

var _getEmptyValue = require('./getEmptyValue');

var _getEmptyValue2 = _interopRequireDefault(_getEmptyValue);

var _sortable = require('part:@sanity/components/lists/sortable');

var _barsIcon = require('part:@sanity/base/bars-icon');

var _barsIcon2 = _interopRequireDefault(_barsIcon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*:: import type {Type} from '../../typedefs'*/


var DragHandle = (0, _sortable.createDragHandle)(function () {
  return _react2.default.createElement(
    'span',
    { className: _Item2.default.dragHandle },
    _react2.default.createElement(_barsIcon2.default, null)
  );
});

/*:: type Props = {
  type: Type,
  onChange: PatchEvent => void,
  index: number,
  value: string | number | boolean,
  sortable: boolean,
  level: number
}*/

var Item = function (_React$PureComponent) {
  _inherits(Item, _React$PureComponent);

  function Item() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Item);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Item.__proto__ || Object.getPrototypeOf(Item)).call.apply(_ref, [this].concat(args))), _this), _this.handleRemove = function () {
      var _this$props = _this.props,
          index = _this$props.index,
          onChange = _this$props.onChange;

      onChange(_PatchEvent2.default.from((0, _PatchEvent.unset)([index])));
    }, _this.handleChange = function (patchEvent /*: PatchEvent*/) {
      var _this$props2 = _this.props,
          onChange = _this$props2.onChange,
          type = _this$props2.type,
          index = _this$props2.index;

      onChange(_PatchEvent2.default.from(patchEvent.patches.map(function (patch) {
        return (
          // Map direct unset patches to empty value instead in order to not *remove* elements as the user clears out the value
          patch.path.length === 0 && patch.type === 'unset' ? (0, _PatchEvent.set)((0, _getEmptyValue2.default)(type)) : patch
        );
      })).prefixAll(index));
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Item, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          value = _props.value,
          level = _props.level,
          type = _props.type,
          sortable = _props.sortable;

      return _react2.default.createElement(
        'div',
        { className: _Item2.default.root },
        sortable && _react2.default.createElement(DragHandle, { className: _Item2.default.dragHandle }),
        _react2.default.createElement(
          'div',
          { className: _Item2.default.input },
          _react2.default.createElement(_FormBuilderInput.FormBuilderInput, {
            value: value,
            type: type,
            onChange: this.handleChange,
            level: level
          })
        ),
        _react2.default.createElement(_default2.default, {
          kind: 'simple',
          className: _Item2.default.deleteButton,
          color: 'danger',
          icon: _trashIcon2.default,
          title: 'Delete',
          onClick: this.handleRemove
        })
      );
    }
  }]);

  return Item;
}(_react2.default.PureComponent);

exports.default = Item;