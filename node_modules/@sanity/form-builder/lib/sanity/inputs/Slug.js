'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sanitySlugify = sanitySlugify;
exports.validateSlug = validateSlug;

var _speakingurl = require('speakingurl');

var _speakingurl2 = _interopRequireDefault(_speakingurl);

var _client = require('part:@sanity/base/client');

var _client2 = _interopRequireDefault(_client);

var _index = require('../../index');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Default slugify for Sanity
function sanitySlugify(type, slugSourceText) {
  var finalize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  var maxLength = type.options && type.options.maxLength || 200;
  var slugifyOpts = { truncate: maxLength, symbols: true };
  if (slugSourceText) {
    return (0, _speakingurl2.default)(slugSourceText, slugifyOpts);
  }
  return undefined;
}

function validateSlug(type, slug, myDocId) {
  var query = void 0;
  if (myDocId) {
    query = '*[' + type.name + '.current == $slug && _id != $id]';
  } else {
    query = '*[' + type.name + '.current == $slug';
  }
  return _client2.default.fetch(query, { slug: slug, id: myDocId }).then(function (results) {
    if (results[0]) {
      var foundDocId = results[0]._id;
      return 'There is already a document (' + foundDocId + ') ' + ('in the dataset with the slug \'' + slug + '\'.');
    }
    return null;
  });
}

exports.default = _index.SlugInput.create({ validate: validateSlug, slugify: sanitySlugify });