'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _PatchEvent = require('../../PatchEvent');

var _PatchEvent2 = _interopRequireDefault(_PatchEvent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var GeopointInput = function (_React$Component) {
  _inherits(GeopointInput, _React$Component);

  function GeopointInput() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, GeopointInput);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = GeopointInput.__proto__ || Object.getPrototypeOf(GeopointInput)).call.apply(_ref, [this].concat(args))), _this), _this.handleLatChange = function (event) {
      _this.handleFieldChange('lat', event.target.value);
    }, _this.handleLonChange = function (event) {
      _this.handleFieldChange('lon', event.target.value);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(GeopointInput, [{
    key: 'handleFieldChange',
    value: function handleFieldChange(fieldName, fieldValue) {
      var _props = this.props,
          value = _props.value,
          onChange = _props.onChange;

      var nextValue = Object.assign({}, value, _defineProperty({}, fieldName, fieldValue.trim() ? Number(fieldValue) : undefined));
      onChange(_PatchEvent2.default.from((0, _PatchEvent.set)(nextValue)));
    }
  }, {
    key: 'render',
    value: function render() {
      var value = this.props.value;

      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          'h4',
          null,
          'Moop moop (e.g. a map or something)'
        ),
        'lat: ',
        _react2.default.createElement('input', { type: 'number', value: value.lat || '', onChange: this.handleLatChange }),
        'lon: ',
        _react2.default.createElement('input', { type: 'number', value: value.lon || '', onChange: this.handleLonChange })
      );
    }
  }]);

  return GeopointInput;
}(_react2.default.Component);

GeopointInput.propTypes = {
  value: _propTypes2.default.object,
  onChange: _propTypes2.default.func
};
GeopointInput.defaultProps = {
  onChange: function onChange() {},

  value: {}
};
exports.default = GeopointInput;