'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _flatten2 = require('lodash/flatten');

var _flatten3 = _interopRequireDefault(_flatten2);

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.getPreviewSnapshot = getPreviewSnapshot;
exports.search = search;

var _client = require('part:@sanity/base/client');

var _client2 = _interopRequireDefault(_client);

var _preview = require('part:@sanity/base/preview');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getPreviewSnapshot(value, referenceType) {
  return (0, _preview.observeForPreview)(value, referenceType).map(function (result) {
    return result.snapshot;
  });
}

function wrapIn() {
  var chars = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

  var _chars = _slicedToArray(chars, 2),
      _chars$ = _chars[0],
      start = _chars$ === undefined ? '' : _chars$,
      _chars$2 = _chars[1],
      end = _chars$2 === undefined ? start : _chars$2;

  return function (value) {
    return start + value + end;
  };
}

var wrapInParens = wrapIn('()');

function buildConstraintFromType(type, terms) {
  var typeConstraint = '_type == \'' + type.name + '\'';

  var stringFieldPaths = type.__unstable_searchFields || [];
  if (stringFieldPaths.length === 0) {
    return typeConstraint;
  }

  var stringFieldConstraints = (0, _flatten3.default)(stringFieldPaths.map(function (fieldPath) {
    return terms.map(function (term) {
      return fieldPath + ' match \'' + term + '*\'';
    });
  }));

  return typeConstraint + ' && (' + stringFieldConstraints.join(' || ') + ')';
}

function search(textTerm, referenceType) {

  var terms = textTerm.split(/\s+/);
  var typeConstraints = referenceType.to.map(function (type) {
    return buildConstraintFromType(type, terms);
  });

  var query = '*[!(_id in path(\'drafts.**\')) && ' + typeConstraints.map(wrapInParens).join('||') + ']';

  return _client2.default.observable.fetch(query, { term: textTerm + '*' });
}