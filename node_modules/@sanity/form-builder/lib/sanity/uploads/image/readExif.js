'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = readExif;

var _observable = require('@sanity/observable');

var _observable2 = _interopRequireDefault(_observable);

var _exifComponent = require('exif-component');

var _exifComponent2 = _interopRequireDefault(_exifComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function readFileAsArrayBuffer(file /*: File*/, length /*: number*/) {
  return new _observable2.default(function (observer) {
    /* global window */
    var reader = new window.FileReader();
    reader.onerror = function (err) {
      return observer.error(err);
    };
    reader.onload = function () {
      observer.next(reader.result);
      observer.complete();
    };
    reader.readAsArrayBuffer(length === undefined ? file : file.slice(0, length));
    return function () {
      return reader.abort();
    };
  });
}

var SKIP_EXIF_ERROR_RE = /(invalid image format)|(No exif data)/i;

// 128k should be enough for exif data according to https://github.com/mattiasw/ExifReader#tips
var EXIF_BUFFER_LENGTH = 128000;

function readExif(file /*: File*/) {
  return _observable2.default.from(readFileAsArrayBuffer(file, EXIF_BUFFER_LENGTH)).map(function (buf) {
    return (0, _exifComponent2.default)(buf);
  }).catch(function (error) {
    if (!SKIP_EXIF_ERROR_RE.test(error.message)) {
      // Exif read failed, we do not want to fail hard
      console.warn('Exif read failed, continuing anyway: ' + error.message); // eslint-disable-line no-console
    }
    return _observable2.default.of({});
  });
}