'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = uploadImage;

var _observable = require('@sanity/observable');

var _observable2 = _interopRequireDefault(_observable);

var _readExif = require('./image/readExif');

var _readExif2 = _interopRequireDefault(_readExif);

var _rotateImage = require('./image/rotateImage');

var _rotateImage2 = _interopRequireDefault(_rotateImage);

var _orient = require('./image/orient');

var _patches = require('../../utils/patches');

var _constants = require('./constants');

var _utils = require('./utils');

var _assets = require('../inputs/client-adapters/assets');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// The eslint import plugin doesn't work well with opaque types
// https://github.com/benmosher/eslint-plugin-import/issues/921
// https://github.com/gajus/eslint-plugin-flowtype/issues/260
// eslint-disable-next-line import/named
/*:: import type {UploadEvent} from './typedefs'*/
/*:: import type {OrientationId} from './image/orient'*/
/*:: import type {ObservableI} from '../../typedefs/observable'*/
/*:: type Exif = {
  orientation: OrientationId
}*/
function uploadImage(file /*: File*/) /*: ObservableI<UploadEvent>*/ {
  var upload$ = (0, _assets.uploadImageAsset)(file).filter(function (event) {
    return event.stage !== 'download';
  }).map(function (event) {
    return _extends({}, event, {
      progress: 2 + event.percent / 100 * 98
    });
  }).map(function (event) {
    if (event.type === 'complete') {
      return (0, _utils.createUploadEvent)([(0, _patches.set)({ _type: 'reference', _ref: event.asset._id }, ['asset']), (0, _patches.set)(100, [_constants.UPLOAD_STATUS_KEY, 'progress'])]);
    }
    return (0, _utils.createUploadEvent)([(0, _patches.set)(event.percent, [_constants.UPLOAD_STATUS_KEY, 'progress'])]);
  });

  var setPreviewUrl$ = (0, _readExif2.default)(file).mergeMap(function (exifData /*: Exif*/) {
    return (0, _rotateImage2.default)(file, exifData.orientation || _orient.DEFAULT_ORIENTATION);
  }).catch(function (error) {
    // eslint-disable-next-line no-console
    console.warn('Image preprocessing failed: ', error);
    // something went wrong, but continue still
    return _observable2.default.of(null);
  }).filter(Boolean).map(function (imageUrl) {
    return (0, _utils.createUploadEvent)([(0, _patches.set)(imageUrl, [_constants.UPLOAD_STATUS_KEY, 'previewImage'])]);
  });

  return _observable2.default.of((0, _utils.createInitialUploadEvent)(file)).concat(_observable2.default.from(upload$).merge(setPreviewUrl$)).concat(_observable2.default.of(_utils.CLEANUP_EVENT));
}