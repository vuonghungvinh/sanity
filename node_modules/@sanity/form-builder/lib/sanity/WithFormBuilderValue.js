'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _throttle2 = require('lodash/throttle');

var _throttle3 = _interopRequireDefault(_throttle2);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _subscriptionManager = require('../utils/subscriptionManager');

var _subscriptionManager2 = _interopRequireDefault(_subscriptionManager);

var _PatchEvent = require('../PatchEvent');

var _PatchEvent2 = _interopRequireDefault(_PatchEvent);

var _formBuilderValueStore = require('./formBuilderValueStore');

var _SanityFormBuilderContext = require('./SanityFormBuilderContext');

var _SanityFormBuilderContext2 = _interopRequireDefault(_SanityFormBuilderContext);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Provides a utility component for easy editing a value of a schema type with the form builder
// Manages server sync, mutations, etc. and passes a value + onChange to a child component
// Note: Experimental, and likely to change in the future

/*:: type State = {
  isLoading: boolean,
  isSaving: boolean,
  value: ?any,
  deletedSnapshot: ?any
}*/
/*:: type Props = {
  documentId: string,
  typeName: string,
  schema: Object,
  children: Function
}*/


function getInitialState() /*: State*/ {
  return {
    isLoading: true,
    isSaving: false,
    value: null,
    deletedSnapshot: null
  };
}

var WithFormBuilderValue = function (_React$PureComponent) {
  _inherits(WithFormBuilderValue, _React$PureComponent);

  function WithFormBuilderValue() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, WithFormBuilderValue);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = WithFormBuilderValue.__proto__ || Object.getPrototypeOf(WithFormBuilderValue)).call.apply(_ref, [this].concat(args))), _this), _this.subscriptions = (0, _subscriptionManager2.default)('documentEvents', 'commit'), _this.state = getInitialState(), _this.patchChannel = _SanityFormBuilderContext2.default.createPatchChannel(), _this.handleDocumentEvent = function (event /*: {type: string, document: any}*/) {
      switch (event.type) {
        case 'snapshot':
          {
            _this.setState({
              isLoading: false,
              value: event.document ? event.document : null
            });
            break;
          }
        case 'rebase':
          {
            _this.setState({
              value: event.document
            });
            break;
          }
        case 'mutation':
          {
            _this.handleIncomingMutationEvent(event);
            break;
          }
        case 'create':
          {
            _this.setState({
              value: event.document
            });
            break;
          }
        default:
          {
            // eslint-disable-next-line no-console
            console.log('Unhandled document event type "%s"', event.type, event);
          }
      }
    }, _this.commit = (0, _throttle3.default)(function () {
      _this.setState({ isSaving: true });
      _this.subscriptions.replace('commit', _this.document.commit().subscribe({
        next: function next() {
          // todo
        },
        error: function error(_error) {
          // todo
        },
        complete: function complete() {
          _this.setState({ isSaving: false });
        }
      }));
    }, 1000, { leading: true, trailing: true }), _this.handleChange = function (event /*: PatchEvent*/) {
      _this.document.createIfNotExists({
        _id: _this.props.documentId,
        _type: _this.props.typeName
      });
      _this.document.patch(event.patches);
      _this.commit();
    }, _this.handleDelete = function () {
      _this.document.delete();
      _this.commit();
    }, _this.handleCreate = function (document /*: any*/) {
      _this.document.create(document);
      _this.commit();
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(WithFormBuilderValue, [{
    key: 'checkoutDocument',
    value: function checkoutDocument(documentId /*: string*/) {
      this.document = (0, _formBuilderValueStore.checkout)(documentId);

      this.subscriptions.replace('documentEvents', this.document.events.subscribe({
        next: this.handleDocumentEvent
        // error: this.handleDocumentError
      }));
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.subscriptions.unsubscribeAll();
    }
  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.checkoutDocument(this.props.documentId);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps /*: Props*/) {
      if (nextProps.documentId !== this.props.documentId) {
        this.setState(getInitialState());
        this.checkoutDocument(nextProps.documentId);
      }
    }
  }, {
    key: 'handleIncomingMutationEvent',
    value: function handleIncomingMutationEvent(event /*: any*/) {
      // Broadcast incoming patches to input components that applies patches on their own
      // Note: This is *experimental* and likely to change in the near future
      this.patchChannel.receivePatches({
        patches: event.patches,
        snapshot: event.document
      });

      this.setState({
        deletedSnapshot: event.deletedSnapshot,
        value: event.document
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          typeName = _props.typeName,
          documentId = _props.documentId,
          schema = _props.schema,
          Component = _props.children;
      var _state = this.state,
          isLoading = _state.isLoading,
          isSaving = _state.isSaving,
          value = _state.value,
          deletedSnapshot = _state.deletedSnapshot;

      return _react2.default.createElement(
        _SanityFormBuilderContext2.default,
        {
          value: value,
          schema: schema,
          patchChannel: this.patchChannel
        },
        _react2.default.createElement(Component, {
          value: value,
          isLoading: isLoading,
          isSaving: isSaving,
          deletedSnapshot: deletedSnapshot,
          documentId: documentId,
          type: schema.get(typeName),
          onChange: this.handleChange,
          onDelete: this.handleDelete,
          onCreate: this.handleCreate
        })
      );
    }
  }]);

  return WithFormBuilderValue;
}(_react2.default.PureComponent);

WithFormBuilderValue.childContextTypes = {
  formBuilder: _propTypes2.default.object
};
exports.default = WithFormBuilderValue;