'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _flatten2 = require('lodash/flatten');

var _flatten3 = _interopRequireDefault(_flatten2);

var _mutator = require('@sanity/mutator');

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/*:: import type {Patch} from '../../utils/patches'*/
/*:: type GradientPatch = Object*/
/*:: type Adapter = {
  fromFormBuilder: (patches: Array<Patch>) => Array<GradientPatch>,
  toFormBuilder: (origin: string, patches: Array<GradientPatch>) => Array<Patch>
}*/


var adapter /*: Adapter*/ = {
  fromFormBuilder: function fromFormBuilder(patches) {
    return patches.map(_fromFormBuilder);
  },

  toFormBuilder: toFormBuilder
};

exports.default = adapter;

/**
 *
 * *** WARNING ***
 *
 * This function is *EXPERIMENTAL* and very likely to have bugs. It is not in real use yet, and needs
 * to be revised.
 */

function toFormBuilder(origin, patches /*: Array<GradientPatch>*/) /*: Array<Patch>*/ {
  return (0, _flatten3.default)(patches.map(function (patch) {
    return (0, _flatten3.default)(Object.keys(patch).filter(function (key) {
      return key !== 'id';
    }).map(function (type) /*: Array<Patch>*/ {
      if (type === 'unset') {
        return patch.unset.map(function (path) {
          return {
            type: 'unset',
            path: path.split('.'),
            origin: origin
          };
        });
      }
      return Object.keys(patch[type]).map(function (path) {
        if (type === 'insert') {
          var position = 'before' in patch.insert ? 'before' : 'after';
          return {
            type: 'insert',
            position: position,
            path: path.split('.'),
            items: patch[type][path],
            origin: origin
          };
        }
        if (type === 'set') {
          return {
            type: 'set',
            path: path.split('.'),
            value: patch[type][path],
            origin: origin
          };
        }
        return {
          type: type,
          path: path.split('.'),
          value: patch[type][path],
          origin: origin
        };
      });
    }));
  }));
}

function _fromFormBuilder(patch /*: Patch*/) /*: GradientPatch*/ {
  var matchPath = (0, _mutator.arrayToJSONMatchPath)(patch.path || []);
  if (patch.type === 'insert') {
    var _insert;

    var position = patch.position,
        items = patch.items;

    return {
      insert: (_insert = {}, _defineProperty(_insert, position, matchPath), _defineProperty(_insert, 'items', items), _insert)
    };
  }

  if (patch.type === 'unset') {
    return {
      unset: [matchPath]
    };
  }

  (0, _assert2.default)(patch.type, 'Missing patch type in patch ' + JSON.stringify(patch));
  if (matchPath) {
    return _defineProperty({}, patch.type, _defineProperty({}, matchPath, patch.value));
  }
  return _defineProperty({}, patch.type, patch.value);
}