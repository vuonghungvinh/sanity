'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = withDocument;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function withDocument(ComposedComponent /*: any*/) {
  var _class, _temp;

  return _temp = _class = function (_React$PureComponent) {
    _inherits(WithDocument, _React$PureComponent);

    function WithDocument(props /*: any*/, context /*: any*/) {
      _classCallCheck(this, WithDocument);

      var _this = _possibleConstructorReturn(this, (WithDocument.__proto__ || Object.getPrototypeOf(WithDocument)).call(this));

      var formBuilder = context.formBuilder;

      _this.state = { document: formBuilder.getDocument() };
      _this.unsubscribe = formBuilder.onPatch(function (_ref) {
        var snapshot = _ref.snapshot;

        // we will also receive "delete"-patches, with {snapshot: null}. Don't pass null documents.
        if (snapshot) {
          _this.setState({ document: snapshot });
        }
      });
      return _this;
    }

    _createClass(WithDocument, [{
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        this.unsubscribe();
      }
    }, {
      key: 'render',
      value: function render() {
        return _react2.default.createElement(ComposedComponent, _extends({ document: this.state.document }, this.props));
      }
    }]);

    return WithDocument;
  }(_react2.default.PureComponent), _class.displayName = 'withDocument(' + (ComposedComponent.displayName || ComposedComponent.name) + ')', _class.contextTypes = {
    formBuilder: _propTypes2.default.any
  }, _temp;
}