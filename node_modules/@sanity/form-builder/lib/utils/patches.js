'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.setIfMissing = setIfMissing;
exports.insert = insert;
exports.set = set;
exports.unset = unset;
exports.prefixPath = prefixPath;

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/*:: type KeyedSegment = {
  _key: string
}*/
/*:: export type PathSegment = string | number | KeyedSegment*/
/*:: type Path = Array<PathSegment>*/
/*:: type HasPath = {
  path: Path
}*/
/*:: type HasOrigin = {
  origin?: 'remote' | 'local'
}*/
/*:: type SetPatch = HasPath & HasOrigin & {
  type: 'set',
  value: any
}*/
/*:: type SetIfMissingPatch = HasPath & HasOrigin & {
  type: 'setIfMissing',
  value: any
}*/
/*:: type UnsetPatch = HasPath & HasOrigin & {
  type: 'unset',
}*/
/*:: type InsertPosition = 'before' | 'after'*/
/*:: type InsertPatch = HasPath & HasOrigin & {
  type: 'insert',
  position: InsertPosition,
  items: any[]
}*/
/*:: export type Patch = SetPatch | SetIfMissingPatch | UnsetPatch | InsertPatch*/
function setIfMissing(value /*: any*/) /*: SetIfMissingPatch*/ {
  var path /*: Path*/ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  return {
    type: 'setIfMissing',
    path: path,
    value: value
  };
}

function insert(items /*: any[]*/, position /*: InsertPosition*/) /*: InsertPatch*/ {
  var path /*: Path*/ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

  return {
    type: 'insert',
    path: path,
    position: position,
    items: items
  };
}

function set(value /*: any*/) /*: SetPatch*/ {
  var path /*: Path*/ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  return { type: 'set', path: path, value: value };
}

function unset() /*: UnsetPatch*/ {
  var path /*: Path*/ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  return { type: 'unset', path: path };
}

function prefixPath /*:: <T: HasPath>*/(patch /*: T*/, segment /*: PathSegment*/) /*: T*/ {
  return _extends({}, patch, {
    path: [segment].concat(_toConsumableArray(patch.path))
  });
}