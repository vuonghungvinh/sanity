'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _find2 = require('lodash/find');

var _find3 = _interopRequireDefault(_find2);

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = withPatchSubscriber;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _shallowEquals = require('shallow-equals');

var _shallowEquals2 = _interopRequireDefault(_shallowEquals);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*:: import type {Patch} from '../utils/patches'*/
/*:: declare var __DEV__: boolean*/


function isSegmentEqual(segment1, segment2) {
  var segment1Type = typeof segment1 === 'undefined' ? 'undefined' : _typeof(segment1);
  if (segment1Type !== (typeof segment2 === 'undefined' ? 'undefined' : _typeof(segment2))) {
    return false;
  }
  if (segment1Type === 'object') {
    return (0, _shallowEquals2.default)(segment1, segment2);
  }
  return segment1 === segment2;
}

function startsWith(subjectPath, checkPath) {
  if (subjectPath === checkPath) {
    return true;
  }
  if (!Array.isArray(subjectPath) || !Array.isArray(checkPath)) {
    return false;
  }
  if (subjectPath.length < checkPath.length) {
    return false;
  }
  for (var i = 0, len = checkPath.length; i < len; i++) {
    if (!isSegmentEqual(checkPath[i], subjectPath[i])) {
      return false;
    }
  }
  return true;
}

function isAncestor(path1, path2) {
  return path1.length === 0 || startsWith(path2, path1) && !startsWith(path1, path2);
}

function shouldReset(path, patches) {
  return patches.some(function (patch) {
    return isAncestor(patch.path, path) && (patch.type === 'set' || patch.type === 'unset');
  });
}

function getValueAtPath(value, path) {
  return path.reduce(function (result, segment) {
    if ((typeof segment === 'undefined' ? 'undefined' : _typeof(segment)) === 'object') {
      return (0, _find3.default)(result, segment);
    }
    return (0, _get3.default)(result, segment);
  }, value);
}

/*:: type SubscriberArg = {
  patches: Array<Patch>,
  shouldReset: boolean,
  snapshot: any
}*/
/*:: type Subscriber = (SubscriberArg) => void*/
function withPatchSubscriber(ComposedComponent /*: any*/) {
  var _class, _temp2;

  return _temp2 = _class = function (_React$Component) {
    _inherits(SubscribePatch, _React$Component);

    function SubscribePatch() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, SubscribePatch);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = SubscribePatch.__proto__ || Object.getPrototypeOf(SubscribePatch)).call.apply(_ref, [this].concat(args))), _this), _this.subscribe = function (subscriber /*: Subscriber*/) {
        return _this.context.formBuilder.onPatch(function (_ref2) {
          var snapshot = _ref2.snapshot,
              patches = _ref2.patches;


          var selfPath = _this.context.getValuePath();
          var filtered = patches.filter(function (patch) {
            return startsWith(patch.path, selfPath);
          }).map(function (patch) {
            return _extends({}, patch, { path: patch.path.slice(selfPath.length) });
          });

          subscriber({
            shouldReset: shouldReset(selfPath, patches),
            snapshot: getValueAtPath(snapshot, selfPath),
            patches: filtered
          });
        });
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(SubscribePatch, [{
      key: 'render',
      value: function render() {
        return _react2.default.createElement(ComposedComponent, _extends({}, this.props, { subscribe: this.subscribe }));
      }
    }]);

    return SubscribePatch;
  }(_react2.default.Component), _class.displayName = 'withPatches(' + (ComposedComponent.displayName || ComposedComponent.name) + ')', _class.contextTypes = {
    getValuePath: _propTypes2.default.func,
    formBuilder: _propTypes2.default.any
  }, _temp2;
}