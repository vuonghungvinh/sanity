'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = insert;

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var BEFORE = exports.BEFORE = 'before';
var AFTER = exports.AFTER = 'after';

function insert(array, position, index) {
  if (position !== BEFORE && position !== AFTER) {
    throw new Error('Invalid position "' + position + '", must be either ' + BEFORE + ' or ' + AFTER);
  }

  for (var _len = arguments.length, args = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
    args[_key - 3] = arguments[_key];
  }

  var items = flatten.apply(undefined, args);

  if (array.length === 0) {
    return items;
  }

  var len = array.length;
  var idx = Math.abs((len + index) % len) % len;

  var normalizedIdx = position === 'after' ? idx + 1 : idx;

  var copy = array.slice();
  copy.splice.apply(copy, [normalizedIdx, 0].concat(_toConsumableArray(flatten(items))));
  return copy;
}

function flatten() {
  for (var _len2 = arguments.length, values = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    values[_key2] = arguments[_key2];
  }

  return values.reduce(function (prev, item) {
    return prev.concat(item);
  }, []);
}