'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = apply;

var OPERATIONS = {
  replace: function replace(currentValue, nextValue) {
    return nextValue;
  },
  set: function set(currentValue, nextValue) {
    return nextValue;
  },
  setIfMissing: function setIfMissing(currentValue, nextValue) {
    return currentValue === undefined ? nextValue : currentValue;
  },
  unset: function unset(currentValue, nextValue) {
    return undefined;
  },
  inc: function inc(currentValue, nextValue) {
    return currentValue + nextValue;
  },
  dec: function dec(currentValue, nextValue) {
    return currentValue - nextValue;
  }
};

var SUPPORTED_PATCH_TYPES = Object.keys(OPERATIONS);

function apply(value, patch) {

  if (!SUPPORTED_PATCH_TYPES.includes(patch.type)) {
    throw new Error('Received patch of unsupported type: "' + JSON.stringify(patch.type) + '" for primitives. This is most likely a bug.');
  }

  if (patch.path.length > 0) {
    throw new Error('Cannot apply deep operations on primitive values. Received patch with type "' + patch.type + '" and path "' + patch.path.join('.') + ' that targeted the value "' + JSON.stringify(value) + '"');
  }

  return OPERATIONS[patch.type](value, patch.value);
}