'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _FormBuilderInput = require('./FormBuilderInput');

var _schema = require('@sanity/schema');

var _schema2 = _interopRequireDefault(_schema);

var _FormBuilderContext = require('./FormBuilderContext');

var _FormBuilderContext2 = _interopRequireDefault(_FormBuilderContext);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Todo: consider deprecating this in favor of <FormBuilderContext ...><FormBuilderInput .../></FormBuilderContext>
var FormBuilder = function (_React$Component) {
  _inherits(FormBuilder, _React$Component);

  function FormBuilder() {
    _classCallCheck(this, FormBuilder);

    return _possibleConstructorReturn(this, (FormBuilder.__proto__ || Object.getPrototypeOf(FormBuilder)).apply(this, arguments));
  }

  _createClass(FormBuilder, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          schema = _props.schema,
          value = _props.value,
          type = _props.type,
          onChange = _props.onChange,
          resolveInputComponent = _props.resolveInputComponent,
          resolvePreviewComponent = _props.resolvePreviewComponent,
          patchChannel = _props.patchChannel;


      if (!schema) {
        throw new TypeError('You must provide a schema to <FormBuilder (...)');
      }

      return _react2.default.createElement(
        _FormBuilderContext2.default,
        {
          schema: schema,
          value: value,
          resolveInputComponent: resolveInputComponent,
          resolvePreviewComponent: resolvePreviewComponent,
          patchChannel: patchChannel
        },
        _react2.default.createElement(_FormBuilderInput.FormBuilderInput, {
          value: value,
          type: type,
          onChange: onChange,
          level: 0,
          isRoot: true,
          autoFocus: true
        })
      );
    }
  }]);

  return FormBuilder;
}(_react2.default.Component);

FormBuilder.createPatchChannel = _FormBuilderContext2.default.createPatchChannel;
FormBuilder.propTypes = {
  value: _propTypes2.default.any,
  schema: _propTypes2.default.instanceOf(_schema2.default).isRequired,
  type: _propTypes2.default.object.isRequired,
  onChange: _propTypes2.default.func.isRequired,
  patchChannel: _propTypes2.default.shape({
    onPatch: _propTypes2.default.func
  }).isRequired,
  resolveInputComponent: _propTypes2.default.func.isRequired,
  resolvePreviewComponent: _propTypes2.default.func.isRequired
};
FormBuilder.defaultProps = {
  value: undefined
};
exports.default = FormBuilder;