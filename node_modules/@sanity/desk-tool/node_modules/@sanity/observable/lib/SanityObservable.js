'use strict';

var _require = require('rxjs/Observable'),
    Observable = _require.Observable;

var _require2 = require('rxjs/observable/of'),
    of = _require2.of;

var _require3 = require('rxjs/observable/combineLatest'),
    combineLatest = _require3.combineLatest;

var _require4 = require('rxjs/observable/forkJoin'),
    forkJoin = _require4.forkJoin;

var _require5 = require('rxjs/observable/from'),
    from = _require5.from;

var _require6 = require('rxjs/operator/map'),
    map = _require6.map;

var _require7 = require('rxjs/operator/filter'),
    filter = _require7.filter;

var _require8 = require('rxjs/operator/concat'),
    concat = _require8.concat;

var _require9 = require('rxjs/operator/reduce'),
    reduce = _require9.reduce;

var _require10 = require('rxjs/operator/scan'),
    scan = _require10.scan;

var _require11 = require('rxjs/operator/first'),
    first = _require11.first;

var _require12 = require('rxjs/operator/debounceTime'),
    debounceTime = _require12.debounceTime;

var _require13 = require('rxjs/operator/distinctUntilChanged'),
    distinctUntilChanged = _require13.distinctUntilChanged;

var _require14 = require('rxjs/operator/takeUntil'),
    takeUntil = _require14.takeUntil;

var _require15 = require('rxjs/operator/withLatestFrom'),
    withLatestFrom = _require15.withLatestFrom;

var _require16 = require('rxjs/operator/merge'),
    merge = _require16.merge;

var _require17 = require('rxjs/operator/share'),
    share = _require17.share;

var _require18 = require('rxjs/operator/mergeMap'),
    mergeMap = _require18.mergeMap;

var _require19 = require('rxjs/operator/publishReplay'),
    publishReplay = _require19.publishReplay;

var _require20 = require('rxjs/operator/catch'),
    _catch = _require20._catch;

var _require21 = require('rxjs/operator/switchMap'),
    switchMap = _require21.switchMap;

var _require22 = require('rxjs/operator/do'),
    _do = _require22._do;

var _require23 = require('rxjs/operator/concatMap'),
    concatMap = _require23.concatMap;

var _require24 = require('rxjs/operator/toPromise'),
    toPromise = _require24.toPromise;

/*
  A subset of rxjs that align as closely as possible with the current es-observable spec
*/


function SanityObservable() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  Observable.call.apply(Observable, [this].concat(args));
}

SanityObservable.prototype = Object.create(Object.assign({}, Observable.prototype));
Object.defineProperty(SanityObservable.prototype, 'constructor', {
  value: SanityObservable,
  enumerable: false,
  writable: true,
  configurable: true
});

function lift(operator) {
  var observable = new SanityObservable();
  observable.source = this;
  observable.operator = operator;
  return observable;
}

Object.assign(SanityObservable.prototype, {
  map: map,
  concat: concat,
  filter: filter,
  reduce: reduce,
  scan: scan,
  merge: merge,
  flatMap: mergeMap,
  first: first,
  mergeMap: mergeMap,
  switchMap: switchMap,
  concatMap: concatMap,
  share: share,
  publishReplay: publishReplay,
  debounceTime: debounceTime,
  distinctUntilChanged: distinctUntilChanged,
  withLatestFrom: withLatestFrom,
  takeUntil: takeUntil,
  do: _do,
  catch: _catch,
  toPromise: toPromise,
  lift: lift
});

SanityObservable.of = function SanityObservableOf() {
  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  return new SanityObservable(function (observer) {
    return of.apply(undefined, args).subscribe(observer);
  });
};

SanityObservable.from = function SanityObservableFrom() {
  for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    args[_key3] = arguments[_key3];
  }

  return new SanityObservable(function (observer) {
    return from.apply(undefined, args).subscribe(observer);
  });
};

SanityObservable.forkJoin = function SanityObservableForkJoin() {
  for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
    args[_key4] = arguments[_key4];
  }

  return new SanityObservable(function (observer) {
    return forkJoin.apply(undefined, args).subscribe(observer);
  });
};
SanityObservable.combineLatest = function SanityObservableCombineLatest() {
  for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
    args[_key5] = arguments[_key5];
  }

  return new SanityObservable(function (observer) {
    return combineLatest.apply(undefined, args).subscribe(observer);
  });
};

module.exports = SanityObservable;