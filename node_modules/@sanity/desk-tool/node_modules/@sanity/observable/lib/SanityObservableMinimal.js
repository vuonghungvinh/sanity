'use strict';

var _require = require('rxjs/Observable'),
    Observable = _require.Observable;

var _require2 = require('rxjs/operator/map'),
    map = _require2.map;

var _require3 = require('rxjs/operator/filter'),
    filter = _require3.filter;

var _require4 = require('rxjs/operator/reduce'),
    reduce = _require4.reduce;

var _require5 = require('rxjs/operator/toPromise'),
    toPromise = _require5.toPromise;

var assign = require('object-assign');

/*
 A minimal rxjs based observable that align as closely as possible with the current es-observable spec,
 without the static factory methods
 */
function SanityObservableMinimal() {
  Observable.apply(this, arguments); // eslint-disable-line prefer-rest-params
}

SanityObservableMinimal.prototype = Object.create(assign(Object.create(null), Observable.prototype));
Object.defineProperty(SanityObservableMinimal.prototype, 'constructor', {
  value: SanityObservableMinimal,
  enumerable: false,
  writable: true,
  configurable: true
});

SanityObservableMinimal.prototype.lift = function lift(operator) {
  var observable = new SanityObservableMinimal();
  observable.source = this;
  observable.operator = operator;
  return observable;
};

SanityObservableMinimal.prototype.map = map;
SanityObservableMinimal.prototype.filter = filter;
SanityObservableMinimal.prototype.reduce = reduce;
SanityObservableMinimal.prototype.toPromise = toPromise;

module.exports = SanityObservableMinimal;