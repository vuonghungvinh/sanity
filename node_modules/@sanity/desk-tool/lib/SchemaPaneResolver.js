'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _dataAspects = require('./utils/dataAspects');

var _dataAspects2 = _interopRequireDefault(_dataAspects);

var _schema = require('part:@sanity/base/schema');

var _schema2 = _interopRequireDefault(_schema);

var _SchemaPaneResolver = require('./styles/SchemaPaneResolver.css');

var _SchemaPaneResolver2 = _interopRequireDefault(_SchemaPaneResolver);

var _TypePane = require('./pane/TypePane');

var _TypePane2 = _interopRequireDefault(_TypePane);

var _DocumentsPane = require('./pane/DocumentsPane');

var _DocumentsPane2 = _interopRequireDefault(_DocumentsPane);

var _EditorWrapper = require('./pane/EditorWrapper');

var _EditorWrapper2 = _interopRequireDefault(_EditorWrapper);

var _GetStarted = require('./GetStarted');

var _GetStarted2 = _interopRequireDefault(_GetStarted);

var _splitController = require('part:@sanity/components/panes/split-controller');

var _splitController2 = _interopRequireDefault(_splitController);

var _splitPaneWrapper = require('part:@sanity/components/panes/split-pane-wrapper');

var _splitPaneWrapper2 = _interopRequireDefault(_splitPaneWrapper);

var _default = require('part:@sanity/components/snackbar/default');

var _default2 = _interopRequireDefault(_default);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TYPE_ITEMS = _dataAspects2.default.getInferredTypes().map(function (typeName) {
  return {
    key: typeName,
    name: typeName,
    title: _dataAspects2.default.getDisplayName(typeName)
  };
});

var SchemaPaneResolver = function (_React$Component) {
  _inherits(SchemaPaneResolver, _React$Component);

  function SchemaPaneResolver() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, SchemaPaneResolver);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = SchemaPaneResolver.__proto__ || Object.getPrototypeOf(SchemaPaneResolver)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      collapsedPanes: []
    }, _this.handleToggleDocumentsPaneMenu = function () {
      _this.setState({
        documentPaneMenuIsOpen: !_this.state.documentPaneMenuIsOpen
      });
    }, _this.handleCloseDocumentsPaneMenu = function () {
      _this.setState({
        documentPaneMenuIsOpen: false
      });
    }, _this.handleShouldCollapse = function (pane) {
      var collapsedPanes = _this.state.collapsedPanes;
      collapsedPanes.push(pane.props.paneId);
      _this.setState({
        collapsedPanes: collapsedPanes
      });
    }, _this.handleShouldExpand = function (pane) {
      _this.setState({
        collapsedPanes: _this.state.collapsedPanes.filter(function (p) {
          return p !== pane.props.paneId;
        }) //eslint-disable-line id-length
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(SchemaPaneResolver, [{
    key: 'render',
    value: function render() {
      var router = this.props.router;
      var collapsedPanes = this.state.collapsedPanes;
      var _router$state = router.state,
          selectedType = _router$state.selectedType,
          selectedDocumentId = _router$state.selectedDocumentId,
          action = _router$state.action;

      var schemaType = _schema2.default.get(router.state.selectedType);

      if (TYPE_ITEMS.length === 0) {
        return _react2.default.createElement(_GetStarted2.default, null);
      }

      return _react2.default.createElement(
        'div',
        { className: _SchemaPaneResolver2.default.container },
        _react2.default.createElement(
          _splitController2.default,
          {
            onSholdCollapse: this.handleShouldCollapse,
            onSholdExpand: this.handleShouldExpand
          },
          _react2.default.createElement(
            _splitPaneWrapper2.default,
            {
              defaultWidth: 200,
              minWidth: 100,
              paneId: 'typePane',
              isCollapsed: !!collapsedPanes.find(function (pane) {
                return pane === 'typePane';
              })
            },
            _react2.default.createElement(_TypePane2.default, {
              isCollapsed: !!collapsedPanes.find(function (pane) {
                return pane === 'typePane';
              }),
              title: 'Content',
              paneId: 'typePane',
              items: TYPE_ITEMS,
              router: router,
              onExpand: this.handleShouldExpand,
              onCollapse: this.handleShouldCollapse
            })
          ),
          schemaType && selectedType && _react2.default.createElement(
            _splitPaneWrapper2.default,
            {
              defaultWidth: 300,
              minWidth: 100,
              maxWidth: 400,
              paneId: 'documentsPane',
              isCollapsed: !!collapsedPanes.find(function (pane) {
                return pane === 'documentsPane';
              })
            },
            _react2.default.createElement(_DocumentsPane2.default, {
              isCollapsed: !!collapsedPanes.find(function (pane) {
                return pane === 'documentsPane';
              }),
              selectedType: selectedType,
              title: _dataAspects2.default.getDisplayName(selectedType) || 'Untitled',
              selectedDocumentId: selectedDocumentId,
              schemaType: schemaType,
              router: router,
              paneId: 'documentsPane',
              onExpand: this.handleShouldExpand,
              onCollapse: this.handleShouldCollapse
            })
          ),
          schemaType && selectedDocumentId && action === 'edit' && _react2.default.createElement(
            _splitPaneWrapper2.default,
            null,
            _react2.default.createElement(_EditorWrapper2.default, {
              key: selectedDocumentId,
              documentId: selectedDocumentId,
              typeName: schemaType.name,
              schemaType: schemaType
            })
          ),
          selectedType && !schemaType && _react2.default.createElement(
            _splitPaneWrapper2.default,
            null,
            _react2.default.createElement(
              'h2',
              { className: _SchemaPaneResolver2.default.emptyText },
              'Could not find any type named ',
              _react2.default.createElement(
                'strong',
                null,
                _react2.default.createElement(
                  'em',
                  null,
                  selectedType
                )
              ),
              ' in schema ',
              _react2.default.createElement(
                'strong',
                null,
                _react2.default.createElement(
                  'em',
                  null,
                  _schema2.default.name
                )
              ),
              '\u2026'
            )
          )
        ),
        selectedType && schemaType && action && action !== 'edit' &&
        // this would normally never happen
        _react2.default.createElement(
          _default2.default,
          { kind: 'error' },
          'Invalid action: ',
          action
        )
      );
    }
  }]);

  return SchemaPaneResolver;
}(_react2.default.Component);

SchemaPaneResolver.propTypes = {
  router: _propTypes2.default.shape({
    state: _propTypes2.default.object
  }).isRequired
};
exports.default = SchemaPaneResolver;