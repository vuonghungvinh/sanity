'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _omit2 = require('lodash/omit');

var _omit3 = _interopRequireDefault(_omit2);

var _isObject2 = require('lodash/isObject');

var _isObject3 = _interopRequireDefault(_isObject2);

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = copyDocument;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function copyReference(reference) {
  return Object.assign({}, reference);
}

function copyObject(object) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  return Object.keys(object).reduce(function (copy, key) {
    copy[key] = copyAny(object[key], options);
    return copy;
  }, {});
}

function copyArray(array) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  return array.map(function (item) {
    return copyAny(item, options);
  }).filter(Boolean);
}

var COPY_AS_IS = ['number', 'string', 'boolean'];

function isReference(value) {
  return value._type === 'reference'
  // should not happen as all references should have _type === 'reference'
  || !('_type' in value) && '_ref' in value;
}

function copyAny(value, options) {
  if (Array.isArray(value)) {
    return copyArray(value, options);
  }
  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
  if (COPY_AS_IS.includes(type)) {
    return value;
  }
  if (!value) {
    return value;
  }

  if ((0, _isObject3.default)(value)) {
    if (isReference(value)) {
      return options.excludeReferences ? undefined : copyReference(value);
    }
    return copyObject(value, options);
  }
  return value;
}

function copyDocument(doc) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  return copyAny((0, _omit3.default)(doc, '_id'), options);
}