'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _debounce2 = require('lodash/debounce');

var _debounce3 = _interopRequireDefault(_debounce2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;
// Connects the FormBuilder with various sanity roles


var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _spinner = require('part:@sanity/components/loading/spinner');

var _spinner2 = _interopRequireDefault(_spinner);

var _default = require('part:@sanity/components/buttons/default');

var _default2 = _interopRequireDefault(_default);

var _formBuilder = require('part:@sanity/form-builder');

var _formBuilder2 = _interopRequireDefault(_formBuilder);

var _ConfirmPublish = require('../components/ConfirmPublish');

var _ConfirmPublish2 = _interopRequireDefault(_ConfirmPublish);

var _ConfirmDiscard = require('../components/ConfirmDiscard');

var _ConfirmDiscard2 = _interopRequireDefault(_ConfirmDiscard);

var _ConfirmDelete = require('../components/ConfirmDelete');

var _ConfirmDelete2 = _interopRequireDefault(_ConfirmDelete);

var _ConfirmUnpublish = require('../components/ConfirmUnpublish');

var _ConfirmUnpublish2 = _interopRequireDefault(_ConfirmUnpublish);

var _InspectView = require('../components/InspectView');

var _InspectView2 = _interopRequireDefault(_InspectView);

var _router = require('part:@sanity/base/router');

var _trashIcon = require('part:@sanity/base/trash-icon');

var _trashIcon2 = _interopRequireDefault(_trashIcon);

var _undoIcon = require('part:@sanity/base/undo-icon');

var _undoIcon2 = _interopRequireDefault(_undoIcon);

var _visibilityOffIcon = require('part:@sanity/base/visibility-off-icon');

var _visibilityOffIcon2 = _interopRequireDefault(_visibilityOffIcon);

var _binaryIcon = require('part:@sanity/base/binary-icon');

var _binaryIcon2 = _interopRequireDefault(_binaryIcon);

var _Editor = require('./styles/Editor.css');

var _Editor2 = _interopRequireDefault(_Editor);

var _copyDocument = require('../utils/copyDocument');

var _copyDocument2 = _interopRequireDefault(_copyDocument);

var _default3 = require('part:@sanity/components/menus/default');

var _default4 = _interopRequireDefault(_default3);

var _contentCopyIcon = require('part:@sanity/base/content-copy-icon');

var _contentCopyIcon2 = _interopRequireDefault(_contentCopyIcon);

var _document = require('part:@sanity/base/datastore/document');

var _document2 = _interopRequireDefault(_document);

var _schema = require('part:@sanity/base/schema');

var _schema2 = _interopRequireDefault(_schema);

var _draftUtils = require('../utils/draftUtils');

var _TimeAgo = require('../components/TimeAgo');

var _TimeAgo2 = _interopRequireDefault(_TimeAgo);

var _preview = require('part:@sanity/base/preview');

var _default5 = require('part:@sanity/components/panes/default');

var _default6 = _interopRequireDefault(_default5);

var _afterEditorComponent = require('all:part:@sanity/desk-tool/after-editor-component');

var _afterEditorComponent2 = _interopRequireDefault(_afterEditorComponent);

var _syncIcon = require('part:@sanity/base/sync-icon');

var _syncIcon2 = _interopRequireDefault(_syncIcon);

var _checkIcon = require('part:@sanity/base/check-icon');

var _checkIcon2 = _interopRequireDefault(_checkIcon);

var _default7 = require('part:@sanity/components/snackbar/default');

var _default8 = _interopRequireDefault(_default7);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var preventDefault = function preventDefault(ev) {
  return ev.preventDefault();
};

// Want a nicer api for listen/unlisten
function listen(target, eventType, callback) {
  var useCapture = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

  target.addEventListener(eventType, callback, useCapture);
  return function unlisten() {
    target.removeEventListener(eventType, callback, useCapture);
  };
}

var getDuplicateItem = function getDuplicateItem(draft, published) {
  return {
    action: 'duplicate',
    title: 'Duplicate',
    icon: _contentCopyIcon2.default,
    divider: true,
    isDisabled: !draft && !published
  };
};

var getDiscardItem = function getDiscardItem(draft, published) {
  return {
    action: 'discard',
    title: 'Discard changes…',
    icon: _undoIcon2.default,
    isDisabled: !draft || !published
  };
};

var getUnpublishItem = function getUnpublishItem(draft, published) {
  return {
    action: 'unpublish',
    title: 'Unpublish…',
    icon: _visibilityOffIcon2.default,
    divider: true,
    isDisabled: !published
  };
};

var getDeleteItem = function getDeleteItem(draft, published) {
  return {
    action: 'delete',
    title: 'Delete…',
    icon: _trashIcon2.default,
    divider: true,
    danger: true,
    isDisabled: !draft && !published
  };
};

var getInspectItem = function getInspectItem(draft, published) {
  return {
    action: 'inspect',
    title: _react2.default.createElement(
      'span',
      null,
      'Inspect ',
      _react2.default.createElement(
        'code',
        { className: _Editor2.default.hotkey },
        'Ctrl+Alt+I'
      )
    ),
    icon: _binaryIcon2.default,
    divider: true,
    isDisabled: !(draft || published)
  };
};

var getMenuItems = function getMenuItems(draft, published) {
  return [getDiscardItem, getUnpublishItem, getDuplicateItem, getDeleteItem, getInspectItem].map(function (fn) {
    return fn(draft, published);
  }).filter(Boolean);
};

var INITIAL_STATE = {
  inspect: false,
  isMenuOpen: false,
  isCreatingDraft: false,
  showSavingStatus: false,
  showConfirmPublish: false,
  showConfirmDiscard: false,
  showConfirmDelete: false,
  showConfirmUnpublish: false
};

function getToggleKeyState(event) {
  if (event.ctrlKey && event.code === 'KeyI' && event.altKey && !event.shiftKey) {
    return 'inspect';
  }

  if (event.ctrlKey && event.code === 'KeyP' && event.altKey && !event.shiftKey) {
    return 'showConfirmPublish';
  }

  return undefined;
}

exports.default = (0, _router.withRouterHOC)((_temp2 = _class = function (_React$PureComponent) {
  _inherits(Editor, _React$PureComponent);

  function Editor() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Editor);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Editor.__proto__ || Object.getPrototypeOf(Editor)).call.apply(_ref, [this].concat(args))), _this), _this.state = INITIAL_STATE, _this.setSavingStatus = (0, _debounce3.default)(function () {
      _this.setState({
        showSavingStatus: false
      });
    }, 1500, { trailing: true }), _this.handleCreateCopy = function () {
      var _this$props = _this.props,
          router = _this$props.router,
          draft = _this$props.draft,
          published = _this$props.published;

      _document2.default.create((0, _draftUtils.newDraftFrom)((0, _copyDocument2.default)(draft || published))).subscribe(function (copied) {
        router.navigate(_extends({}, router.state, { action: 'edit', selectedDocumentId: (0, _draftUtils.getPublishedId)(copied._id) }));
      });
    }, _this.handleEditAsActualType = function () {
      var _this$props2 = _this.props,
          router = _this$props2.router,
          draft = _this$props2.draft,
          published = _this$props2.published;

      var actualTypeName = draft._type || published._type;
      router.navigate(_extends({}, router.state, {
        selectedType: actualTypeName,
        action: 'edit'
      }));
    }, _this.handleChange = function (changeEvent) {
      var onChange = _this.props.onChange;

      onChange(changeEvent);
    }, _this.handleRestore = function () {
      var deletedSnapshot = _this.props.deletedSnapshot;

      _this.props.onCreate(deletedSnapshot);
    }, _this.handleMenuToggle = function () {
      _this.setState({
        isMenuOpen: !_this.state.isMenuOpen
      });
    }, _this.handleMenuClose = function () {
      _this.setState({
        isMenuOpen: false
      });
    }, _this.handlePublishButtonClick = function () {
      _this.setState({ showConfirmPublish: true });
    }, _this.handleCancelConfirmPublish = function () {
      _this.setState({ showConfirmPublish: false });
    }, _this.handleCancelUnpublish = function () {
      _this.setState({ showConfirmUnpublish: false });
    }, _this.handleCancelDelete = function () {
      _this.setState({ showConfirmDelete: false });
    }, _this.handleCancelDiscard = function () {
      _this.setState({ showConfirmDiscard: false });
    }, _this.handleConfirmPublish = function () {
      var _this$props3 = _this.props,
          onPublish = _this$props3.onPublish,
          draft = _this$props3.draft;

      onPublish(draft);
      _this.setState({ showConfirmPublish: false });
    }, _this.handleConfirmUnpublish = function () {
      var onUnpublish = _this.props.onUnpublish;

      onUnpublish();
      _this.setState({ showConfirmUnpublish: false });
    }, _this.handleConfirmDiscard = function () {
      var _this$props4 = _this.props,
          onDiscardDraft = _this$props4.onDiscardDraft,
          draft = _this$props4.draft;

      onDiscardDraft(draft);
      _this.setState({ showConfirmDiscard: false });
    }, _this.handleConfirmDelete = function () {
      var _this$props5 = _this.props,
          onDelete = _this$props5.onDelete,
          onDiscardDraft = _this$props5.onDiscardDraft,
          published = _this$props5.published;

      if (published) {
        onDelete();
      } else {
        onDiscardDraft();
      }
      _this.setState({ showConfirmDelete: false });
    }, _this.handleMenuClick = function (item) {
      if (item.action === 'delete') {
        _this.setState({ showConfirmDelete: true });
      }
      if (item.action === 'discard') {
        _this.setState({ showConfirmDiscard: true });
      }

      if (item.action === 'unpublish') {
        _this.setState({ showConfirmUnpublish: true });
      }

      if (item.action === 'publish') {
        _this.setState({ showConfirmPublish: true });
      }

      if (item.action === 'duplicate') {
        _this.handleCreateCopy();
      }

      if (item.action === 'inspect') {
        _this.setState({ inspect: true });
      }

      _this.setState({ isMenuOpen: false });
    }, _this.renderFunctions = function () {
      var _this$props6 = _this.props,
          draft = _this$props6.draft,
          published = _this$props6.published;
      var showSavingStatus = _this.state.showSavingStatus;


      var value = draft || published;

      return _react2.default.createElement(
        'div',
        { className: _Editor2.default.paneFunctions },
        showSavingStatus && _react2.default.createElement(
          'div',
          { className: _Editor2.default.syncStatusSyncing },
          _react2.default.createElement(
            'span',
            { className: _Editor2.default.spinnerContainer },
            _react2.default.createElement(
              'span',
              { className: _Editor2.default.spinner },
              _react2.default.createElement(_syncIcon2.default, null)
            )
          ),
          ' Syncing\u2026'
        ),
        value && !showSavingStatus && _react2.default.createElement(
          'div',
          { className: _Editor2.default.syncStatusSynced },
          _react2.default.createElement(_checkIcon2.default, null),
          ' Synced'
        ),
        _react2.default.createElement(
          'div',
          { className: _Editor2.default.publishButton },
          _react2.default.createElement(
            _default2.default,
            {
              title: 'Ctrl+Alt+P',
              disabled: !draft,
              onClick: _this.handlePublishButtonClick,
              color: 'primary'
            },
            published ? 'Publish changes' : 'Publish'
          )
        )
      );
    }, _this.renderMenu = function () {
      var _this$props7 = _this.props,
          draft = _this$props7.draft,
          published = _this$props7.published;

      return _react2.default.createElement(_default4.default, {
        onAction: _this.handleMenuClick,
        isOpen: _this.state.isMenuOpen,
        onClose: _this.handleMenuClose,
        onClickOutside: _this.handleMenuClose,
        items: getMenuItems(draft, published),
        origin: 'top-right'
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Editor, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      this.unlistenForKey = listen(window, 'keyup', function (event) {
        var toggleKey = getToggleKeyState(event);
        if (toggleKey) {
          _this2.setState(function (prevState) {
            return _defineProperty({}, toggleKey, !prevState[toggleKey]);
          });
        }
      });
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.unlistenForKey();
      this.setSavingStatus.cancel();
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.isSaving && !nextProps.isSaving) {
        this.setState({
          showSavingStatus: true
        });
        this.setSavingStatus();
      }
    }
  }, {
    key: 'getTitle',
    value: function getTitle(value) {
      var type = this.props.type;

      if (!value) {
        return 'Creating new ' + (type.title || type.name);
      }
      return _react2.default.createElement(
        _preview.PreviewFields,
        { document: value, type: type, fields: ['title'] },
        function (_ref3) {
          var title = _ref3.title;
          return _react2.default.createElement(
            'span',
            null,
            title
          );
        }
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _props = this.props,
          draft = _props.draft,
          published = _props.published,
          type = _props.type,
          isLoading = _props.isLoading,
          isPublishing = _props.isPublishing,
          isUnpublishing = _props.isUnpublishing,
          isCreatingDraft = _props.isCreatingDraft,
          patchChannel = _props.patchChannel,
          transactionResult = _props.transactionResult,
          onClearTransactionResult = _props.onClearTransactionResult;
      var _state = this.state,
          inspect = _state.inspect,
          showConfirmPublish = _state.showConfirmPublish,
          showConfirmDelete = _state.showConfirmDelete,
          showConfirmDiscard = _state.showConfirmDiscard,
          showConfirmUnpublish = _state.showConfirmUnpublish;


      var value = draft || published;

      if (isLoading) {
        return _react2.default.createElement(
          'div',
          { className: _Editor2.default.root },
          _react2.default.createElement(_spinner2.default, { center: true, message: 'Loading ' + type.title + '\u2026' })
        );
      }

      var hasTypeMismatch = value && value._type && value._type !== type.name;
      if (hasTypeMismatch) {
        return _react2.default.createElement(
          'div',
          { className: _Editor2.default.typeMisMatchMessage },
          'This document is of type ',
          _react2.default.createElement(
            'code',
            null,
            value._type
          ),
          ' and cannot be edited as ',
          _react2.default.createElement(
            'code',
            null,
            type.name
          ),
          _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement(
              _default2.default,
              { onClick: this.handleEditAsActualType },
              'Edit as ',
              value._type,
              ' instead'
            )
          )
        );
      }

      return _react2.default.createElement(
        _default6.default,
        {
          title: this.getTitle(value),
          renderMenu: this.renderMenu,
          renderFunctions: this.renderFunctions,
          onMenuToggle: this.handleMenuToggle
        },
        _react2.default.createElement(
          'div',
          { className: _Editor2.default.root },
          isCreatingDraft && _react2.default.createElement(_spinner2.default, { fullscreen: true, message: 'Making changes\u2026' }),
          isPublishing && _react2.default.createElement(_spinner2.default, { fullscreen: true, message: 'Publishing\u2026' }),
          isUnpublishing && _react2.default.createElement(_spinner2.default, { fullscreen: true, message: 'Unpublishing\u2026' }),
          _react2.default.createElement(
            'div',
            { className: _Editor2.default.top },
            _react2.default.createElement(
              'div',
              { className: _Editor2.default.editedDate },
              value && _react2.default.createElement(
                'span',
                null,
                'Edited ',
                _react2.default.createElement(_TimeAgo2.default, { time: value._updatedAt })
              )
            ),
            _react2.default.createElement(
              'div',
              { className: _Editor2.default.publishedDate },
              published ? _react2.default.createElement(
                'span',
                null,
                'Published ',
                _react2.default.createElement(_TimeAgo2.default, { time: published._updatedAt })
              ) : 'Not published'
            )
          ),
          _react2.default.createElement(
            'form',
            { className: _Editor2.default.editor, onSubmit: preventDefault, id: 'Sanity_Default_DeskTool_Editor_ScrollContainer' },
            _react2.default.createElement(_formBuilder2.default, {
              schema: _schema2.default,
              patchChannel: patchChannel,
              value: draft || published || { _type: type.name },
              type: type,
              onChange: this.handleChange
            })
          ),
          _afterEditorComponent2.default.map(function (AfterEditorComponent, i) {
            return _react2.default.createElement(AfterEditorComponent, { key: i, documentId: published._id });
          }),
          inspect && _react2.default.createElement(_InspectView2.default, {
            value: value,
            onClose: function onClose() {
              return _this3.setState({ inspect: false });
            }
          }),
          showConfirmPublish && _react2.default.createElement(_ConfirmPublish2.default, {
            draft: draft,
            published: published,
            onCancel: this.handleCancelConfirmPublish,
            onConfirm: this.handleConfirmPublish
          }),
          showConfirmDiscard && _react2.default.createElement(_ConfirmDiscard2.default, {
            draft: draft,
            published: published,
            onCancel: this.handleCancelDiscard,
            onConfirm: this.handleConfirmDiscard
          }),
          showConfirmDelete && _react2.default.createElement(_ConfirmDelete2.default, {
            draft: draft,
            published: published,
            onCancel: this.handleCancelDelete,
            onConfirm: this.handleConfirmDelete
          }),
          showConfirmUnpublish && _react2.default.createElement(_ConfirmUnpublish2.default, {
            draft: draft,
            published: published,
            onCancel: this.handleCancelUnpublish,
            onConfirm: this.handleConfirmUnpublish
          }),
          transactionResult && transactionResult.type === 'error' && _react2.default.createElement(
            _default8.default,
            {
              kind: 'danger',
              action: { title: 'Ok, got it' },
              onAction: onClearTransactionResult
            },
            _react2.default.createElement(
              'div',
              null,
              transactionResult.message,
              _react2.default.createElement(
                'details',
                null,
                transactionResult.error.message
              )
            )
          )
        )
      );
    }
  }]);

  return Editor;
}(_react2.default.PureComponent), _class.propTypes = {
  patchChannel: _propTypes2.default.object,
  draft: _propTypes2.default.object,
  published: _propTypes2.default.object,
  type: _propTypes2.default.object.isRequired,
  router: _propTypes2.default.shape({
    state: _propTypes2.default.object
  }).isRequired,

  onDelete: _propTypes2.default.func,
  onCreate: _propTypes2.default.func,
  onChange: _propTypes2.default.func,
  onDiscardDraft: _propTypes2.default.func,
  onPublish: _propTypes2.default.func,
  onUnpublish: _propTypes2.default.func,
  transactionResult: _propTypes2.default.func,
  onClearTransactionResult: _propTypes2.default.func,

  isCreatingDraft: _propTypes2.default.bool,
  isUnpublishing: _propTypes2.default.bool,
  isPublishing: _propTypes2.default.bool,
  isLoading: _propTypes2.default.bool,
  isSaving: _propTypes2.default.bool,
  deletedSnapshot: _propTypes2.default.object
}, _class.defaultProps = {
  isLoading: false,
  isSaving: false,
  isUnpublishing: false,
  isPublishing: false,
  isCreatingDraft: false,
  deletedSnapshot: null,
  transactionResult: null,
  onDelete: function onDelete() {},
  onCreate: function onCreate() {},
  onChange: function onChange() {},
  onClearTransactionResult: function onClearTransactionResult() {}
}, _temp2));