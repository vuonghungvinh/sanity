'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = enhanceWithAvailHeight;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _elementResizeDetector = require('element-resize-detector');

var _elementResizeDetector2 = _interopRequireDefault(_elementResizeDetector);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function enhanceWithAvailHeight(Component) {
  var _class, _temp2;

  return _temp2 = _class = function (_React$PureComponent) {
    _inherits(enhancedWithAvailHeight, _React$PureComponent);

    function enhancedWithAvailHeight() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, enhancedWithAvailHeight);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = enhancedWithAvailHeight.__proto__ || Object.getPrototypeOf(enhancedWithAvailHeight)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this.setContainer = function (el) {
        if (el) {
          _this.setup(el);
        }
      }, _this.handleResize = function () {
        _this.setState({ height: _this._element.offsetHeight });
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(enhancedWithAvailHeight, [{
      key: 'componentWillMount',
      value: function componentWillMount() {
        this.erd = (0, _elementResizeDetector2.default)({ strategy: 'scroll' });
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        this.teardown(this._element);
      }
    }, {
      key: 'setup',
      value: function setup(el) {
        if (this._element) {
          this.teardown(this._element);
        }
        this.erd.listenTo(el, this.handleResize);
        this._element = el;
      }
    }, {
      key: 'teardown',
      value: function teardown(el) {
        this.erd.removeAllListeners(el);
        this.erd.uninstall(el);
        this._element = null;
      }
    }, {
      key: 'render',
      value: function render() {
        return _react2.default.createElement(
          'div',
          { style: { position: 'absolute', top: 0, left: 0, bottom: 0, right: 0, width: '100%', height: '100%' }, ref: this.setContainer },
          _react2.default.createElement(Component, _extends({}, this.props, this.state))
        );
      }
    }]);

    return enhancedWithAvailHeight;
  }(_react2.default.PureComponent), _class.displayName = 'enhanceWithAvailHeight(' + (Component.displayName || Component.name) + ')', _temp2;
}