'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactTinyVirtualList = require('react-tiny-virtual-list');

var _reactTinyVirtualList2 = _interopRequireDefault(_reactTinyVirtualList);

var _enhanceWithAvailHeight = require('./enhanceWithAvailHeight');

var _enhanceWithAvailHeight2 = _interopRequireDefault(_enhanceWithAvailHeight);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

exports.default = (0, _enhanceWithAvailHeight2.default)((_temp2 = _class = function (_React$PureComponent) {
  _inherits(InfiniteList, _React$PureComponent);

  function InfiniteList() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, InfiniteList);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = InfiniteList.__proto__ || Object.getPrototypeOf(InfiniteList)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      triggerUpdate: 0
    }, _this.renderItem = function (_ref2) {
      var index = _ref2.index,
          style = _ref2.style;
      var _this$props = _this.props,
          renderItem = _this$props.renderItem,
          getItemKey = _this$props.getItemKey,
          items = _this$props.items;

      var item = items[index];
      return _react2.default.createElement(
        'div',
        { key: getItemKey(item), style: style },
        renderItem(item, index)
      );
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(InfiniteList, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(prevProps) {
      if (prevProps.items !== this.props.items) {
        /* This is needed to break equality checks
         in VirtualList's sCU in cases where itemCount has not changed,
         but an elements has been removed or added
         */
        this.setState({ triggerUpdate: Math.random() });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          layout = _props.layout,
          height = _props.height,
          items = _props.items,
          className = _props.className;
      var triggerUpdate = this.state.triggerUpdate;

      return _react2.default.createElement(_reactTinyVirtualList2.default, {
        onScroll: this.props.onScroll,
        key: layout /* forcefully re-render the whole list when layout changes */,
        className: className || '',
        height: height,
        itemCount: items.length,
        itemSize: layout === 'default' ? 56 : 80,
        renderItem: this.renderItem,
        overscanCount: 50,
        'data-trigger-update-hack': triggerUpdate /* see componentWillReceiveProps above */
      });
    }
  }]);

  return InfiniteList;
}(_react2.default.PureComponent), _class.propTypes = {
  height: _propTypes2.default.number,
  items: _propTypes2.default.array, // eslint-disable-line react/forbid-prop-types
  renderItem: _propTypes2.default.func,
  className: _propTypes2.default.string,
  getItemKey: _propTypes2.default.func,
  layout: _propTypes2.default.oneOf(['default', 'detail', 'card', 'media']),
  onScroll: _propTypes2.default.func
}, _class.defaultProps = {
  layout: 'default',
  items: [],
  height: 250
}, _temp2));