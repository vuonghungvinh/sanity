'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _uniqBy2 = require('lodash/uniqBy');

var _uniqBy3 = _interopRequireDefault(_uniqBy2);

var _partition4 = require('lodash/partition');

var _partition5 = _interopRequireDefault(_partition4);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp, _initialiseProps;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _spinner = require('part:@sanity/components/loading/spinner');

var _spinner2 = _interopRequireDefault(_spinner);

var _DocumentsPane = require('./styles/DocumentsPane.css');

var _DocumentsPane2 = _interopRequireDefault(_DocumentsPane);

var _router = require('part:@sanity/base/router');

var _sortIcon = require('part:@sanity/base/sort-icon');

var _sortIcon2 = _interopRequireDefault(_sortIcon);

var _reactInk = require('react-ink');

var _reactInk2 = _interopRequireDefault(_reactInk);

var _ListView = require('./ListView');

var _ListView2 = _interopRequireDefault(_ListView);

var _visibilityOffIcon = require('part:@sanity/base/visibility-off-icon');

var _visibilityOffIcon2 = _interopRequireDefault(_visibilityOffIcon);

var _editIcon = require('part:@sanity/base/edit-icon');

var _editIcon2 = _interopRequireDefault(_editIcon);

var _queryContainer = require('part:@sanity/base/query-container');

var _queryContainer2 = _interopRequireDefault(_queryContainer);

var _draftUtils = require('../utils/draftUtils');

var _schema = require('part:@sanity/base/schema');

var _schema2 = _interopRequireDefault(_schema);

var _preview = require('part:@sanity/base/preview');

var _preview2 = _interopRequireDefault(_preview);

var _default = require('part:@sanity/components/panes/default');

var _default2 = _interopRequireDefault(_default);

var _DocumentsPaneMenu = require('./DocumentsPaneMenu');

var _DocumentsPaneMenu2 = _interopRequireDefault(_DocumentsPaneMenu);

var _default3 = require('part:@sanity/components/buttons/default');

var _default4 = _interopRequireDefault(_default3);

var _plusIcon = require('part:@sanity/base/plus-icon');

var _plusIcon2 = _interopRequireDefault(_plusIcon);

var _default5 = require('part:@sanity/components/snackbar/default');

var _default6 = _interopRequireDefault(_default5);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var NOOP = function NOOP() {}; // eslint-disable-line

var LOCALSTORAGE_KEY = 'desk-tool.documents-pane-settings';

function readSettings() {
  return JSON.parse(window.localStorage.getItem(LOCALSTORAGE_KEY) || '{}');
}

function writeSettings(settings) {
  window.localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify(settings));
}

function getDocumentKey(document) {
  return (0, _draftUtils.getPublishedId)(document._id);
}

function toGradientOrderClause(orderBy) {
  return orderBy.map(function (ordering) {
    return [ordering.field, ordering.direction].filter(Boolean).join(' ');
  }).join(', ');
}

var ORDER_BY_UPDATED_AT = {
  title: 'Last edited',
  name: 'updatedAt',
  by: [{ field: '_updatedAt', direction: 'desc' }]
};

var ORDER_BY_CREATED_AT = {
  title: 'Created',
  name: 'createdAt',
  by: [{ field: '_createdAt', direction: 'desc' }]
};

var DEFAULT_SELECTED_ORDERING_OPTION = ORDER_BY_UPDATED_AT;
var DEFAULT_ORDERING_OPTIONS = [ORDER_BY_UPDATED_AT, ORDER_BY_CREATED_AT];

function removePublishedWithDrafts(documents) {
  var _partition2 = (0, _partition5.default)(documents.map(function (doc) {
    return doc._id;
  }), _draftUtils.isDraftId),
      _partition3 = _slicedToArray(_partition2, 2),
      draftIds = _partition3[0],
      publishedIds = _partition3[1];

  return documents.map(function (doc) {
    var publishedId = (0, _draftUtils.getPublishedId)(doc._id);
    var draftId = (0, _draftUtils.getDraftId)(doc._id);
    return _extends({}, doc, {
      hasPublished: publishedIds.includes(publishedId),
      hasDraft: draftIds.includes(draftId)
    });
  }).filter(function (doc) {
    return !((0, _draftUtils.isPublishedId)(doc._id) && doc.hasDraft);
  });
}

function writeSettingsForType(type, settings) {
  writeSettings(Object.assign(readSettings(), _defineProperty({}, type, settings)));
}

exports.default = (0, _router.withRouterHOC)((_temp = _class = function (_React$PureComponent) {
  _inherits(DocumentsPane, _React$PureComponent);

  function DocumentsPane(props) {
    _classCallCheck(this, DocumentsPane);

    var _this = _possibleConstructorReturn(this, (DocumentsPane.__proto__ || Object.getPrototypeOf(DocumentsPane)).call(this));

    _initialiseProps.call(_this);

    var settings = readSettings();
    _this.state = {
      settings: settings && settings[props.selectedType] || {
        listLayout: 'default',
        ordering: DEFAULT_SELECTED_ORDERING_OPTION
      },
      menuIsOpen: false
    };
    return _this;
  }

  _createClass(DocumentsPane, [{
    key: 'writeSettings',
    value: function writeSettings() {
      writeSettingsForType(this.props.selectedType, this.state.settings);
    }
  }, {
    key: 'getOrderingOptions',
    value: function getOrderingOptions(selectedType) {
      var type = _schema2.default.get(selectedType);

      var optionsWithDefaults = type.orderings ? type.orderings.concat(DEFAULT_ORDERING_OPTIONS) : DEFAULT_ORDERING_OPTIONS;

      return (0, _uniqBy3.default)(optionsWithDefaults, 'name').map(function (option) {
        return _extends({}, option, {
          icon: option.icon || _sortIcon2.default,
          title: _react2.default.createElement(
            'span',
            null,
            'Sort by ',
            _react2.default.createElement(
              'b',
              null,
              option.title
            )
          )
        });
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          selectedDocumentId = _props.selectedDocumentId,
          schemaType = _props.schemaType,
          isCollapsed = _props.isCollapsed;
      var settings = this.state.settings;

      var currentOrderingOption = this.getOrderingOptions(schemaType.name).find(function (option) {
        return option.name === settings.ordering;
      }) || DEFAULT_SELECTED_ORDERING_OPTION;

      var params = { type: schemaType.name, draftsPath: _draftUtils.DRAFTS_FOLDER + '.**' };
      var query = '*[_type == $type] | order(' + toGradientOrderClause(currentOrderingOption.by) + ') [0...10000] {_id, _type}';
      return _react2.default.createElement(
        _default2.default,
        _extends({}, this.props, {
          renderMenu: this.renderDocumentsPaneMenu,
          renderFunctions: this.renderFunctions,
          defaultWidth: 200,
          isCollapsed: isCollapsed,
          onMenuToggle: this.handleToggleMenu,
          scrollTop: this.state.scrollTop
        }),
        _react2.default.createElement(
          _queryContainer2.default,
          {
            query: query,
            params: params,
            type: schemaType,
            selectedId: selectedDocumentId,
            settings: settings
          },
          function (_ref) {
            var result = _ref.result,
                loading = _ref.loading,
                error = _ref.error,
                onRetry = _ref.onRetry,
                type = _ref.type;

            if (error) {
              return _react2.default.createElement(
                _default6.default,
                {
                  kind: 'danger',
                  action: { title: 'Retry' },
                  onAction: onRetry
                },
                _react2.default.createElement(
                  'div',
                  null,
                  'An error occurred while loading items:'
                ),
                _react2.default.createElement(
                  'div',
                  null,
                  error.message
                )
              );
            }

            var items = removePublishedWithDrafts(result ? result.documents : []);

            return _react2.default.createElement(
              'div',
              { className: _DocumentsPane2.default.root },
              loading && _react2.default.createElement(
                'div',
                { className: _DocumentsPane2.default.spinner },
                _react2.default.createElement(_spinner2.default, { center: true, message: 'Loading items\u2026' })
              ),
              !loading && !items && _react2.default.createElement(
                'div',
                { className: _DocumentsPane2.default.empty },
                _react2.default.createElement(
                  'h3',
                  null,
                  'Nothing here. Yet\u2026'
                ),
                _react2.default.createElement(
                  _router.IntentLink,
                  {
                    className: _DocumentsPane2.default.emptyCreateNew,
                    title: 'Create new ' + type.title,
                    intent: 'create',
                    params: { type: type.name }
                  },
                  'Create new ',
                  type.title
                )
              ),
              items && _react2.default.createElement(_ListView2.default, {
                onScroll: _this2.handleScroll,
                items: items,
                getItemKey: getDocumentKey,
                renderItem: _this2.renderDocumentPaneItem,
                listLayout: settings.listLayout
              })
            );
          }
        )
      );
    }
  }]);

  return DocumentsPane;
}(_react2.default.PureComponent), _class.propTypes = {
  selectedType: _propTypes2.default.string,
  selectedDocumentId: _propTypes2.default.string,
  schemaType: _propTypes2.default.object,
  isCollapsed: _propTypes2.default.bool,
  router: _propTypes2.default.object
}, _class.defaultProps = {
  loading: false,
  isCollapsed: false,
  published: [],
  drafts: [],
  onSetListLayout: NOOP
}, _initialiseProps = function _initialiseProps() {
  var _this3 = this;

  this.handleSetListLayout = function (listLayout) {
    _this3.setState(function (prevState) {
      return {
        settings: _extends({}, prevState.settings, {
          listLayout: listLayout.key
        })
      };
    }, _this3.writeSettings);
  };

  this.handleSetOrdering = function (ordering) {
    _this3.setState(function (prevState) {
      return {
        settings: _extends({}, prevState.settings, {
          ordering: ordering.name
        })
      };
    }, _this3.writeSettings);
  };

  this.handleToggleMenu = function () {
    _this3.setState({
      menuIsOpen: !_this3.state.menuIsOpen
    });
  };

  this.handleCloseMenu = function () {
    _this3.setState({
      menuIsOpen: !_this3.state.menuIsOpen
    });
  };

  this.handleGoToCreateNew = function () {
    var _props2 = _this3.props,
        selectedType = _props2.selectedType,
        router = _props2.router;

    router.navigateIntent('create', { type: selectedType });
  };

  this.renderDocumentsPaneMenu = function () {
    var selectedType = _this3.props.selectedType;

    var type = _schema2.default.get(selectedType);
    return _react2.default.createElement(_DocumentsPaneMenu2.default, {
      onSetListLayout: _this3.handleSetListLayout,
      onSetOrdering: _this3.handleSetOrdering,
      onGoToCreateNew: _this3.handleGoToCreateNew,
      onMenuClose: _this3.handleCloseMenu,
      onClickOutside: _this3.handleCloseMenu,
      isOpen: _this3.state.menuIsOpen,
      orderingOptions: _this3.getOrderingOptions(selectedType),
      type: type
    });
  };

  this.renderDocumentPaneItem = function (item, index) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var _props3 = _this3.props,
        selectedType = _props3.selectedType,
        selectedDocumentId = _props3.selectedDocumentId;
    var settings = _this3.state.settings;


    var ordering = _this3.getOrderingOptions(selectedType).find(function (option) {
      return option.name === settings.ordering;
    });

    var type = _schema2.default.get(selectedType);
    var linkState = {
      selectedDocumentId: (0, _draftUtils.getPublishedId)(item._id),
      selectedType: type.name,
      action: 'edit'
    };

    var isSelected = selectedDocumentId && (0, _draftUtils.getPublishedId)(item._id) === (0, _draftUtils.getPublishedId)(selectedDocumentId);

    return _react2.default.createElement(
      _router.StateLink,
      {
        state: linkState,
        className: _DocumentsPane2.default.link,
        tabIndex: 0
      },
      _react2.default.createElement(
        'div',
        { className: isSelected ? _DocumentsPane2.default.selectedItem : _DocumentsPane2.default.item },
        _react2.default.createElement(_preview2.default, {
          value: item,
          ordering: ordering,
          layout: settings.listLayout,
          type: type
        }),
        _react2.default.createElement(
          'div',
          { className: _DocumentsPane2.default.itemStatus },
          !item.hasPublished && _react2.default.createElement(
            'i',
            { title: 'Not published' },
            _react2.default.createElement(_visibilityOffIcon2.default, null)
          ),
          item.hasDraft && item.hasPublished && _react2.default.createElement(
            'i',
            { title: 'Has changes not yet published' },
            _react2.default.createElement(_editIcon2.default, null)
          )
        )
      ),
      _react2.default.createElement(_reactInk2.default, { duration: 200, opacity: 0.20, radius: 200 })
    );
  };

  this.renderFunctions = function (isCollapsed) {
    var selectedType = _this3.props.selectedType;

    var type = _schema2.default.get(selectedType);
    return _react2.default.createElement(_default4.default, {
      title: 'Create new ' + type.name,
      icon: _plusIcon2.default,
      color: 'primary',
      kind: 'simple',
      onClick: _this3.handleGoToCreateNew
    });
  };

  this.handleScroll = function (scrollTop) {
    _this3.setState({ scrollTop: scrollTop });
  };
}, _temp));