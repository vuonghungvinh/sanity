'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _grid = require('part:@sanity/components/lists/grid');

var _InfiniteList = require('./InfiniteList');

var _InfiniteList2 = _interopRequireDefault(_InfiniteList);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ListView = function (_React$PureComponent) {
  _inherits(ListView, _React$PureComponent);

  function ListView() {
    _classCallCheck(this, ListView);

    return _possibleConstructorReturn(this, (ListView.__proto__ || Object.getPrototypeOf(ListView)).apply(this, arguments));
  }

  _createClass(ListView, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          renderItem = _props.renderItem,
          items = _props.items,
          selectedItem = _props.selectedItem,
          listLayout = _props.listLayout,
          getItemKey = _props.getItemKey;


      switch (listLayout) {
        case 'card':
        case 'media':
          {
            // todo: this part is disabled and deliberately *not* adjusted after lists refactoring
            return _react2.default.createElement(
              _grid.List,
              null,
              items.map(function (item) {
                // const isSelected = selectedItem === item /* todo: use to decorate with selected class etc. */
                return _react2.default.createElement(
                  _grid.Item,
                  { key: getItemKey(item) },
                  renderItem(item)
                );
              })
            );
          }
        default:
          {
            return _react2.default.createElement(_InfiniteList2.default, {
              onScroll: this.props.onScroll,
              items: items,
              getItemKey: getItemKey,
              renderItem: renderItem,
              layout: listLayout,
              selectedItem: selectedItem
            });
          }
      }
    }
  }]);

  return ListView;
}(_react2.default.PureComponent);

ListView.propTypes = {
  items: _propTypes2.default.array, // eslint-disable-line react/forbid-prop-types
  renderItem: _propTypes2.default.func,
  getItemKey: _propTypes2.default.func,
  listLayout: _propTypes2.default.oneOf(['default', 'detail', 'card', 'media']),
  selectedItem: _propTypes2.default.object,
  onScroll: _propTypes2.default.func
};
ListView.defaultProps = {
  listLayout: 'default',
  loading: false,
  items: [],
  selectedItem: null
};
exports.default = ListView;