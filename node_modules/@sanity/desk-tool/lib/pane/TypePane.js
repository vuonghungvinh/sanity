'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _TypePane = require('./styles/TypePane.css');

var _TypePane2 = _interopRequireDefault(_TypePane);

var _router = require('part:@sanity/base/router');

var _default = require('part:@sanity/components/panes/default');

var _default2 = _interopRequireDefault(_default);

var _TypePaneItem = require('./TypePaneItem');

var _TypePaneItem2 = _interopRequireDefault(_TypePaneItem);

var _contentStylesOverride = require('./styles/contentStylesOverride.css');

var _contentStylesOverride2 = _interopRequireDefault(_contentStylesOverride);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

exports.default = (0, _router.withRouterHOC)((_temp2 = _class = function (_React$PureComponent) {
  _inherits(TypePane, _React$PureComponent);

  function TypePane() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, TypePane);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TypePane.__proto__ || Object.getPrototypeOf(TypePane)).call.apply(_ref, [this].concat(args))), _this), _this.renderTypePaneItem = function (item) {
      var selectedType = _this.props.router.state.selectedType;

      var selected = item.name === selectedType;
      return _react2.default.createElement(_TypePaneItem2.default, {
        key: item.key,
        selected: selected,
        type: item,
        onClick: _this.handleItemClick
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(TypePane, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var items = this.props.items;
      // const {selectedType, action, selectedDocumentId} = router.state
      // const isActive = !selectedType && !action && !selectedDocumentId

      return _react2.default.createElement(
        _default2.default,
        _extends({}, this.props, { styles: _contentStylesOverride2.default }),
        _react2.default.createElement(
          'ul',
          { className: _TypePane2.default.list },
          items.map(function (item, i) {
            return _react2.default.createElement(
              'li',
              { key: item.key, className: _TypePane2.default.item },
              _this2.renderTypePaneItem(item)
            );
          })
        )
      );
    }
  }]);

  return TypePane;
}(_react2.default.PureComponent), _class.propTypes = {
  items: _propTypes2.default.array, // eslint-disable-line react/forbid-prop-types
  router: _propTypes2.default.shape({
    state: _propTypes2.default.object
  })
}, _temp2));