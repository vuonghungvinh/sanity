'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _isObject2 = require('lodash/isObject');

var _isObject3 = _interopRequireDefault(_isObject2);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

require('./styles/JSONInspector.css');

var _InspectView = require('./styles/InspectView.css');

var _InspectView2 = _interopRequireDefault(_InspectView);

var _reactJsonInspector = require('react-json-inspector');

var _reactJsonInspector2 = _interopRequireDefault(_reactJsonInspector);

var _default = require('part:@sanity/components/dialogs/default');

var _default2 = _interopRequireDefault(_default);

var _buttons = require('part:@sanity/components/toggles/buttons');

var _buttons2 = _interopRequireDefault(_buttons);

var _hashlru = require('hashlru');

var _hashlru2 = _interopRequireDefault(_hashlru);

var _draftUtils = require('../utils/draftUtils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var lru = (0, _hashlru2.default)(1000);

function isExpanded(keyPath, value) {
  var cached = lru.get(keyPath);
  if (cached === undefined) {
    lru.set(keyPath, Array.isArray(value) || (0, _isObject3.default)(value));
    return isExpanded(keyPath, value);
  }
  return cached;
}

function toggleExpanded(event) {
  var path = event.path;

  var current = lru.get(path);
  if (current === undefined) {
    // something is wrong
    return;
  }
  lru.set(path, !current);
}

function selectElement(element) {
  var sel = window.getSelection();
  sel.removeAllRanges();
  var range = document.createRange();
  range.selectNodeContents(element);
  sel.addRange(range);
}

function select(event) {
  selectElement(event.currentTarget);
}

function maybeSelectAll(event) {
  var selectAll = event.keyCode === 65 && (event.metaKey || event.ctrlKey);
  if (!selectAll) {
    return;
  }
  event.preventDefault();
  selectElement(event.currentTarget);
}

var VIEW_MODE_PARSED = { value: 'parsed', title: 'Parsed' };
var VIEW_MODE_RAW = { value: 'raw', title: 'Raw' };

var VIEW_MODES = [VIEW_MODE_PARSED, VIEW_MODE_RAW];

var VIEW_MODE_LS_KEY = 'desk-tool-inspect-view-preferred-view-mode';

function getPreferredViewMode() {
  var preferredViewMode = localStorage.getItem(VIEW_MODE_LS_KEY);
  return preferredViewMode && VIEW_MODES.find(function (mode) {
    return mode.value === preferredViewMode;
  });
}

var InspectView = function (_React$PureComponent) {
  _inherits(InspectView, _React$PureComponent);

  function InspectView() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, InspectView);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = InspectView.__proto__ || Object.getPrototypeOf(InspectView)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      viewMode: getPreferredViewMode() || VIEW_MODE_PARSED
    }, _this.handleChangeViewMode = function (viewMode) {
      _this.setState({ viewMode: viewMode });
      localStorage.setItem(VIEW_MODE_LS_KEY, viewMode.value);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(InspectView, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          value = _props.value,
          onClose = _props.onClose;
      var viewMode = this.state.viewMode;

      return _react2.default.createElement(
        _default2.default,
        {
          isOpen: true,
          showHeader: true,
          title: 'Inspecting ' + (0, _draftUtils.getPublishedId)(value._id),
          className: _InspectView2.default.dialog,
          onClose: onClose
        },
        _react2.default.createElement(
          'div',
          { className: _InspectView2.default.content },
          _react2.default.createElement(
            'div',
            { style: { display: 'flex', justifyContent: 'flex-end' } },
            _react2.default.createElement(_buttons2.default, {
              value: viewMode,
              items: VIEW_MODES,
              onChange: this.handleChangeViewMode
            })
          ),
          viewMode === VIEW_MODE_PARSED && _react2.default.createElement(_reactJsonInspector2.default, {
            isExpanded: isExpanded,
            onClick: toggleExpanded,
            data: value
          }),
          viewMode === VIEW_MODE_RAW && _react2.default.createElement(
            'pre',
            {
              className: _InspectView2.default.raw,
              tabIndex: 0,
              onKeyDown: maybeSelectAll,
              onDoubleClick: select,
              onFocus: select
            },
            JSON.stringify(value, null, 2)
          )
        )
      );
    }
  }]);

  return InspectView;
}(_react2.default.PureComponent);

exports.default = InspectView;


InspectView.propTypes = {
  value: _propTypes2.default.object,
  onClose: _propTypes2.default.func
};