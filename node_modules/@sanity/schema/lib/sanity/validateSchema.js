'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = validateSchema;

var _traverseSchema = require('./traverseSchema');

var _traverseSchema2 = _interopRequireDefault(_traverseSchema);

var _object = require('./validation/types/object');

var _object2 = _interopRequireDefault(_object);

var _reference = require('./validation/types/reference');

var _reference2 = _interopRequireDefault(_reference);

var _array = require('./validation/types/array');

var _array2 = _interopRequireDefault(_array);

var _common = require('./validation/types/common');

var _common2 = _interopRequireDefault(_common);

var _rootType = require('./validation/types/rootType');

var _rootType2 = _interopRequireDefault(_rootType);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var typeVisitors = {
  array: _array2.default,
  object: _object2.default,
  document: _object2.default,
  reference: _reference2.default
};

var NOOP_VISITOR = function NOOP_VISITOR(schemaDef) {
  return _extends({}, schemaDef, {
    _problems: []
  });
};

function combine() {
  for (var _len = arguments.length, visitors = Array(_len), _key = 0; _key < _len; _key++) {
    visitors[_key] = arguments[_key];
  }

  return function (schemaType, visitorContext) {
    return visitors.reduce(function (result, visitor) {
      var res = visitor(result, visitorContext);
      return _extends({}, res, {
        _problems: result._problems.concat(res._problems)
      });
    }, _extends({}, schemaType, { _problems: [] }));
  };
}

// Future improvements:
// - Provide an easy way to determine if schema has problems of a certain class (e.g. errors)
// Clean up the api
function validateSchema(schemaTypes) {
  return (0, _traverseSchema2.default)(schemaTypes, function (schemaDef, visitorContext) {
    var typeVisitor = schemaDef.type && typeVisitors[schemaDef.type] || NOOP_VISITOR;
    if (visitorContext.isRoot) {
      return combine(_rootType2.default, _common2.default, typeVisitor)(schemaDef, visitorContext);
    }
    return combine(_common2.default, typeVisitor)(schemaDef, visitorContext);
  });
}