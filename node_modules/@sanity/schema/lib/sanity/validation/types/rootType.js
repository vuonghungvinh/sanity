'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createValidationResult = require('../createValidationResult');

exports.default = function (typeDef, visitorContext) {
  var problems = [];
  if (!typeDef.name) {
    problems.push((0, _createValidationResult.error)('Missing type name', _createValidationResult.HELP_IDS.TYPE_MISSING_NAME));
  } else if (visitorContext.isReserved(typeDef.name)) {
    problems.push((0, _createValidationResult.error)('Invalid type name: "' + typeDef.name + '" is a reserved name.', _createValidationResult.HELP_IDS.TYPE_NAME_RESERVED));
  }

  if (visitorContext.isDuplicate(typeDef.name)) {
    problems.push((0, _createValidationResult.error)('Invalid type name: A type with name "' + typeDef.name + '" is already defined in the schema.'));
  }

  if (!('title' in typeDef)) {
    problems.push((0, _createValidationResult.warning)('Type is missing title. It\'s recommended to always set a descriptive title.', _createValidationResult.HELP_IDS.TYPE_TITLE_RECOMMENDED));
  } else if (typeof typeDef.title !== 'string') {
    problems.push((0, _createValidationResult.warning)('Type title is not a string.', _createValidationResult.HELP_IDS.TYPE_TITLE_INVALID));
  }
  return _extends({}, typeDef, {
    _problems: problems
  });
};