'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _isPlainObject2 = require('lodash/isPlainObject');

var _isPlainObject3 = _interopRequireDefault(_isPlainObject2);

var _flatten2 = require('lodash/flatten');

var _flatten3 = _interopRequireDefault(_flatten2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createValidationResult = require('../createValidationResult');

var _getDupes = require('../utils/getDupes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function normalizeToProp(typeDef) {
  if (Array.isArray(typeDef.to)) {
    return typeDef.to;
  }
  return typeDef.to ? [typeDef.to] : typeDef.to;
}

exports.default = function (typeDef, visitorContext) {

  var isValidTo = Array.isArray(typeDef.to) || (0, _isPlainObject3.default)(typeDef.to);
  var normalizedTo = normalizeToProp(typeDef);

  var problems = (0, _flatten3.default)([isValidTo ? (0, _getDupes.getDupes)(normalizedTo, function (t) {
    return t.name + ';' + t.type;
  }).map(function (dupes) {
    return (0, _createValidationResult.error)('Found ' + dupes.length + ' members with same type, but not unique names "' + dupes[0].type + '" in reference. This makes it impossible to tell their values apart and you should consider naming them', _createValidationResult.HELP_IDS.REFERENCE_TO_INVALID);
  }) : (0, _createValidationResult.error)('The reference type is missing or having an invalid value for the required "to" property. It should be an array of accepted types.', _createValidationResult.HELP_IDS.REFERENCE_TO_INVALID)]);

  if (isValidTo && normalizedTo.length === 0) {
    problems.push((0, _createValidationResult.error)('The reference type should define at least one accepted type. Please check the "to" property.', _createValidationResult.HELP_IDS.REFERENCE_TO_INVALID));
  }

  return _extends({}, typeDef, {
    to: (isValidTo ? normalizedTo : []).map(visitorContext.visit),
    _problems: problems
  });
};