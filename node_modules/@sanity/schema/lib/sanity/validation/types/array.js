'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _flatten2 = require('lodash/flatten');

var _flatten3 = _interopRequireDefault(_flatten2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createValidationResult = require('../createValidationResult');

var _getDupes = require('../utils/getDupes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (typeDef, visitorContext) {
  // name should already have been marked
  var ofIsArray = Array.isArray(typeDef.of);
  var problems = (0, _flatten3.default)([ofIsArray ? (0, _getDupes.getDupes)(typeDef.of, function (t) {
    return t.name + ';' + t.type;
  }).map(function (dupes) {
    return (0, _createValidationResult.error)('Found ' + dupes.length + ' members with same type, but not unique names "' + dupes[0].type + '" in array. This makes it impossible to tell their values apart and you should consider naming them', _createValidationResult.HELP_IDS.ARRAY_OF_NOT_UNIQUE);
  }) : (0, _createValidationResult.error)('The array type is missing or having an invalid value for the required "of" property', _createValidationResult.HELP_IDS.ARRAY_OF_INVALID)]);

  return _extends({}, typeDef, {
    of: (ofIsArray ? typeDef.of : []).map(visitorContext.visit),
    _problems: problems
  });
};