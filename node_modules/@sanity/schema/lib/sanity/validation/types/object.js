'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createValidationResult = require('../createValidationResult');

var _inspect = require('../../inspect');

var _inspect2 = _interopRequireDefault(_inspect);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } // @flow


var VALID_FIELD_RE = /^[A-Za-z]+[0-9A-Za-z_\s-]*$/;
var CONVENTIONAL_FIELD_RE = /^[A-Za-z_]+[0-9A-Za-z_]*$/;

function validateFieldName(name) /*: Array<any>*/ {
  if (typeof name !== 'string') {
    return [(0, _createValidationResult.error)('Field names must be strings. Saw "' + (0, _inspect2.default)(name) + '"', _createValidationResult.HELP_IDS.OBJECT_FIELD_NAME_INVALID)];
  }
  if (name.startsWith('_')) {
    return [(0, _createValidationResult.error)('Invalid field name "' + name + '". Field names cannot start with underscores "_" as it\'s reserved for system fields.', _createValidationResult.HELP_IDS.OBJECT_FIELD_NAME_INVALID)];
  }

  if (!VALID_FIELD_RE.test(name)) {
    return [(0, _createValidationResult.error)('Invalid field name: ' + name + '. Fields can only contain characters from a-z, numbers and underscores and should not start with a number (' + String(VALID_FIELD_RE) + ')', _createValidationResult.HELP_IDS.OBJECT_FIELD_NAME_INVALID)];
  }
  if (!CONVENTIONAL_FIELD_RE.test(name)) {
    return [(0, _createValidationResult.warning)('Thats an interesting field name for sure! But it is... how to put it... a bit... unconventional?' + ' It may be wise to keep special characters out of field names for easier access later on.'), _createValidationResult.HELP_IDS.OBJECT_FIELD_NAME_INVALID];
  }
  return [];
}

function validateField(field, visitorContext) {
  var name = field.name,
      fieldset = field.fieldset,
      fieldType = _objectWithoutProperties(field, ['name', 'fieldset']);

  return 'name' in field ? validateFieldName(name) : [(0, _createValidationResult.error)('Missing field name', _createValidationResult.HELP_IDS.OBJECT_FIELD_NAME_INVALID)];
}

function getDuplicateFields(array /*: Array<Field>*/) /*: Array<Array<Field>>*/ {
  var dupes /*: { [string]: Array<Field> }*/ = {};
  array.forEach(function (field) {
    if (!dupes[field.name]) {
      dupes[field.name] = [];
    }
    dupes[field.name].push(field);
  });
  return Object.keys(dupes).map(function (fieldName) {
    return dupes[fieldName].length > 1 ? dupes[fieldName] : null;
  }).filter(Boolean);
}

exports.default = function (typeDef, visitorContext) {
  var problems = [];
  var fieldsIsArray = Array.isArray(typeDef.fields);
  if (fieldsIsArray) {
    var fieldsWithNames = typeDef.fields.filter(function (field) {
      return typeof field.name === 'string';
    });

    getDuplicateFields(fieldsWithNames).forEach(function (dupes) {
      problems.push((0, _createValidationResult.error)('Found ' + dupes.length + ' fields with name "' + dupes[0].name + '" in object', _createValidationResult.HELP_IDS.OBJECT_FIELD_NOT_UNIQUE));
    });
    if (typeDef.fields.length === 0) {
      problems.push((0, _createValidationResult.error)('Object should have at least one field', _createValidationResult.HELP_IDS.OBJECT_FIELDS_INVALID));
    }
  } else {
    problems.push((0, _createValidationResult.error)('The "fields" property must be an array of fields. Instead saw "' + _typeof(typeDef.fields) + '"', _createValidationResult.HELP_IDS.OBJECT_FIELDS_INVALID));
  }

  return _extends({}, typeDef, {
    fields: (fieldsIsArray ? typeDef.fields : []).map(function (field) {
      var name = field.name,
          fieldTypeDef = _objectWithoutProperties(field, ['name']);

      var _visitorContext$visit = visitorContext.visit(fieldTypeDef, visitorContext),
          _problems = _visitorContext$visit._problems,
          fieldType = _objectWithoutProperties(_visitorContext$visit, ['_problems']);

      return _extends({
        name: name
      }, fieldType, {
        _problems: validateField(field, visitorContext).concat(_problems || [])
      });
    }),
    _problems: problems
  });
};