'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.validateTypeName = validateTypeName;

var _leven = require('leven');

var _leven2 = _interopRequireDefault(_leven);

var _humanizeList = require('humanize-list');

var _humanizeList2 = _interopRequireDefault(_humanizeList);

var _createValidationResult = require('../createValidationResult');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var quote = function quote(str) {
  return '"' + str + '"';
};

function validateTypeName(typeName /*: string*/, visitorContext) {
  var possibleTypeNames = visitorContext.getTypeNames();

  if (!typeName) {
    return [(0, _createValidationResult.error)('Type is missing a type. Valid types are: ' + (0, _humanizeList2.default)(possibleTypeNames), _createValidationResult.HELP_IDS.TYPE_MISSING_TYPE)];
  }

  if (typeof typeName !== 'string') {
    return [(0, _createValidationResult.error)('Type has an invalid "type"-property - should be a string. Valid types are: ' + (0, _humanizeList2.default)(possibleTypeNames), _createValidationResult.HELP_IDS.TYPE_MISSING_TYPE)];
  }

  var isValid = possibleTypeNames.includes(typeName);

  if (!isValid) {
    var suggestions = possibleTypeNames.map(function (possibleTypeName) {
      if (!possibleTypeName || !typeName) {}
      return [(0, _leven2.default)(typeName, possibleTypeName), possibleTypeName];
    }).filter(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 1),
          distance = _ref2[0];

      return distance < 3;
    }).map(function (_ref3) {
      var _ref4 = _slicedToArray(_ref3, 2),
          _ = _ref4[0],
          name = _ref4[1];

      return name;
    });

    var suggestion = suggestions.length > 0 ? ' Did you mean ' + (0, _humanizeList2.default)(suggestions.map(quote), { conjunction: 'or' }) + '?' : '';

    return [(0, _createValidationResult.error)('Unknown type: ' + typeName + '.' + suggestion + ' Valid types are: ' + (0, _humanizeList2.default)(possibleTypeNames))];
  }
  return [];
}