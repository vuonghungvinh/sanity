'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FileType = exports.ASSET_FIELD = undefined;

var _pick2 = require('lodash/pick');

var _pick3 = _interopRequireDefault(_pick2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _utils = require('./utils');

var _createPreviewGetter = require('../preview/createPreviewGetter');

var _createPreviewGetter2 = _interopRequireDefault(_createPreviewGetter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var ASSET_FIELD = exports.ASSET_FIELD = {
  name: 'asset',
  type: 'reference',
  to: { type: 'sanity.fileAsset' }
};

var OVERRIDABLE_FIELDS = ['jsonType', 'type', 'name', 'title', 'description', 'options', 'fieldsets'];

var FILE_CORE = {
  name: 'file',
  type: null,
  jsonType: 'object'
};

var DEFAULT_OPTIONS = {
  accept: ''
};

var FileType = {
  get: function get() {
    return FILE_CORE;
  },
  extend: function extend(subTypeDef, extendMember) {
    var options = _extends({}, subTypeDef.options || DEFAULT_OPTIONS);

    var fields = (subTypeDef.fields || []).concat([ASSET_FIELD]).filter(Boolean);

    var parsed = Object.assign((0, _pick3.default)(FILE_CORE, OVERRIDABLE_FIELDS), subTypeDef, {
      type: FILE_CORE,
      options: options
    });

    (0, _utils.lazyGetter)(parsed, 'fields', function () {
      return fields.map(function (fieldDef) {
        var name = fieldDef.name,
            type = _objectWithoutProperties(fieldDef, ['name']);

        return {
          name: name,
          type: extendMember(type)
        };
      });
    });

    (0, _utils.lazyGetter)(parsed, 'preview', (0, _createPreviewGetter2.default)(Object.assign({}, subTypeDef, { fields: fields })));

    return subtype(parsed);

    function subtype(parent) {
      return {
        get: function get() {
          return parent;
        },

        extend: function extend(extensionDef) {
          if (extensionDef.fields) {
            throw new Error('Cannot override `fields` of subtypes of "file"');
          }
          var current = Object.assign({}, parent, (0, _pick3.default)(extensionDef, OVERRIDABLE_FIELDS), { type: parent });
          return subtype(current);
        }
      };
    }
  }
};
exports.FileType = FileType;