'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StringType = undefined;

var _pick2 = require('lodash/pick');

var _pick3 = _interopRequireDefault(_pick2);

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _primitivePreview = require('../preview/primitivePreview');

var _primitivePreview2 = _interopRequireDefault(_primitivePreview);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var OVERRIDABLE_FIELDS = ['jsonType', 'type', 'name', 'title', 'description', 'options', 'fieldsets'];

var STRING_CORE = {
  name: 'string',
  type: null,
  jsonType: 'string'
};

var StringType = exports.StringType = {
  get: function get() {
    return STRING_CORE;
  },
  extend: function extend(subTypeDef) {
    var parsed = Object.assign((0, _pick3.default)(STRING_CORE, OVERRIDABLE_FIELDS), subTypeDef, {
      type: STRING_CORE,
      preview: _primitivePreview2.default
    });

    return subtype(parsed);

    function subtype(parent) {
      return {
        get: function get() {
          return parent;
        },

        extend: function extend(extensionDef) {
          var current = Object.assign({}, parent, (0, _pick3.default)(extensionDef, OVERRIDABLE_FIELDS), { type: parent });
          return subtype(current);
        }
      };
    }
  }
};
var CustomString = StringType.extend({
  name: 'someStr',
  title: 'Custom String'
});

var TypeOfCustomStr = CustomString.extend({
  name: 'typeOfSomeStr',
  title: 'Type Of CustomString'
}, function (v) {
  return v;
});

var TypeOfTypeOfCustomStr = TypeOfCustomStr.extend({
  name: 'typeoftypeofcustomstr',
  title: 'Type Of Type Of CustomString'
}, function (v) {
  return v;
});

_assert2.default.equal(TypeOfTypeOfCustomStr.get().type, TypeOfCustomStr.get());
_assert2.default.equal(TypeOfTypeOfCustomStr.get().type, TypeOfCustomStr.get());
_assert2.default.equal(TypeOfTypeOfCustomStr.get().name, 'typeoftypeofcustomstr');
_assert2.default.equal(TypeOfTypeOfCustomStr.get().type.name, 'typeOfSomeStr');
_assert2.default.equal(TypeOfTypeOfCustomStr.get().type.type.name, 'someStr');
_assert2.default.equal(TypeOfTypeOfCustomStr.get().type.type.type.name, 'string');
_assert2.default.equal(TypeOfTypeOfCustomStr.get().type.type.type.jsonType, 'string');
_assert2.default.equal(TypeOfTypeOfCustomStr.get().fields, CustomString.get().fields);