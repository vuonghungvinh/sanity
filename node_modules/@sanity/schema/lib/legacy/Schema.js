'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _types = require('./types');

var types = _interopRequireWildcard(_types);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function compileRegistry(schemaDef) {
  var registry = Object.assign(Object.create(null), types);

  var defsByName = schemaDef.types.reduce(function (acc, def) {
    if (acc[def.name]) {
      throw new Error('Duplicate type name added to schema: ' + def.name);
    }
    acc[def.name] = def;
    return acc;
  }, {});

  schemaDef.types.forEach(add);

  return registry;

  function ensure(typeName) {
    if (!registry[typeName]) {
      if (!defsByName[typeName]) {
        throw new Error('Unknown type: ' + typeName);
      }
      add(defsByName[typeName]);
    }
  }
  function extendMember(memberDef) {
    ensure(memberDef.type);
    return registry[memberDef.type].extend(memberDef, extendMember).get();
  }
  function add(typeDef) {
    ensure(typeDef.type);
    if (registry[typeDef.name]) {
      return;
    }
    registry[typeDef.name] = registry[typeDef.type].extend(typeDef, extendMember);
  }
}

var Schema = function () {
  _createClass(Schema, null, [{
    key: 'compile',
    value: function compile(schemaDef) {
      return new Schema(schemaDef);
    }
  }]);

  function Schema(schemaDef) {
    _classCallCheck(this, Schema);

    this._original = schemaDef;
    this._registry = compileRegistry(schemaDef);
  }

  _createClass(Schema, [{
    key: 'get',
    value: function get(name) {
      return this._registry[name] && this._registry[name].get();
    }
  }, {
    key: 'has',
    value: function has(name) {
      return name in this._registry;
    }
  }, {
    key: 'getTypeNames',
    value: function getTypeNames() {
      return Object.keys(this._registry);
    }
  }, {
    key: 'name',
    get: function get() {
      return this._original.name;
    }
  }]);

  return Schema;
}();

exports.default = Schema;