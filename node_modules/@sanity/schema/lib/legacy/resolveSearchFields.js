'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = resolveSearchFields;

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var stringFieldsSymbol = Symbol('__cachedStringFields');

function reduceType(type, reducer, accumulator) {
  var path = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
  var maxDepth = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 10;

  if (maxDepth < 0) {
    return accumulator;
  }
  if (Array.isArray(type.fields)) {
    return type.fields.reduce(function (acc, field, index) {
      return reduceType(field.type, reducer, acc, path.concat(field.name), maxDepth - 1);
    }, reducer(accumulator, type, path));
  }
  return reducer(accumulator, type, path);
}

function getCachedStringFieldPaths(type, maxDepth) {
  if (!type[stringFieldsSymbol]) {
    type[stringFieldsSymbol] = getStringFieldPaths(type, maxDepth);
  }
  return type[stringFieldsSymbol];
}

function getStringFieldPaths(type, maxDepth) {
  var reducer = function reducer(accumulator, childType, path) {
    return childType.jsonType === 'string' ? [].concat(_toConsumableArray(accumulator), [path]) : accumulator;
  };

  return reduceType(type, reducer, [], [], maxDepth);
}

function resolveSearchFields(type) {
  return getCachedStringFieldPaths(type, 4).map(function (path) {
    return path.join('.');
  });
}