'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UnknownType = undefined;

var _uniq2 = require('lodash/uniq');

var _uniq3 = _interopRequireDefault(_uniq2);

var _flatten2 = require('lodash/flatten');

var _flatten3 = _interopRequireDefault(_flatten2);

exports.default = traverseSchema;

var _getDupes = require('../sanity/validation/utils/getDupes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // @flow


/*:: type SchemaType = Object*/
/*:: type SchemaTypeDef = Object*/
/*:: type VisitContext = {
  // eslint-disable-next-line no-use-before-define
  visit: Visitor,
  getType: (typeName: string) => null | SchemaType,
  getTypeNames: () => Array<string>
}*/
/*:: type Visitor = (typeDef: SchemaTypeDef, VisitContext) => SchemaType*/


var NOOP_VISITOR /*: Visitor*/ = function NOOP_VISITOR(typeDef) {
  return typeDef;
};

var UnknownType = exports.UnknownType = function UnknownType(name /*: string*/) {
  _classCallCheck(this, UnknownType);

  this.name = name;
};

var TYPE_TYPE = { name: 'type', type: null };

var FUTURE_RESERVED = ['any', 'time', 'date'];

function traverseSchema() {
  var types /*: Array<SchemaTypeDef>*/ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var coreTypes /*: Array<SchemaTypeDef>*/ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var visitor /*: Visitor*/ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : NOOP_VISITOR;

  var coreTypesRegistry = Object.create(null);
  var registry = Object.create(null);

  var coreTypeNames = coreTypes.map(function (typeDef) {
    return typeDef.name;
  });

  var reservedTypeNames = FUTURE_RESERVED.concat(coreTypeNames);

  var typeNames = types.map(function (typeDef) {
    return typeDef.name;
  }).filter(Boolean);

  coreTypes.forEach(function (coreType) {
    coreTypesRegistry[coreType.name] = coreType;
  });

  types.forEach(function (type, i) {
    // Allocate a placeholder for each type
    registry[type.name || '__unnamed_' + i] = {};
  });

  function getType(typeName) {
    return typeName === 'type' ? TYPE_TYPE : coreTypesRegistry[typeName] || registry[typeName] || null;
  }

  var duplicateNames = (0, _uniq3.default)((0, _flatten3.default)((0, _getDupes.getDupes)(typeNames)));

  function isDuplicate(typeName) {
    return duplicateNames.includes(typeName);
  }
  function getTypeNames() {
    return typeNames.concat(coreTypeNames);
  }
  function isReserved(typeName) {
    return typeName === 'type' || reservedTypeNames.includes(typeName);
  }

  var visitType = function visitType(isRoot) {
    return function (typeDef) {
      return visitor(typeDef, { visit: visitType(false), isRoot: isRoot, getType: getType, getTypeNames: getTypeNames, isReserved: isReserved, isDuplicate: isDuplicate });
    };
  };

  coreTypes.forEach(function (coreTypeDef) {
    Object.assign(coreTypesRegistry[coreTypeDef.name], visitType(coreTypeDef));
  });

  types.forEach(function (typeDef, i) {
    Object.assign(registry[typeDef.name || '__unnamed_' + i], visitType(true)(typeDef));
  });

  return {
    get: function get(typeName /*: string*/) {
      var res = registry[typeName] || coreTypesRegistry[typeName];
      if (res) {
        return res;
      }
      throw new Error('No such type: ' + typeName);
    },
    has: function has(typeName /*: string*/) /*: boolean*/ {
      return typeName in registry || typeName in coreTypesRegistry;
    },
    getTypeNames: function getTypeNames() /*: string[]*/ {
      return Object.keys(registry);
    },
    getTypes: function getTypes() {
      return this.getTypeNames().map(this.get);
    },
    toJSON: function toJSON() {
      return this.getTypes();
    }
  };
}