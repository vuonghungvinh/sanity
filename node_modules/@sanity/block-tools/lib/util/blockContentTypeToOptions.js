'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = blockContentTypeToOptions;

var _constants = require('../constants');

function resolveEnabledStyles(blockType) {
  var styleField = blockType.fields.find(function (btField) {
    return btField.name === 'style';
  });
  if (!styleField) {
    throw new Error("A field with name 'style' is not defined in the block type (required).");
  }
  var textStyles = styleField.type.options.list && styleField.type.options.list.filter(function (style) {
    return style.value;
  });
  if (!textStyles || textStyles.length === 0) {
    throw new Error('The style fields need at least one style ' + "defined. I.e: {title: 'Normal', value: 'normal'}.");
  }
  return textStyles.map(function (style) {
    return style.value;
  });
}

function resolveEnabledAnnotationTypes(spanType) {
  return spanType.annotations.map(function (annotation) {
    return annotation.name;
  });
}

function resolveEnabledDecorators(spanType) {
  return spanType.decorators.map(function (decorator) {
    return decorator.value;
  });
}

function blockContentTypeToOptions(blockContentType) {
  var blockType = void 0;
  var spanType = void 0;
  if (blockContentType) {
    blockType = blockContentType.of.find(function (field) {
      return field.name === 'block';
    });
    if (!blockType) {
      throw new Error("'block' type is not defined in this schema (required).");
    }
    spanType = blockType.fields.find(function (field) {
      return field.name === 'spans';
    }).type.of.find(function (ofType) {
      return ofType.name === 'span';
    });
  }
  return {
    enabledBlockStyles: blockType ? resolveEnabledStyles(blockType) : _constants.DEFAULT_SUPPORTED_STYLES,
    enabledSpanDecorators: spanType ? resolveEnabledDecorators(spanType) : _constants.DEFAULT_SUPPORTED_DECORATORS,
    enabledBlockAnnotations: spanType ? resolveEnabledAnnotationTypes(spanType) : _constants.DEFAULT_SUPPORTED_ANNOTATIONS
  };
}