'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = blocksToSlateState;

var _randomKey = require('../util/randomKey');

var _randomKey2 = _interopRequireDefault(_randomKey);

var _resolveJsType = require('../util/resolveJsType');

var _resolveJsType2 = _interopRequireDefault(_resolveJsType);

var _constants = require('../constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function resolveTypeName(value) {
  var jsType = (0, _resolveJsType2.default)(value);
  return jsType === 'object' && '_type' in value && value._type || jsType;
}

function hasKeys(obj) {
  for (var key in obj) {
    // eslint-disable-line guard-for-in
    return true;
  }
  return false;
}

function toRawMark(markName) {
  return {
    kind: 'mark',
    type: markName
  };
}

function sanitySpanToRawSlateBlockNode(span, sanityBlock) {

  if (!span._key) {
    span._key = (0, _randomKey2.default)(12);
  }

  if (span._type !== 'span') {
    return {
      kind: 'inline',
      isVoid: true,
      type: span._type,
      key: span._key,
      data: { value: span },
      nodes: []
    };
  }

  var text = span.text,
      _span$marks = span.marks,
      marks = _span$marks === undefined ? [] : _span$marks;

  var decorators = marks.filter(function (mark) {
    return !sanityBlock.markDefs.map(function (def) {
      return def._key;
    }).includes(mark);
  });
  var annotationKeys = marks.filter(function (x) {
    return decorators.indexOf(x) == -1;
  });
  var annotations = void 0;
  if (annotationKeys.length) {
    annotations = {};
    annotationKeys.forEach(function (key) {
      var annotation = sanityBlock.markDefs.find(function (def) {
        return def._key === key;
      });
      annotations[annotation._type] = annotation;
    });
  }
  var range = {
    kind: 'range',
    text: text,
    marks: decorators.map(toRawMark)
  };

  if (!annotations) {
    return { kind: 'text', key: span._key, ranges: [range] };
  }

  return {
    kind: 'inline',
    isVoid: false,
    key: span._key,
    type: 'span',
    data: { annotations: annotations },
    nodes: [{ kind: 'text', key: span._key + '0', ranges: [range] }]
  };
}

// Block type object
function sanityBlockToRawNode(sanityBlock, type) {
  // eslint-disable-next-line no-unused-vars
  var children = sanityBlock.children,
      _type = sanityBlock._type,
      markDefs = sanityBlock.markDefs,
      rest = _objectWithoutProperties(sanityBlock, ['children', '_type', 'markDefs']);

  var restData = hasKeys(rest) ? { data: _extends({ _type: _type }, rest) } : {};

  if (!sanityBlock._key) {
    sanityBlock._key = (0, _randomKey2.default)(12);
  }

  return _extends({
    kind: 'block',
    key: sanityBlock._key,
    isVoid: false,
    type: 'contentBlock'
  }, restData, {
    nodes: children.map(function (child) {
      return sanitySpanToRawSlateBlockNode(child, sanityBlock);
    })
  });
}

// Embedded object
function sanityBlockItemToRaw(blockItem, type) {
  if (!blockItem._key) {
    blockItem._key = (0, _randomKey2.default)(12);
  }
  return {
    kind: 'block',
    key: blockItem._key,
    type: type ? type.name : '__unknown', // __unknown is needed to map to component in slate schema, see prepareSlateForBlockEditor.js
    isVoid: true,
    data: { value: blockItem },
    nodes: []
  };
}

function sanityBlockItemToRawNode(blockItem, type) {
  var blockItemType = resolveTypeName(blockItem);

  var memberType = type.of.find(function (ofType) {
    return ofType.name === blockItemType;
  });

  return blockItemType === 'block' ? sanityBlockToRawNode(blockItem, memberType) : sanityBlockItemToRaw(blockItem, memberType);
}

function sanityBlocksArrayToRawNodes(blockArray, type) {
  return blockArray.filter(Boolean) // this is a temporary guard against null values, @todo: remove
  .map(function (item) {
    return sanityBlockItemToRawNode(item, type);
  });
}

function blocksToSlateState(array, type) {
  var defaultNodes = [_extends({}, _constants.SLATE_DEFAULT_BLOCK, { nodes: [{ kind: 'text', text: '' }] })];
  return {
    kind: 'state',
    document: {
      kind: 'document',
      data: {},
      nodes: array && array.length > 0 ? sanityBlocksArrayToRawNodes(array, type) : defaultNodes
    }
  };
}