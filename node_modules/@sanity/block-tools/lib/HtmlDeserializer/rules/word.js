'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = createWordRules;

var _constants = require('../../constants');

var _helpers = require('../helpers');

function getListItemStyle(el) {
  var style = void 0;
  if (style = el.getAttribute('style')) {
    if (!style.match(/lfo\d+/)) {
      return undefined;
    }
    return style.match('lfo1') ? 'bullet' : 'number';
  }
  return undefined;
}

function getListItemLevel(el) {
  var style = void 0;
  if (style = el.getAttribute('style')) {
    var levelMatch = style.match(/level\d+/);
    if (!levelMatch) {
      return undefined;
    }
    var level = levelMatch[0].match(/\d/)[0];
    return parseInt(level, 10) || 1;
  }
  return undefined;
}

function isWordListElement(el) {
  if (el.className) {
    return el.className === 'MsoListParagraphCxSpFirst' || el.className === 'MsoListParagraphCxSpMiddle' || el.className === 'MsoListParagraphCxSpLast';
  }
  return undefined;
}

function createWordRules(blockContentType) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};


  return [{
    deserialize: function deserialize(el, next) {
      if ((0, _helpers.tagName)(el) === 'p' && isWordListElement(el)) {
        return _extends({}, _constants.DEFAULT_BLOCK, {
          listItem: getListItemStyle(el),
          level: getListItemLevel(el),
          style: 'normal',
          children: next(el.childNodes)
        });
      }
      return undefined;
    }
  }];
}