'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.resolveListItem = resolveListItem;
exports.default = createDefaultRules;

var _randomKey = require('../../util/randomKey');

var _randomKey2 = _interopRequireDefault(_randomKey);

var _constants = require('../../constants');

var _helpers = require('../helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function resolveListItem(listNodeTagName) {
  var listStyle = void 0;
  switch (listNodeTagName) {
    case 'ul':
      listStyle = 'bullet';
      break;
    case 'ol':
      listStyle = 'number';
      break;
    default:
      listStyle = 'bullet';
  }
  return listStyle;
}

function createDefaultRules(blockContentType) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  return [

  // Text nodes
  {
    deserialize: function deserialize(el) {
      var isValidText = el.textContent !== ' ' && (0, _helpers.tagName)(el.parentNode) !== 'body';
      if (el.nodeName === '#text' && isValidText) {
        return _extends({}, _constants.DEFAULT_SPAN, {
          marks: [],
          text: el.value || el.nodeValue
        });
      }
      return undefined;
    }
  },

  // Blockquote element
  {
    deserialize: function deserialize(el, next) {
      if ((0, _helpers.tagName)(el) !== 'blockquote') {
        return undefined;
      }
      var blocks = _extends({}, _constants.HTML_BLOCK_TAGS, _constants.HTML_HEADER_TAGS);
      delete blocks.blockquote;
      var children = [];
      el.childNodes.forEach(function (node, index) {
        if (node.nodeType === 1 && Object.keys(blocks).includes(node.localName.toLowerCase())) {
          var span = el.ownerDocument.createElement('span');
          span.appendChild(el.ownerDocument.createTextNode('\r'));
          node.childNodes.forEach(function (cn) {
            span.appendChild(cn.cloneNode(true));
          });
          if (index !== el.childNodes.length) {
            span.appendChild(el.ownerDocument.createTextNode('\r'));
          }
          children.push(span);
        } else {
          children.push(node);
        }
      });

      return {
        _type: 'block',
        style: 'blockquote',
        markDefs: [],
        children: next(children)
      };
    }
  },

  // Block elements
  {
    deserialize: function deserialize(el, next) {
      var blocks = _extends({}, _constants.HTML_BLOCK_TAGS, _constants.HTML_HEADER_TAGS);
      var block = blocks[(0, _helpers.tagName)(el)];
      if (!block) {
        return undefined;
      }
      // Don't add blocks into list items
      if (el.parentNode && (0, _helpers.tagName)(el) === 'li') {
        return next(el.childNodes);
      }
      // If style is not supported, return a defaultBlockType
      if (!options.enabledBlockStyles.includes(block.style)) {
        block = _constants.DEFAULT_BLOCK;
      }
      return _extends({}, block, {
        children: next(el.childNodes)
      });
    }
  },

  // Ignore span tags
  {
    deserialize: function deserialize(el, next) {
      var span = _constants.HTML_SPAN_TAGS[(0, _helpers.tagName)(el)];
      if (!span) {
        return undefined;
      }
      return next(el.childNodes);
    }
  },

  // Ignore list containers
  {
    deserialize: function deserialize(el, next) {
      var listContainer = _constants.HTML_LIST_CONTAINER_TAGS[(0, _helpers.tagName)(el)];
      if (!listContainer) {
        return undefined;
      }
      return next(el.childNodes);
    }
  },

  // Deal with br's
  {
    deserialize: function deserialize(el, next) {
      if ((0, _helpers.tagName)(el) === 'br') {
        return _extends({}, _constants.DEFAULT_SPAN, {
          text: '\n'
        });
      }
      return undefined;
    }
  },

  // Deal with list items
  {
    deserialize: function deserialize(el, next) {
      var listItem = _constants.HTML_LIST_ITEM_TAGS[(0, _helpers.tagName)(el)];
      if (!listItem || !el.parentNode || !_constants.HTML_LIST_CONTAINER_TAGS[(0, _helpers.tagName)(el.parentNode)]) {
        return undefined;
      }
      listItem.listItem = resolveListItem((0, _helpers.tagName)(el.parentNode));
      return _extends({}, listItem, {
        children: next(el.childNodes)
      });
    }
  },

  // Deal with decorators
  {
    deserialize: function deserialize(el, next) {
      var decorator = _constants.HTML_DECORATOR_TAGS[(0, _helpers.tagName)(el)];
      if (!decorator || !options.enabledSpanDecorators.includes(decorator)) {
        return undefined;
      }
      return {
        _type: '__decorator',
        name: decorator,
        children: next(el.childNodes)
      };
    }
  },

  // Special case for hyperlinks, add annotation (if allowed by schema),
  // If not supported just write out the link text and href in plain text.
  {
    deserialize: function deserialize(el, next) {
      if ((0, _helpers.tagName)(el) != 'a') {
        return undefined;
      }
      var linkEnabled = options.enabledBlockAnnotations.includes('link');
      var href = el.getAttribute('href');
      if (!href) {
        return next(el.childNodes);
      }
      var markDef = void 0;
      if (linkEnabled) {
        markDef = {
          _key: (0, _randomKey2.default)(12),
          _type: 'link',
          href: href
        };
      }
      return {
        _type: '__annotation',
        markDef: markDef,
        children: linkEnabled ? next(el.childNodes) : el.appendChild(new Text(' (' + href + ')') // TODO: make server side compatible
        ) && next(el.childNodes)
      };
    }
  }];
}