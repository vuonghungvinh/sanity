'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.createRuleOptions = createRuleOptions;
exports.tagName = tagName;
exports.preprocess = preprocess;
exports.defaultParseHtml = defaultParseHtml;
exports.flattenNestedBlocks = flattenNestedBlocks;
exports.trimWhitespace = trimWhitespace;
exports.ensureRootIsBlocks = ensureRootIsBlocks;

var _constants = require('../constants');

var _blockContentTypeToOptions = require('../util/blockContentTypeToOptions');

var _blockContentTypeToOptions2 = _interopRequireDefault(_blockContentTypeToOptions);

var _preprocessors = require('./preprocessors');

var _preprocessors2 = _interopRequireDefault(_preprocessors);

var _resolveJsType = require('../util/resolveJsType');

var _resolveJsType2 = _interopRequireDefault(_resolveJsType);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A utility function to create the options needed for the various rule sets,
 * based on the structure of the blockContentType
 *
 * @param {Object} The compiled schema type for the block content
 * @return {Object}
 */

function createRuleOptions(blockContentType) {
  var options = (0, _blockContentTypeToOptions2.default)(blockContentType);
  var enabledBlockStyles = options.enabledBlockStyles || _constants.DEFAULT_SUPPORTED_STYLES;
  var enabledSpanDecorators = options.enabledSpanDecorators || _constants.DEFAULT_SUPPORTED_DECORATORS;
  var enabledBlockAnnotations = options.enabledBlockAnnotations || _constants.DEFAULT_SUPPORTED_ANNOTATIONS;
  return {
    enabledBlockStyles: enabledBlockStyles,
    enabledSpanDecorators: enabledSpanDecorators,
    enabledBlockAnnotations: enabledBlockAnnotations
  };
}

/**
 * A utility function that always return a lowerCase version of the element.tagName
 *
 * @param {Object} DOMParser element
 * @return {String} Lowercase tagName for that element
 */

function tagName(el) {
  if (!el || el.nodeType !== 1) {
    return undefined;
  }
  return el.tagName.toLowerCase();
}

// TODO: make this plugin-style
function preprocess(html, parseHtml, evaluate) {
  var compactHtml = html.trim() // Trim whitespace
  .replace(/\s\s+/g, ' ') // Remove multiple whitespace
  .replace(/[\r\n]/g, ' '); // Remove newlines / carriage returns
  var doc = parseHtml(compactHtml);
  _preprocessors2.default.forEach(function (processor) {
    processor(html, doc, evaluate);
  });
  return doc;
}

/**
 * A default `parseHtml` function that returns the html using `DOMParser`.
 *
 * @param {String} html
 * @return {Object}
 */

function defaultParseHtml() {
  if ((0, _resolveJsType2.default)(DOMParser) === 'undefined') {
    throw new Error('The native `DOMParser` global which the `Html` deserializer uses by ' + 'default is not present in this environment. ' + 'You must supply the `options.parseHtml` function instead.');
  }
  return function (html) {
    return new DOMParser().parseFromString(html, 'text/html');
  };
}

function flattenNestedBlocks(blocks) {
  var depth = 0;
  var flattened = [];
  var traverse = function traverse(_nodes) {
    var toRemove = [];
    _nodes.forEach(function (node, i) {
      if (depth === 0) {
        flattened.push(node);
      }
      if (node._type === 'block') {
        if (depth > 0) {
          toRemove.push(node);
          flattened.push(node);
        }
        depth++;
        traverse(node.children);
      }
    });
    toRemove.forEach(function (node) {
      _nodes.splice(_nodes.indexOf(node), 1);
    });
    depth--;
  };
  traverse(blocks);
  return flattened;
}

function trimWhitespace(blocks) {
  blocks.forEach(function (block) {
    var nextSpan = function nextSpan(child, index) {
      var next = block.children[index + 1];
      return next && next._type === 'span' ? next : null;
    };
    var prevSpan = function prevSpan(child, index) {
      var prev = block.children[index - 1];
      return prev && prev._type === 'span' ? prev : null;
    };
    block.children.forEach(function (child, index) {
      if (child._type !== 'span') {
        return;
      }
      var nextChild = nextSpan(child, index);
      var prevChild = prevSpan(child, index);
      if (index === 0) {
        child.text = child.text.replace(/^[^\S\n]+/g, '');
      }
      if (index === block.children.length - 1) {
        child.text = child.text.replace(/[^\S\n]+$/g, '');
      }
      if (/\s/.test(child.text.substring(child.text.length - 1)) && nextChild && /\s/.test(nextChild.text.substring(0, 1))) {
        child.text = child.text.replace(/[^\S\n]+$/g, '');
      }
      if (/\s/.test(child.text.substring(0, 1)) && prevChild && /\s/.test(prevChild.text.substring(prevChild.text.length - 1))) {
        child.text = child.text.replace(/^[^\S\n]+/g, '');
      }
      if (!child.text) {
        block.children.splice(index, 1);
      }
    });
  });
  return blocks;
}

function ensureRootIsBlocks(blocks) {
  return blocks.reduce(function (memo, node, i, original) {

    if (node._type === 'block') {
      memo.push(node);
      return memo;
    }

    if (i > 0 && original[i - 1]._type !== 'block') {
      var _block = memo[memo.length - 1];
      _block.children.push(node);
      return memo;
    }

    var block = _extends({}, _constants.DEFAULT_BLOCK, {
      children: [node]
    });

    memo.push(block);
    return memo;
  }, []);
}