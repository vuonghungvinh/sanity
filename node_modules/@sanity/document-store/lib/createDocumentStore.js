'use strict';

var _omit2 = require('lodash/omit');

var _omit3 = _interopRequireDefault(_omit2);

var _observable = require('@sanity/observable');

var _observable2 = _interopRequireDefault(_observable);

var _nanoPubsub = require('nano-pubsub');

var _nanoPubsub2 = _interopRequireDefault(_nanoPubsub);

var _mutator = require('@sanity/mutator');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var NOOP = function NOOP() {};

function createBufferedDocument(documentId, server) {

  var serverEvents$ = _observable2.default.from(server.byId(documentId)).share();
  var saves = (0, _nanoPubsub2.default)();

  var bufferedDocs$ = serverEvents$.filter(function (event) {
    return event.type === 'snapshot';
  }).map(function (event) {
    return event.document;
  }).map(function (snapshot) {
    var bufferedDocument = new _mutator.BufferedDocument(snapshot || null);

    bufferedDocument.commitHandler = function commitHandler(opts) {
      var payload = opts.mutation.params;

      // TODO:
      // right now the BufferedDocument just commits fire-and-forget-ish
      // We should be able to handle failures and retry here

      server.mutate((0, _omit3.default)(payload, 'resultRev')).subscribe({
        next: function next(res) {
          opts.success(res);
          saves.publish();
        },
        error: opts.failure
      });
    };

    var rebase$ = new _observable2.default(function (rebaseObserver) {
      bufferedDocument.onRebase = function (edge) {
        rebaseObserver.next({ type: 'rebase', document: edge });
      };
      return function () {
        bufferedDocument.onRebase = NOOP;
      };
    }).share();

    var mutation$ = new _observable2.default(function (mutationObserver) {
      bufferedDocument.onMutation = function (_ref) {
        var mutation = _ref.mutation,
            remote = _ref.remote;

        mutationObserver.next({
          type: 'mutation',
          document: bufferedDocument.LOCAL,
          mutations: mutation.mutations,
          origin: remote ? 'remote' : 'local'
        });
      };

      var serverMutations = serverEvents$.filter(function (event) {
        return event.type === 'mutation';
      })
      // .do(event => {
      //   console.log('server event arrived', event)
      // })
      .subscribe(function (event) {
        return bufferedDocument.arrive(new _mutator.Mutation(event));
      });

      return function () {
        serverMutations.unsubscribe();
        bufferedDocument.onMutation = NOOP;
      };
    }).share();

    return {
      events: new _observable2.default(function (observer) {
        observer.next({ type: 'snapshot', document: bufferedDocument.LOCAL });
        return mutation$.merge(rebase$).subscribe(observer);
      }),
      patch: function patch(patches) {
        var mutations = patches.map(function (patch) {
          return Object.assign({}, patch, { id: documentId });
        }).map(function (patch) {
          return { patch: patch };
        });

        bufferedDocument.add(new _mutator.Mutation({ mutations: mutations }));
      },
      create: function create(document) {
        var mutation = {
          create: Object.assign({ id: documentId }, document)
        };
        bufferedDocument.add(new _mutator.Mutation({ mutations: [mutation] }));
      },
      createIfNotExists: function createIfNotExists(document) {
        bufferedDocument.add(new _mutator.Mutation({ mutations: [{ createIfNotExists: document }] }));
      },
      createOrReplace: function createOrReplace(document) {
        bufferedDocument.add(new _mutator.Mutation({ mutations: [{ createOrReplace: document }] }));
      },
      delete: function _delete() {
        bufferedDocument.add(new _mutator.Mutation({ mutations: [{ delete: { id: documentId } }] }));
      },
      commit: function commit() {
        return new _observable2.default(function (observer) {
          // todo: connect observable with request from bufferedDocument.commit somehow
          bufferedDocument.commit();
          return saves.subscribe(function () {
            observer.next();
            observer.complete();
          });
        });
      }
    };
  }).share();

  var currentBuffered = void 0;
  var cachedBuffered = new _observable2.default(function (observer) {
    if (currentBuffered) {
      observer.next(currentBuffered);
      observer.complete();
    }
    return bufferedDocs$.do(function (doc) {
      currentBuffered = doc;
    }).subscribe(observer);
  });

  return {
    events: cachedBuffered.switchMap(function (bufferedDoc) {
      return bufferedDoc.events;
    }),
    patch: function patch(patches) {
      cachedBuffered.subscribe(function (bufferedDoc) {
        return bufferedDoc.patch(patches);
      });
    },
    create: function create(document) {
      cachedBuffered.subscribe(function (bufferedDoc) {
        return bufferedDoc.create(document);
      });
    },
    createIfNotExists: function createIfNotExists(document) {
      cachedBuffered.subscribe(function (bufferedDoc) {
        return bufferedDoc.createIfNotExists(document);
      });
    },
    createOrReplace: function createOrReplace(document) {
      cachedBuffered.subscribe(function (bufferedDoc) {
        return bufferedDoc.createOrReplace(document);
      });
    },
    delete: function _delete() {
      cachedBuffered.subscribe(function (bufferedDoc) {
        return bufferedDoc.delete();
      });
    },
    commit: function commit() {
      return cachedBuffered.switchMap(function (bufferedDoc) {
        return bufferedDoc.commit();
      });
    }
  };
}

module.exports = function createDocumentStore(_ref2) {
  var serverConnection = _ref2.serverConnection;


  return {
    byId: byId,
    byIds: byIds,
    query: query,
    create: create,
    checkout: checkout,
    patch: patchDoc,
    delete: deleteDoc,
    createOrReplace: createOrReplace,
    createIfNotExists: createIfNotExists
  };

  function patchDoc(documentId, patches) {
    var doc = checkout(documentId);
    doc.patch(patches);
    return doc.commit();
  }

  function deleteDoc(documentId) {
    return checkout(documentId).delete().commit();
  }

  function byId(documentId) {
    return checkout(documentId).events;
  }

  function checkout(documentId) {
    return createBufferedDocument(documentId, serverConnection);
  }

  function byIds(documentIds) {
    return new _observable2.default(function (observer) {
      var documentSubscriptions = documentIds.map(function (id) {
        return byId(id).subscribe(observer);
      });

      return function () {
        documentSubscriptions.map(function (subscription) {
          return subscription.unsubscribe();
        });
      };
    });
  }

  function query(_query, params) {
    return _observable2.default.from(serverConnection.query(_query, params));
  }

  function create(document) {
    return _observable2.default.from(serverConnection.create(document));
  }

  function createIfNotExists(document) {
    return _observable2.default.from(serverConnection.createIfNotExists(document));
  }

  function createOrReplace(document) {
    return _observable2.default.from(serverConnection.createOrReplace(document));
  }
};