'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DRAFTS_FOLDER = undefined;

var _union2 = require('lodash/union');

var _union3 = _interopRequireDefault(_union2);

var _flatten2 = require('lodash/flatten');

var _flatten3 = _interopRequireDefault(_flatten2);

var _compact2 = require('lodash/compact');

var _compact3 = _interopRequireDefault(_compact2);

var _flow2 = require('lodash/flow');

var _flow3 = _interopRequireDefault(_flow2);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _schema = require('part:@sanity/base/schema?');

var _schema2 = _interopRequireDefault(_schema);

var _client = require('part:@sanity/base/client?');

var _client2 = _interopRequireDefault(_client);

var _preview = require('part:@sanity/base/preview?');

var _preview2 = _interopRequireDefault(_preview);

var _multicast = require('@sanity/observable/multicast');

var _multicast2 = _interopRequireDefault(_multicast);

var _router = require('part:@sanity/base/router');

var _searchIcon = require('part:@sanity/base/search-icon');

var _searchIcon2 = _interopRequireDefault(_searchIcon);

var _spinner = require('part:@sanity/components/loading/spinner');

var _spinner2 = _interopRequireDefault(_spinner);

var _reactClickOutside = require('react-click-outside');

var _reactClickOutside2 = _interopRequireDefault(_reactClickOutside);

var _reactInk = require('react-ink');

var _reactInk2 = _interopRequireDefault(_reactInk);

var _Search = require('./styles/Search.css');

var _Search2 = _interopRequireDefault(_Search);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function isParentOf(possibleParent, possibleChild) {
  var current = possibleChild;
  while (current) {
    if (current === possibleParent) {
      return true;
    }
    current = current.parentNode;
  }
  return false;
}

var DRAFTS_FOLDER = exports.DRAFTS_FOLDER = 'drafts';
var DRAFTS_PREFIX = DRAFTS_FOLDER + '.';

function isDraftId(id) {
  return id.startsWith(DRAFTS_PREFIX);
}

function getPublishedId(id) {
  return isDraftId(id) ? id.slice(DRAFTS_PREFIX.length) : id;
}

function getDraftId(id) {
  return isDraftId(id) ? id : DRAFTS_PREFIX + id;
}

// Removes published documents that also has a draft
function removeDupes(documents) {
  var drafts = documents.map(function (doc) {
    return doc._id;
  }).filter(isDraftId);

  return documents.filter(function (doc) {
    var draftId = getDraftId(doc._id);
    var publishedId = getPublishedId(doc._id);
    var hasDraft = drafts.includes(draftId);
    var isPublished = doc._id === publishedId;
    return isPublished ? !hasDraft : true;
  });
}

var combineFields = (0, _flow3.default)([_flatten3.default, _union3.default, _compact3.default]);

function search(query) {
  if (!_client2.default) {
    throw new Error('Sanity client is missing');
  }

  var candidateTypes = _schema2.default.getTypeNames().filter(function (typeName) {
    return !typeName.startsWith('sanity.');
  }).map(function (typeName) {
    return _schema2.default.get(typeName);
  });

  var terms = query.split(/\s+/).filter(Boolean);

  var uniqueFields = combineFields(candidateTypes.map(function (type) {
    return type.__unstable_searchFields;
  }));
  var constraints = terms.map(function (term) {
    return uniqueFields.map(function (field) {
      return field + ' match \'' + term + '*\'';
    });
  });
  var constraintString = constraints.map(function (constraint) {
    return '(' + constraint.join(' || ') + ')';
  }).join(' && ');
  return _client2.default.observable.fetch('*[' + constraintString + '][0...10]');
}

exports.default = (0, _reactClickOutside2.default)(function (_React$Component) {
  _inherits(Search, _React$Component);

  function Search() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Search);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Search.__proto__ || Object.getPrototypeOf(Search)).call.apply(_ref, [this].concat(args))), _this), _this.input$ = new _multicast2.default(), _this.componentWillUnmount$ = new _multicast2.default(), _this.state = {
      isOpen: false,
      hits: [],
      activeIndex: -1,
      inputValue: ''
    }, _this.handleInputChange = function (event) {
      _this.input$.next(event);
      _this.open();
    }, _this.handleKeyPress = function (event) {
      _this.inputElement.focus();
    }, _this.handleKeyDown = function (event) {
      if (event.key === 'Backspace') {
        _this.inputElement.focus();
      }
      if (event.key === 'Escape') {
        _this.close();
      }
      if (event.key === 'Enter') {
        _this.listElement.querySelector('[data-hit-index="' + _this.state.activeIndex + '"]').click();
      }
      var _this$state = _this.state,
          isOpen = _this$state.isOpen,
          hits = _this$state.hits,
          activeIndex = _this$state.activeIndex;


      var isArrowKey = ['ArrowUp', 'ArrowDown'].includes(event.key);

      if (!isOpen && isArrowKey) {
        _this.open();
        return;
      }

      var lastIndex = hits.length - 1;
      if (isArrowKey) {
        event.preventDefault();
        var nextIndex = activeIndex + (event.key === 'ArrowUp' ? -1 : 1);
        if (nextIndex < 0) {
          nextIndex = lastIndex;
        }
        if (nextIndex > lastIndex) {
          nextIndex = 0;
        }
        _this.setState({ activeIndex: nextIndex });
      }
    }, _this.handleClickOutside = function (el) {
      if (_this.state.isOpen) {
        _this.close();
      }
    }, _this.handleHitClick = function (el) {
      _this.close();
    }, _this.handleInputClick = function (el) {
      _this.open();
    }, _this.handleFocus = function (el) {
      _this.open();
    }, _this.handleBlur = function (el) {
      if (!isParentOf(_this.rootElement, el.relatedTarget)) {
        _this.close();
      }
    }, _this.setInput = function (el) {
      _this.inputElement = el;
    }, _this.setListElement = function (el) {
      _this.listElement = el;
    }, _this.setRootElement = function (el) {
      _this.rootElement = el;
    }, _this.handleHitMouseDown = function (ev) {
      _this.setState({
        activeIndex: Number(ev.currentTarget.getAttribute('data-hit-index'))
      });
    }, _this.handleHitMouseUp = function () {
      _this.inputElement.focus();
    }, _this.renderItem = function (item, index) {
      var type = _schema2.default.get(item._type);
      var activeIndex = _this.state.activeIndex;

      return _react2.default.createElement(
        _router.IntentLink,
        {
          intent: 'edit',
          params: { id: item._id, type: type.name },
          className: activeIndex === index ? _Search2.default.activeLink : _Search2.default.link,
          'data-hit-index': index,
          onMouseDown: _this.handleHitMouseDown,
          onMouseUp: _this.handleHitMouseUp,
          onClick: _this.handleHitClick,
          tabIndex: -1
        },
        _react2.default.createElement(
          'div',
          { className: _Search2.default.itemType },
          type.title
        ),
        _react2.default.createElement(_preview2.default, {
          value: item,
          layout: 'default',
          type: type
        }),
        _react2.default.createElement(_reactInk2.default, { duration: 200, opacity: 0.10, radius: 200 })
      );
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Search, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      this.input$.asObservable().map(function (event) {
        return event.target.value;
      }).do(function (inputValue) {
        return _this2.setState({ inputValue: inputValue });
      }).takeUntil(this.componentWillUnmount$.asObservable()).subscribe();

      this.input$.asObservable().map(function (event) {
        return event.target.value;
      }).debounceTime(100).do(function () {
        _this2.setState({
          isSearching: true
        });
      }).switchMap(search)
      // we need this filtering because the search may return documents of types not in schema
      .map(function (hits) {
        return hits.filter(function (hit) {
          return _schema2.default.has(hit._type);
        });
      }).map(removeDupes).do(function (hits) {
        _this2.setState({
          isSearching: false,
          hits: hits
        });
      }).takeUntil(this.componentWillUnmount$.asObservable()).subscribe();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.componentWillUnmount$.next();
      this.componentWillUnmount$.complete();
    }
  }, {
    key: 'close',
    value: function close() {
      this.setOpen(false);
    }
  }, {
    key: 'open',
    value: function open() {
      this.setOpen(true);
    }
  }, {
    key: 'setOpen',
    value: function setOpen(isOpen) {
      this.setState({ isOpen: isOpen });
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps, prevState) {
      if (!prevState.isOpen && this.state.isOpen) {
        this.inputElement.select();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _state = this.state,
          isSearching = _state.isSearching,
          hits = _state.hits,
          isOpen = _state.isOpen,
          inputValue = _state.inputValue;

      return _react2.default.createElement(
        'div',
        { className: _Search2.default.root, ref: this.setRootElement },
        _react2.default.createElement(
          'div',
          { className: _Search2.default.inner },
          _react2.default.createElement(
            'label',
            { className: _Search2.default.label },
            _react2.default.createElement(
              'i',
              { className: _Search2.default.icon, 'aria-hidden': true },
              _react2.default.createElement(_searchIcon2.default, null)
            )
          ),
          _react2.default.createElement('input', {
            className: _Search2.default.input,
            type: 'search',
            value: isOpen ? inputValue : '',
            onInput: this.handleInputChange,
            onBlur: this.handleBlur,
            onClick: this.handleInputClick,
            onFocus: this.handleFocus,
            onKeyDown: this.handleKeyDown,
            placeholder: 'Search\u2026',
            ref: this.setInput

          }),
          _react2.default.createElement(
            'div',
            { className: _Search2.default.spinner },
            isSearching && _react2.default.createElement(_spinner2.default, null)
          )
        ),
        isOpen && hits && hits.length > 0 && _react2.default.createElement(
          'div',
          { className: _Search2.default.listContainer },
          _react2.default.createElement(
            'ul',
            {
              className: _Search2.default.hits,
              onKeyDown: this.handleKeyDown,
              onKeyPress: this.handleKeyPress,
              ref: this.setListElement
            },
            hits.map(function (hit, index) {
              return _react2.default.createElement(
                'li',
                { key: hit._id, className: _Search2.default.hit },
                _this3.renderItem(hit, index)
              );
            })
          )
        )
      );
    }
  }]);

  return Search;
}(_react2.default.Component));