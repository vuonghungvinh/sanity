'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _ActionModal = require('./ActionModal');

var _ActionModal2 = _interopRequireDefault(_ActionModal);

var _fab = require('part:@sanity/components/buttons/fab');

var _fab2 = _interopRequireDefault(_fab);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ActionButton = function (_React$Component) {
  _inherits(ActionButton, _React$Component);

  function ActionButton(props) {
    _classCallCheck(this, ActionButton);

    var _this = _possibleConstructorReturn(this, (ActionButton.__proto__ || Object.getPrototypeOf(ActionButton)).call(this, props));

    _this.handleToggleModal = _this.handleToggleModal.bind(_this);

    _this.state = {
      modalOpen: false
    };
    return _this;
  }

  _createClass(ActionButton, [{
    key: 'handleToggleModal',
    value: function handleToggleModal() {
      this.setState({ modalOpen: !this.state.modalOpen });
    }
  }, {
    key: 'render',
    value: function render() {
      if (this.state.modalOpen) {
        return _react2.default.createElement(_ActionModal2.default, {
          actions: this.props.actions,
          onClose: this.handleToggleModal
        });
      }

      return _react2.default.createElement(_fab2.default, { onClick: this.handleToggleModal, ripple: true, colored: true });
    }
  }]);

  return ActionButton;
}(_react2.default.Component);

ActionButton.propTypes = {
  actions: _propTypes2.default.array
};
exports.default = ActionButton;