'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SchemaErrorReporter = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _schema = require('part:@sanity/base/schema');

var _schema2 = _interopRequireDefault(_schema);

var _SchemaErrors = require('./SchemaErrors');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function renderPath(path) {
  return path.map(function (segment) {
    if (segment.kind === 'type') {
      return (segment.name || '<unnamed>') + '(' + segment.type + ')';
    }
    if (segment.kind === 'property') {
      return segment.name;
    }
    if (segment.kind === 'type') {
      return segment.type + '(' + (segment.name || '<unnamed>') + ')';
    }
    return null;
  }).filter(Boolean).join(' > ');
}

function reportWarnings() {
  if (!__DEV__) {
    return;
  }
  /* eslint-disable no-console */
  var problemGroups = _schema2.default._validation;

  var groupsWithWarnings = problemGroups.filter(function (group) {
    return group.problems.some(function (problem) {
      return problem.severity === 'warning';
    });
  });
  if (groupsWithWarnings.length === 0) {
    return;
  }
  console.groupCollapsed('\u26A0\uFE0F Schema has ' + groupsWithWarnings.length + ' warnings');
  groupsWithWarnings.forEach(function (group, i) {
    var path = renderPath(group.path);
    console.group('%cAt ' + path, 'color: #FF7636');
    group.problems.forEach(function (problem, j) {
      console.log(problem.message);
    });
    console.groupEnd('At ' + path);
  });
  console.groupEnd('Schema warnings');
  /* eslint-enable no-console */
}

var SchemaErrorReporter = exports.SchemaErrorReporter = function (_React$Component) {
  _inherits(SchemaErrorReporter, _React$Component);

  function SchemaErrorReporter() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, SchemaErrorReporter);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = SchemaErrorReporter.__proto__ || Object.getPrototypeOf(SchemaErrorReporter)).call.apply(_ref, [this].concat(args))), _this), _this.componentDidMount = reportWarnings, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(SchemaErrorReporter, [{
    key: 'render',
    value: function render() {
      var problemGroups = _schema2.default._validation;

      var groupsWithErrors = problemGroups.filter(function (group) {
        return group.problems.some(function (problem) {
          return problem.severity === 'error';
        });
      });

      if (groupsWithErrors.length > 0) {
        return _react2.default.createElement(_SchemaErrors.SchemaErrors, { problemGroups: groupsWithErrors });
      }

      return this.props.children();
    }
  }]);

  return SchemaErrorReporter;
}(_react2.default.Component);

SchemaErrorReporter.propTypes = {
  children: _propTypes2.default.func
};