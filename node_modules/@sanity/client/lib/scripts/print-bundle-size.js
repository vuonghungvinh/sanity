'use strict';

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _boxen = require('boxen');

var _boxen2 = _interopRequireDefault(_boxen);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _gzipSize = require('gzip-size');

var _gzipSize2 = _interopRequireDefault(_gzipSize);

var _prettyBytes = require('pretty-bytes');

var _prettyBytes2 = _interopRequireDefault(_prettyBytes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-console */
var umdPath = _path2.default.join(__dirname, '..', '..', 'umd');
var bundlePath = _path2.default.join(umdPath, 'sanityClient.js');
var minPath = _path2.default.join(umdPath, 'sanityClient.min.js');

_fs2.default.readFile(bundlePath, function (bundleErr, bundle) {
  throwOnError(bundleErr);

  _fs2.default.readFile(minPath, function (minErr, minBundle) {
    throwOnError(minErr);

    (0, _gzipSize2.default)(bundle, function (gzipErr, gzipedSize) {
      throwOnError(gzipErr);

      var output = ['UMD bundle size:', '────────────────', 'Minified: ' + size(bundle.length), 'Minified + gzip: ' + size(gzipedSize)].join('\n');

      console.log((0, _boxen2.default)(output, {
        padding: 1,
        borderColor: 'yellow',
        align: 'right'
      }));
    });
  });
});

function throwOnError(err) {
  if (err && err.code === 'ENOENT') {
    throw new Error('File not found, did you run `npm run build` first?');
  } else if (err) {
    throw err;
  }
}

function size(bytes) {
  var color = bytes > 1024 * 50 ? 'red' : 'green';
  return _chalk2.default[color]((0, _prettyBytes2.default)(bytes));
}