'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _googleMapsInput = require('config:@sanity/google-maps-input');

var _googleMapsInput2 = _interopRequireDefault(_googleMapsInput);

var _GoogleMapsLoadProxy = require('./GoogleMapsLoadProxy');

var _GoogleMapsLoadProxy2 = _interopRequireDefault(_GoogleMapsLoadProxy);

var _GeopointSelect = require('./GeopointSelect');

var _GeopointSelect2 = _interopRequireDefault(_GeopointSelect);

var _default = require('part:@sanity/components/buttons/default');

var _default2 = _interopRequireDefault(_default);

var _default3 = require('part:@sanity/components/dialogs/default');

var _default4 = _interopRequireDefault(_default3);

var _default5 = require('part:@sanity/components/fieldsets/default');

var _default6 = _interopRequireDefault(_default5);

var _GeopointInput = require('../styles/GeopointInput.css');

var _GeopointInput2 = _interopRequireDefault(_GeopointInput);

var _PatchEvent = require('@sanity/form-builder/PatchEvent');

var _PatchEvent2 = _interopRequireDefault(_PatchEvent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var getLocale = function getLocale(context) {
  var intl = context.intl || {};
  return intl.locale || typeof window !== 'undefined' && window.navigator.language || 'en';
};

var GeopointInput = function (_React$Component) {
  _inherits(GeopointInput, _React$Component);

  function GeopointInput() {
    _classCallCheck(this, GeopointInput);

    var _this = _possibleConstructorReturn(this, (GeopointInput.__proto__ || Object.getPrototypeOf(GeopointInput)).call(this));

    _this.handleChange = function (latLng) {
      var _this$props = _this.props,
          type = _this$props.type,
          onChange = _this$props.onChange;

      onChange(_PatchEvent2.default.from((0, _PatchEvent.set)({
        _type: type.name,
        lat: latLng.lat(),
        lng: latLng.lng()
      })));
    };

    _this.handleClear = function () {
      var onChange = _this.props.onChange;

      onChange(_PatchEvent2.default.from((0, _PatchEvent.unset)()));
    };

    _this.handleToggleModal = _this.handleToggleModal.bind(_this);
    _this.handleCloseModal = _this.handleCloseModal.bind(_this);

    _this.state = {
      modalOpen: false
    };
    return _this;
  }

  _createClass(GeopointInput, [{
    key: 'handleToggleModal',
    value: function handleToggleModal() {
      this.setState({ modalOpen: !this.state.modalOpen });
    }
  }, {
    key: 'handleCloseModal',
    value: function handleCloseModal() {
      this.setState({ modalOpen: false });
    }
  }, {
    key: 'getStaticImageUrl',
    value: function getStaticImageUrl(value) {
      var loc = value.lat + ',' + value.lng;
      var params = {
        key: _googleMapsInput2.default.apiKey,
        center: loc,
        markers: loc,
        zoom: 13,
        scale: 2,
        size: '640x300'
      };

      var qs = Object.keys(params).reduce(function (res, param) {
        return res.concat(param + '=' + encodeURIComponent(params[param]));
      }, []);

      return 'https://maps.googleapis.com/maps/api/staticmap?' + qs.join('&');
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          value = _props.value,
          type = _props.type;


      if (!_googleMapsInput2.default || !_googleMapsInput2.default.apiKey) {
        return _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement(
            'p',
            null,
            'The ',
            _react2.default.createElement(
              'a',
              { href: 'https://sanity.io/docs/schema-types/geopoint-type' },
              'Geopoint type'
            ),
            ' needs a Google Maps API key with access to:'
          ),
          _react2.default.createElement(
            'ul',
            null,
            _react2.default.createElement(
              'li',
              null,
              'Google Maps JavaScript API'
            ),
            _react2.default.createElement(
              'li',
              null,
              'Google Places API Web Service'
            ),
            _react2.default.createElement(
              'li',
              null,
              'Google Static Maps API'
            )
          ),
          _react2.default.createElement(
            'p',
            null,
            'Please enter the API key with access to these services in',
            _react2.default.createElement(
              'code',
              { style: { whitespace: 'nowrap' } },
              '`<project-root>/config/@sanity/google-maps-input.json`'
            )
          )
        );
      }

      return _react2.default.createElement(
        _default6.default,
        { legend: type.title, description: type.description, className: _GeopointInput2.default.root },
        value && _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement('img', { className: _GeopointInput2.default.previewImage, src: this.getStaticImageUrl(value) })
        ),
        _react2.default.createElement(
          'div',
          { className: _GeopointInput2.default.functions },
          _react2.default.createElement(
            _default2.default,
            { onClick: this.handleToggleModal },
            value ? 'Edit' : 'Set location'
          ),
          value && _react2.default.createElement(
            _default2.default,
            { type: 'button', onClick: this.handleClear },
            'Remove'
          )
        ),
        this.state.modalOpen && _react2.default.createElement(
          _default4.default,
          {
            title: 'Place on map',
            onClose: this.handleCloseModal,
            onCloseClick: this.handleCloseModal,
            onOpen: this.handleOpenModal,
            message: 'Select location by dragging the marker or search for a place',
            isOpen: this.state.modalOpen
          },
          _react2.default.createElement(_GoogleMapsLoadProxy2.default, {
            value: value,
            apiKey: _googleMapsInput2.default.apiKey,
            onChange: this.handleChange,
            defaultLocation: _googleMapsInput2.default.defaultLocation,
            defaultZoom: _googleMapsInput2.default.defaultZoom,
            locale: getLocale(this.context),
            component: _GeopointSelect2.default
          })
        )
      );
    }
  }]);

  return GeopointInput;
}(_react2.default.Component);

GeopointInput.propTypes = {
  onChange: _propTypes2.default.func.isRequired,
  value: _propTypes2.default.shape({
    lat: _propTypes2.default.number,
    lng: _propTypes2.default.number
  }),
  type: _propTypes2.default.shape({
    title: _propTypes2.default.string.isRequired,
    description: _propTypes2.default.string
  })
};
GeopointInput.contextTypes = {
  intl: _propTypes2.default.shape({
    locale: _propTypes2.default.string
  })
};
exports.default = GeopointInput;