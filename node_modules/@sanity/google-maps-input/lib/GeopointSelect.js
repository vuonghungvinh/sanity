'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _GeopointSelect = require('../styles/GeopointSelect.css');

var _GeopointSelect2 = _interopRequireDefault(_GeopointSelect);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var GeopointSelect = function (_React$Component) {
  _inherits(GeopointSelect, _React$Component);

  function GeopointSelect(props) {
    _classCallCheck(this, GeopointSelect);

    var _this = _possibleConstructorReturn(this, (GeopointSelect.__proto__ || Object.getPrototypeOf(GeopointSelect)).call(this, props));

    _this.elementRefs = {};
    return _this;
  }

  _createClass(GeopointSelect, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      var _props$api = this.props.api,
          Circle = _props$api.Circle,
          places = _props$api.places,
          event = _props$api.event;

      var GMap = this.props.api.Map;
      var geoPoint = this.getValueLatLng();
      var options = {
        zoom: this.props.defaultZoom,
        center: geoPoint
      };

      this.mapInstance = new GMap(this.elementRefs.map, options);
      this.declareMarker();

      var searchBounds = new Circle({ center: geoPoint, radius: 100 }).getBounds();
      var input = this.elementRefs.searchInput;
      this.autoComplete = new places.Autocomplete(input, {
        bounds: searchBounds,
        types: [] // return all kinds of places
      });

      event.addListener(this.autoComplete, 'place_changed', this.handlePlaceChanged.bind(this));

      event.addListener(this.mapInstance, 'click', function (clickEvent) {
        _this2.setValue(clickEvent.latLng);
      });
    }
  }, {
    key: 'getValueLatLng',
    value: function getValueLatLng() {
      var _props = this.props,
          api = _props.api,
          value = _props.value,
          defaultLocation = _props.defaultLocation;

      return value ? new api.LatLng(value.lat, value.lng) : new api.LatLng(defaultLocation.lat, defaultLocation.lng);
    }
  }, {
    key: 'declareMarker',
    value: function declareMarker() {
      if (this.marker) {
        return this.marker;
      }

      var _props$api2 = this.props.api,
          Marker = _props$api2.Marker,
          event = _props$api2.event;

      this.marker = new Marker({
        position: this.getValueLatLng(),
        map: this.mapInstance,
        draggable: true
      });

      event.addListener(this.marker, 'dragend', this.handleMarkerDragEnd.bind(this));

      return this.marker;
    }
  }, {
    key: 'handlePlaceChanged',
    value: function handlePlaceChanged() {
      var place = this.autoComplete.getPlace();
      if (!place.geometry) {
        return;
      }

      this.setValue(place.geometry.location);
    }
  }, {
    key: 'handleMarkerDragEnd',
    value: function handleMarkerDragEnd(event) {
      this.setValue(event.latLng);
    }
  }, {
    key: 'setValue',
    value: function setValue(geoPoint) {
      this.props.onChange(geoPoint);
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this.mapInstance.panTo(this.getValueLatLng());
      this.marker.setPosition(this.getValueLatLng());
      this.elementRefs.searchInput.value = '';
    }
  }, {
    key: 'assignReference',
    value: function assignReference(type) {
      var _this3 = this;

      return function (el) {
        _this3.elementRefs[type] = el;
      };
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        { className: _GeopointSelect2.default.wrapper },
        _react2.default.createElement('div', {
          ref: this.assignReference('map'),
          className: _GeopointSelect2.default.map
        }),
        _react2.default.createElement(
          'div',
          { className: _GeopointSelect2.default.searchInput },
          _react2.default.createElement('input', {
            name: 'place',
            ref: this.assignReference('searchInput'),
            placeholder: 'Search for place or address',
            className: _GeopointSelect2.default.input
          })
        )
      );
    }
  }]);

  return GeopointSelect;
}(_react2.default.Component);

GeopointSelect.propTypes = {
  onChange: _propTypes2.default.func.isRequired,
  value: _propTypes2.default.shape({
    lat: _propTypes2.default.number,
    lng: _propTypes2.default.number
  }),
  api: _propTypes2.default.shape({
    Map: _propTypes2.default.func.isRequired,
    Circle: _propTypes2.default.func.isRequired,
    Marker: _propTypes2.default.func.isRequired,
    places: _propTypes2.default.shape({ Autocomplete: _propTypes2.default.func.isRequired }),
    event: _propTypes2.default.shape({ addListener: _propTypes2.default.func.isRequired })
  }).isRequired,
  defaultLocation: _propTypes2.default.shape({
    lat: _propTypes2.default.number,
    lng: _propTypes2.default.number
  }),
  defaultZoom: _propTypes2.default.number
};
GeopointSelect.defaultProps = {
  defaultZoom: 8,
  defaultLocation: { lng: 10.7460900, lat: 59.9127300 }
};
exports.default = GeopointSelect;