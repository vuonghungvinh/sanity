'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Mutation = require('./Mutation');

var _Mutation2 = _interopRequireDefault(_Mutation);

var _extractWithPath = require('../jsonpath/extractWithPath');

var _extractWithPath2 = _interopRequireDefault(_extractWithPath);

var _arrayToJSONMatchPath = require('../jsonpath/arrayToJSONMatchPath');

var _arrayToJSONMatchPath2 = _interopRequireDefault(_arrayToJSONMatchPath);

var _diffMatchPatch2 = require('diff-match-patch');

var _diffMatchPatch3 = _interopRequireDefault(_diffMatchPatch2);

var _debug = require('./debug');

var _debug2 = _interopRequireDefault(_debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Implements a buffer for mutations that incrementally optimises the mutations by eliminating set-operations that
// overwrite earlier set-operations, and rewrite set-operations that change strings into other strings into diffMatchPatch
// operations.


// An operation is one single operation of a mutation
var SquashingBuffer = function () {
  // setOperations contain the latest set operation by path. If the set-operations are updating strings to new
  // strings, they are rewritten as diffMatchPatch operations, any new set operations on the same paths overwrites
  // any older set operations. Only set-operations assigning plain values to plain values gets optimized like this.

  // The operations in the out-Mutation are not able to be optimized any further
  function SquashingBuffer(doc) {
    _classCallCheck(this, SquashingBuffer);

    if (doc) {
      (0, _debug2.default)('Reset mutation buffer to rev %s', doc._rev);
    } else {
      (0, _debug2.default)('Reset mutation buffer state to document being deleted');
    }
    this.staged = [];
    this.setOperations = {};
    this.BASIS = doc;
    this.PRESTAGE = doc;
    this.dmp = new _diffMatchPatch3.default();
  }
  // The document after the out-Mutation has been applied, but before the staged operations are committed.

  // The document forming the basis of this squash


  _createClass(SquashingBuffer, [{
    key: 'add',
    value: function add(mut) {
      var _this = this;

      mut.mutations.forEach(function (op) {
        return _this.addOperation(op);
      });
    }
  }, {
    key: 'hasChanges',
    value: function hasChanges() {
      return this.out || Object.keys(this.setOperations).length > 0;
    }

    // Extracts the mutations in this buffer. After this is done, the buffer lifecycle is over and the client should
    // create an new one with the new, updated BASIS.

  }, {
    key: 'purge',
    value: function purge(txnId) {
      this.stashStagedOperations();
      var result = null;
      if (this.out) {
        (0, _debug2.default)('Purged mutation buffer');
        result = new _Mutation2.default({
          mutations: this.out.mutations,
          resultRev: txnId,
          transactionId: txnId
        });
      }
      this.out = null;
      return result;
    }
  }, {
    key: 'addOperation',
    value: function addOperation(op) {
      // Is this a set patch, and only a set patch, and does it apply to the document at hand?
      if (op.patch && op.patch.set && op.patch.id === this.PRESTAGE._id && Object.keys(op.patch).length == 2) {
        // console.log("Attempting to apply optimised set patch")
        var setPatch = op.patch.set;
        var unoptimizable = {};
        // Apply all optimisable keys in the patch
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = Object.keys(setPatch)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var path = _step.value;

            // console.log("...", path)
            if (setPatch.hasOwnProperty(path)) {
              if (!this.optimiseSetOperation(path, setPatch[path])) {
                // If not optimisable, add to unoptimizable set
                unoptimizable[path] = setPatch[path];
              }
            }
          }
          // If any weren't optimisable, add them to an unoptimised set-operation, then
          // stash everything.
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        if (Object.keys(unoptimizable).length > 0) {
          (0, _debug2.default)('Unoptimizable set-operation detected, purging optimization buffer');
          this.staged.push({ patch: { id: this.PRESTAGE._id, set: unoptimizable } });
          this.stashStagedOperations();
        }
        return;
      }
      (0, _debug2.default)('Unoptimizable mutation detected, purging optimization buffer');
      // console.log("Unoptimizable operation, stashing", JSON.stringify(op))
      // Un-optimisable operations causes everything to be stashed
      this.staged.push(op);
      this.stashStagedOperations();
    }

    // Attempt to perform one single set operation in an optimised manner, return value reflects whether the
    // operation could be performed.

  }, {
    key: 'optimiseSetOperation',
    value: function optimiseSetOperation(path, nextValue) {
      // console.log('optimiseSetOperation', path, nextValue)
      // If target value is not a plain value, unable to optimise
      if ((typeof nextValue === 'undefined' ? 'undefined' : _typeof(nextValue)) === 'object') {
        // console.log("Not optimisable because next value is object")
        return false;
      }
      // Check the source values, if there is more than one value being assigned,
      // we won't optimise
      var matches = (0, _extractWithPath2.default)(path, this.PRESTAGE);
      // If we are not overwriting exactly one key, this cannot be optimised, so we bail
      if (matches.length !== 1) {
        // console.log('Not optimisable because match count is != 1', JSON.stringify(matches))
        return false;
      }
      // Okay, we are assigning exactly one value to exactly one existing slot, so we might optimise
      var match = matches[0];
      // If the value of the match is an array or object, we cannot safely optimise this since the meaning
      // of pre-existing operations might change (in theory, at least), so we bail
      if (_typeof(match.value) === 'object') {
        // console.log("Not optimisable because old value is object")
        return false;
      }
      // If the new and old value are the equal, we optimise this operation by discarding it
      // Now, let's build the operation
      var op = void 0;
      if (match.value === nextValue) {
        // If new and old values are equal, we optimise this by deleting the operation
        // console.log("Omitting operation")
        op = null;
      } else if (typeof match.value === 'string' && typeof nextValue === 'string') {
        // console.log("Rewriting to dmp")
        // We are updating a string to another string, so we are making a diffMatchPatch
        var patch = this.dmp.patch_make(match.value, nextValue).map(function (patch) {
          return patch.toString();
        }).join('');
        op = { patch: { id: this.PRESTAGE._id, diffMatchPatch: _defineProperty({}, path, patch) } };
      } else {
        // console.log("Not able to rewrite to dmp, making normal set")
        // We are changing the type of the value, so must make a normal set-operation
        op = { patch: { id: this.PRESTAGE._id, set: _defineProperty({}, path, nextValue) } };
      }
      // Let's make a plain, concrete path from the array-path. We use this to keep only the latest set
      // operation touching this path in the buffer.
      var canonicalPath = (0, _arrayToJSONMatchPath2.default)(match.path);
      // Store this operation, overwriting any previous operations touching this same path
      if (op) {
        this.setOperations[canonicalPath] = op;
      } else {
        delete this.setOperations[canonicalPath];
      }
      // Signal that we succeeded in optimizing this patch
      return true;
    }
  }, {
    key: 'stashStagedOperations',
    value: function stashStagedOperations() {
      var _this2 = this,
          _ops;

      // console.log('stashStagedOperations')
      // Short circuit if there are no staged operations
      var ops = [];
      if (this.out) {
        ops = this.out.mutations;
      }
      // Extract the existing outgoing operations if any
      Object.keys(this.setOperations).forEach(function (key) {
        ops.push(_this2.setOperations[key]);
      });
      (_ops = ops).push.apply(_ops, _toConsumableArray(this.staged));
      if (ops.length > 0) {
        this.out = new _Mutation2.default({ mutations: ops });
        this.PRESTAGE = this.out.apply(this.BASIS);
        this.staged = [];
        this.setOperations = {};
      }
    }

    // Rebases given the new base-document. Returns the new "edge" document with the buffered changes
    // integrated.

  }, {
    key: 'rebase',
    value: function rebase(newBasis) {
      this.stashStagedOperations();
      if (newBasis === null) {
        // If document was just deleted, we must throw out local changes
        this.out = null;
        this.PRESTAGE = this.BASIS = newBasis;
      } else {
        this.BASIS = newBasis;
        if (this.out) {
          this.PRESTAGE = this.out.apply(this.BASIS);
        } else {
          this.PRESTAGE = this.BASIS;
        }
      }
      return this.PRESTAGE;
    }
  }]);

  return SquashingBuffer;
}();

exports.default = SquashingBuffer;