'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _diffMatchPatch = require('diff-match-patch');

var _diffMatchPatch2 = _interopRequireDefault(_diffMatchPatch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var dmp = new _diffMatchPatch2.default();

var DiffMatchPatch = function () {
  function DiffMatchPatch(id, path, dmpPatchSrc) {
    _classCallCheck(this, DiffMatchPatch);

    this.id = id;
    this.path = path;
    this.dmpPatch = dmp.patch_fromText(dmpPatchSrc);
  }

  _createClass(DiffMatchPatch, [{
    key: 'apply',
    value: function apply(targets, accessor) {
      var _this = this;

      var result = accessor;
      targets.forEach(function (target) {
        if (target.isIndexReference()) {
          target.toIndicies(accessor).forEach(function (i) {
            var oldValue = result.getIndex(i).get();
            var nextValue = dmp.patch_apply(_this.dmpPatch, oldValue)[0];
            result = result.setIndex(i, nextValue);
          });
        } else if (target.isAttributeReference()) {
          var oldValue = result.getAttribute(target.name()).get();
          var nextValue = dmp.patch_apply(_this.dmpPatch, oldValue)[0];
          result = result.setAttribute(target.name(), nextValue);
        } else {
          throw new Error('Unable to apply diffMatchPatch to target ' + target.toString());
        }
      });
      return result;
    }
  }]);

  return DiffMatchPatch;
}();

exports.default = DiffMatchPatch;