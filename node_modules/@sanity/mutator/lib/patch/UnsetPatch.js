'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _util = require('./util');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var UnsetPatch = function () {
  function UnsetPatch(id, path) {
    _classCallCheck(this, UnsetPatch);

    this.id = id;
    this.path = path;
  }

  _createClass(UnsetPatch, [{
    key: 'apply',
    value: function apply(targets, accessor) {
      var result = accessor;
      switch (accessor.containerType()) {
        case 'array':
          result = result.unsetIndices((0, _util.targetsToIndicies)(targets, accessor));
          break;
        case 'object':
          targets.forEach(function (target) {
            result = result.unsetAttribute(target.name());
          });
          break;
        default:
          throw new Error('Target value is neither indexable or an object. This error should potentially just be silently ignored?');
      }
      return result;
    }
  }]);

  return UnsetPatch;
}();

exports.default = UnsetPatch;