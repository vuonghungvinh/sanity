'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _max2 = require('lodash/max');

var _max3 = _interopRequireDefault(_max2);

var _min2 = require('lodash/min');

var _min3 = _interopRequireDefault(_min2);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _util = require('./util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var InsertPatch = function () {
  function InsertPatch(id, location, path, items) {
    _classCallCheck(this, InsertPatch);

    this.id = id;
    this.location = location;
    this.path = path;
    this.items = items;
  }

  _createClass(InsertPatch, [{
    key: 'apply',
    value: function apply(targets, accessor) {
      var result = accessor;
      if (accessor.containerType() !== 'array') {
        throw new Error('Attempt to apply insert patch to non-array value');
      }
      switch (this.location) {
        case 'before':
          {
            var pos = minIndex(targets, accessor);
            result = result.insertItemsAt(pos, this.items);
            break;
          }
        case 'after':
          {
            var _pos = maxIndex(targets, accessor);
            result = result.insertItemsAt(_pos + 1, this.items);
            break;
          }
        case 'replace':
          {
            // TODO: Properly implement ranges in compliance with Gradient
            // This will only properly support single contiguous ranges
            var indicies = (0, _util.targetsToIndicies)(targets, accessor);
            result = result.unsetIndices(indicies);
            result = result.insertItemsAt(indicies[0], this.items);
            break;
          }
        default:
          {
            throw new Error('Unsupported location atm: ' + this.location);
          }
      }
      return result;
    }
  }]);

  return InsertPatch;
}();

exports.default = InsertPatch;


function minIndex(targets, accessor) {
  var result = (0, _min3.default)((0, _util.targetsToIndicies)(targets, accessor));
  // Ranges may be zero-length and not turn up in indices
  targets.forEach(function (target) {
    if (target.isRange()) {
      var _target$expandRange = target.expandRange(),
          start = _target$expandRange.start;

      if (start < result) {
        result = start;
      }
    }
  });
  return result;
}

function maxIndex(targets, accessor) {
  var result = (0, _max3.default)((0, _util.targetsToIndicies)(targets, accessor));
  // Ranges may be zero-length and not turn up in indices
  targets.forEach(function (target) {
    if (target.isRange()) {
      var _target$expandRange2 = target.expandRange(),
          end = _target$expandRange2.end;

      if (end > result) {
        result = end;
      }
    }
  });
  return result;
}