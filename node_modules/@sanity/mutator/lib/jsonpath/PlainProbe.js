'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// A default implementation of a probe for vanilla JS _values
var PlainProbe = function () {
  function PlainProbe(_value, path) {
    _classCallCheck(this, PlainProbe);

    this._value = _value;
    this.path = path || [];
  }

  _createClass(PlainProbe, [{
    key: 'containerType',
    value: function containerType() {
      if (Array.isArray(this._value)) {
        return 'array';
      } else if (this._value !== null && _typeof(this._value) === 'object') {
        return 'object';
      }
      return 'primitive';
    }
  }, {
    key: 'length',
    value: function length() {
      if (this.containerType() !== 'array') {
        throw new Error("Won't return length of non-indexable _value");
      }
      return this._value.length;
    }
  }, {
    key: 'getIndex',
    value: function getIndex(i) {
      if (this.containerType() !== 'array') {
        return false;
      }
      if (i >= this.length()) {
        return null;
      }
      return new PlainProbe(this._value[i], this.path.concat(i));
    }
  }, {
    key: 'hasAttribute',
    value: function hasAttribute(key) {
      if (this.containerType() !== 'object') {
        return false;
      }
      return this._value.hasOwnProperty(key);
    }
  }, {
    key: 'attributeKeys',
    value: function attributeKeys() {
      if (this.containerType() !== 'object') {
        return [];
      }
      return Object.keys(this._value);
    }
  }, {
    key: 'getAttribute',
    value: function getAttribute(key) {
      if (this.containerType() !== 'object') {
        throw new Error('getAttribute only applies to plain objects');
      }
      if (!this.hasAttribute(key)) {
        return null;
      }
      return new PlainProbe(this._value[key], this.path.concat(key));
    }
  }, {
    key: 'get',
    value: function get() {
      return this._value;
    }
  }]);

  return PlainProbe;
}();

exports.default = PlainProbe;