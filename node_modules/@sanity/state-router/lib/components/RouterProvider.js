'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _nanoPubsub = require('nano-pubsub');

var _nanoPubsub2 = _interopRequireDefault(_nanoPubsub);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*:: import type {Node} from 'react'*/
/*:: import type {Router} from '../types'*/
/*:: import type {RouterProviderContext, NavigateOptions, InternalRouter, RouterState} from './types'*/
/*:: type Props = {
  onNavigate: (nextPath: string, options?: NavigateOptions) => void,
  router: Router,
  state: RouterState,
  children: Node
}*/

var RouterProvider = function (_React$Component) {
  _inherits(RouterProvider, _React$Component);

  function RouterProvider(props /*: Props*/) {
    _classCallCheck(this, RouterProvider);

    var _this = _possibleConstructorReturn(this, (RouterProvider.__proto__ || Object.getPrototypeOf(RouterProvider)).call(this));

    _this.navigateUrl = function (url /*: string*/) /*: void*/ {
      var options /*: NavigateOptions*/ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var onNavigate = _this.props.onNavigate;

      onNavigate(url, options);
    };

    _this.navigateState = function (nextState /*: Object*/) /*: void*/ {
      var options /*: NavigateOptions*/ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _this.navigateUrl(_this.resolvePathFromState(nextState), options);
    };

    _this.navigateIntent = function (intentName /*: string*/, params /*: Object*/) /*: void*/ {
      var options /*:: ?: NavigateOptions*/ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      _this.navigateUrl(_this.resolveIntentLink(intentName, params), options);
    };

    _this.getState = function () {
      return _this._state;
    };

    _this.resolvePathFromState = function (state /*: Object*/) /*: string*/ {
      return _this.props.router.encode(state);
    };

    _this.resolveIntentLink = function (intentName /*: string*/, params /*: Object*/) /*: string*/ {
      return _this.props.router.encode({ intent: intentName, params: params });
    };

    _this._state = props.state;
    _this.__internalRouter = {
      resolvePathFromState: _this.resolvePathFromState,
      resolveIntentLink: _this.resolveIntentLink,
      navigateUrl: _this.navigateUrl,
      navigate: _this.navigateState,
      navigateIntent: _this.navigateIntent,
      getState: _this.getState,
      channel: (0, _nanoPubsub2.default)()
    };
    return _this;
  }

  _createClass(RouterProvider, [{
    key: 'getChildContext',
    value: function getChildContext() /*: RouterProviderContext*/ {
      return {
        __internalRouter: this.__internalRouter
      };
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps /*: Props*/) {
      if (this.props.state !== nextProps.state) {
        this._state = nextProps.state;
        this.__internalRouter.channel.publish(nextProps.state);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return this.props.children;
    }
  }]);

  return RouterProvider;
}(_react2.default.Component);

RouterProvider.childContextTypes = {
  __internalRouter: _propTypes2.default.object
};
exports.default = RouterProvider;