'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = withRouter;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _internalRouterContextTypeCheck = require('./internalRouterContextTypeCheck');

var _internalRouterContextTypeCheck2 = _interopRequireDefault(_internalRouterContextTypeCheck);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*:: import type {Router, InternalRouter} from './types'*/
/*:: import type {ComponentType} from 'react'*/
/*:: type State = {
  routerState: Object
}*/


var NO_CONTEXT_STATE = {
  state: {},
  navigate: function navigate(state) {
    throw new Error('Cannot navigate to the state ' + JSON.stringify(state) + '. No router found in context');
  },
  navigateIntent: function navigateIntent(intentName) {
    throw new Error('Cannot navigate to the intent ' + intentName + '. No router found in context');
  }
};

function withRouter /*:: <Props: {}>*/(Component /*: ComponentType<{ router: Router } & Props>*/) /*: ComponentType<Props>*/ {
  var _class, _temp, _initialiseProps;

  return _temp = _class = function (_React$Component) {
    _inherits(_class, _React$Component);

    function _class(props, context) {
      _classCallCheck(this, _class);

      var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));

      _initialiseProps.call(_this);

      var __internalRouter = context.__internalRouter;
      if (__internalRouter) {
        _this.state = { routerState: __internalRouter.getState() };
      }
      return _this;
    }

    _createClass(_class, [{
      key: 'componentWillMount',
      value: function componentWillMount() {
        var _this2 = this;

        var __internalRouter = this.context.__internalRouter;
        if (!__internalRouter) {
          return;
        }
        this.unsubscribe = __internalRouter.channel.subscribe(function () {
          _this2.setState({ routerState: __internalRouter.getState() });
        });
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        this.unsubscribe();
      }
    }, {
      key: 'render',
      value: function render() {
        var internalRouter = this.context.__internalRouter;

        var router /*: Router*/ = internalRouter ? {
          state: this.state.routerState,
          navigate: internalRouter.navigate,
          navigateIntent: internalRouter.navigateIntent
        } : NO_CONTEXT_STATE;

        return _react2.default.createElement(Component, _extends({}, this.props, { router: router }));
      }
    }]);

    return _class;
  }(_react2.default.Component), _class.displayName = 'withRouter(' + (Component.displayName || Component.name) + ')', _class.contextTypes = {
    __internalRouter: _internalRouterContextTypeCheck2.default
  }, _initialiseProps = function _initialiseProps() {
    this.state = {
      routerState: {}
    };
  }, _temp;
}