'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _isEmpty = require('../utils/isEmpty');

var _isEmpty2 = _interopRequireDefault(_isEmpty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/*:: import type {Node} from 'react'*/
/*:: import type {RouterProviderContext, NavigateOptions, InternalRouter} from './types'*/


function addScope(routerState /*: Object*/, scope /*: string*/, scopedState /*: Object*/) {
  return scopedState && _extends({}, routerState, _defineProperty({}, scope, scopedState));
}

/*:: type Props = {
  scope: string,
  children: Node
}*/

var RouteScope = function (_React$Component) {
  _inherits(RouteScope, _React$Component);

  function RouteScope(props /*: Props*/, context /*: RouterProviderContext*/) {
    _classCallCheck(this, RouteScope);

    var _this = _possibleConstructorReturn(this, (RouteScope.__proto__ || Object.getPrototypeOf(RouteScope)).call(this));

    _initialiseProps.call(_this);

    var parentInternalRouter = context.__internalRouter;

    _this.__internalRouter = _extends({}, parentInternalRouter, {
      resolvePathFromState: _this.resolvePathFromState,
      navigate: _this.navigate,
      getState: _this.getScopedState
    });
    return _this;
  }

  _createClass(RouteScope, [{
    key: 'getChildContext',
    value: function getChildContext() /*: RouterProviderContext*/ {
      return {
        __internalRouter: this.__internalRouter
      };
    }
  }, {
    key: 'render',
    value: function render() {
      return this.props.children;
    }
  }]);

  return RouteScope;
}(_react2.default.Component);

RouteScope.childContextTypes = RouteScope.contextTypes = {
  __internalRouter: _propTypes2.default.object
};

var _initialiseProps = function _initialiseProps() {
  var _this2 = this;

  this.getScopedState = function () {
    var scope = _this2.props.scope;

    var parentInternalRouter = _this2.context.__internalRouter;
    return parentInternalRouter.getState()[scope];
  };

  this.resolvePathFromState = function (nextState /*: Object*/) /*: string*/ {
    var parentInternalRouter = _this2.context.__internalRouter;
    var scope = _this2.props.scope;

    var nextStateScoped /*: Object*/ = (0, _isEmpty2.default)(nextState) ? {} : addScope(parentInternalRouter.getState(), scope, nextState);

    return parentInternalRouter.resolvePathFromState(nextStateScoped);
  };

  this.navigate = function (nextState /*: Object*/, options /*: NavigateOptions*/) /*: void*/ {
    var parentInternalRouter = _this2.context.__internalRouter;
    var nextScopedState = addScope(parentInternalRouter.getState(), _this2.props.scope, nextState);
    parentInternalRouter.navigate(nextScopedState, options);
  };
};

exports.default = RouteScope;