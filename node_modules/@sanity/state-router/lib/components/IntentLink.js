'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Link = require('./Link');

var _Link2 = _interopRequireDefault(_Link);

var _internalRouterContextTypeCheck = require('./internalRouterContextTypeCheck');

var _internalRouterContextTypeCheck2 = _interopRequireDefault(_internalRouterContextTypeCheck);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*:: import type {Node} from 'react'*/
/*:: import type {RouterProviderContext} from './types'*/

var IntentLink = function (_React$PureComponent) {
  _inherits(IntentLink, _React$PureComponent);

  function IntentLink() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, IntentLink);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = IntentLink.__proto__ || Object.getPrototypeOf(IntentLink)).call.apply(_ref, [this].concat(args))), _this), _this.setElement = function (element /*: ?Link*/) {
      if (element) {
        _this._element = element;
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(IntentLink, [{
    key: 'focus',
    value: function focus() {
      if (this._element) {
        this._element.focus();
      }
    }
  }, {
    key: 'resolveIntentLink',
    value: function resolveIntentLink(intent /*: string*/, params /*: Object*/) {
      if (!this.context.__internalRouter) {
        return 'javascript://intent@' + JSON.stringify({ intent: intent, params: params });
      }
      return this.context.__internalRouter.resolveIntentLink(intent, params);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          intent = _props.intent,
          params = _props.params,
          rest = _objectWithoutProperties(_props, ['intent', 'params']);

      return _react2.default.createElement(_Link2.default, _extends({ href: this.resolveIntentLink(intent, params) }, rest, { ref: this.setElement }));
    }
  }]);

  return IntentLink;
}(_react2.default.PureComponent);

IntentLink.contextTypes = {
  __internalRouter: _internalRouterContextTypeCheck2.default
};
exports.default = IntentLink;