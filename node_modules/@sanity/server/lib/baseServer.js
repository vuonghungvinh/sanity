'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBaseServer = getBaseServer;
exports.getDocumentElement = getDocumentElement;
exports.applyStaticRoutes = applyStaticRoutes;
exports.callInitializers = callInitializers;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _server = require('react-dom/server');

var _server2 = _interopRequireDefault(_server);

var _requireUncached = require('require-uncached');

var _requireUncached2 = _interopRequireDefault(_requireUncached);

var _resolver = require('@sanity/resolver');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var docPart = 'part:@sanity/base/document';
var initPart = 'part:@sanity/server/initializer';

var getDefaultModule = function getDefaultModule(mod) {
  return mod && mod.__esModule ? mod.default : mod;
};

var getTitle = function getTitle() {
  var project = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var projectName = project && project.name || '';
  return projectName ? projectName + ' - Sanity' : 'Sanity';
};

var assetify = function assetify(assetPath, hashes) {
  return {
    path: assetPath,
    hash: hashes[assetPath]
  };
};

var getDocumentComponent = function getDocumentComponent(basePath) {
  return (0, _resolver.resolveParts)({ basePath: basePath }).then(function (res) {
    var part = res.implementations[docPart];
    if (!part) {
      throw new Error('Part \'' + docPart + '\' is not implemented by any plugins, are you missing @sanity/base?');
    }

    return getDefaultModule((0, _requireUncached2.default)(part[0].path));
  });
};

function getBaseServer() {
  return (0, _express2.default)();
}

function getDocumentElement(_ref) {
  var project = _ref.project,
      basePath = _ref.basePath,
      hashes = _ref.hashes;
  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var assetHashes = hashes || {};
  return getDocumentComponent(basePath).then(function (Document) {
    return _react2.default.createElement(Document, Object.assign({
      title: getTitle(project),
      stylesheets: ['css/main.css'].map(function (item) {
        return assetify(item, assetHashes);
      }),
      scripts: ['js/vendor.bundle.js', 'js/app.bundle.js'].map(function (item) {
        return assetify(item, assetHashes);
      })
    }, props));
  });
}

function applyStaticRoutes(app) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var staticPath = config.staticPath || _path2.default.join(__dirname, '..', 'public');
  app.use('/static', _express2.default.static(staticPath));

  app.get('*', function (req, res) {
    if (req.url.indexOf('/static') === 0) {
      return res.status(404).send('File not found');
    }

    return getDocumentElement(config).then(function (doc) {
      return res.send('<!doctype html>' + _server2.default.renderToStaticMarkup(doc));
    }).catch(function (err) {
      console.error(err.stack); // eslint-disable-line no-console

      res.set('Content-Type', 'text/plain').status(500).send(err.stack);
    });
  });

  return app;
}

function callInitializers(config) {
  (0, _resolver.resolveParts)({ config: config }).then(function (res) {
    var parts = res.implementations[initPart];
    if (!parts) {
      return;
    }

    res.implementations[initPart].map(function (part) {
      return getDefaultModule(require(part.path));
    }).forEach(function (initializer) {
      return initializer(config);
    });
  });
}