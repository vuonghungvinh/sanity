'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _client = require('part:@sanity/base/client');

var _client2 = _interopRequireDefault(_client);

var _user = require('part:@sanity/base/user');

var _user2 = _interopRequireDefault(_user);

var _CookieTest = require('./CookieTest');

var _CookieTest2 = _interopRequireDefault(_CookieTest);

var _loginDialog = require('part:@sanity/base/login-dialog');

var _loginDialog2 = _interopRequireDefault(_loginDialog);

var _ErrorDialog = require('./ErrorDialog');

var _ErrorDialog2 = _interopRequireDefault(_ErrorDialog);

var _sanityStudioLogo = require('part:@sanity/base/sanity-studio-logo');

var _sanityStudioLogo2 = _interopRequireDefault(_sanityStudioLogo);

var _spinner = require('part:@sanity/components/loading/spinner');

var _spinner2 = _interopRequireDefault(_spinner);

var _UnauthorizedUser = require('./UnauthorizedUser');

var _UnauthorizedUser2 = _interopRequireDefault(_UnauthorizedUser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var isProjectLogin = _client2.default.config().useProjectHostname;
var projectId = isProjectLogin && _client2.default.config().projectId ? _client2.default.config().projectId : null;

var LoginWrapper = function (_React$PureComponent) {
  _inherits(LoginWrapper, _React$PureComponent);

  function LoginWrapper() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, LoginWrapper);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = LoginWrapper.__proto__ || Object.getPrototypeOf(LoginWrapper)).call.apply(_ref, [this].concat(args))), _this), _this.state = { isLoading: true, user: null, error: null }, _this.handleRetry = function () {
      _this.setState({ error: null, isLoading: true });
      _user2.default.actions.retry();
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(LoginWrapper, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var _this2 = this;

      this.userSubscription = _user2.default.currentUser.subscribe({
        next: function next(evt) {
          return _this2.setState({ user: evt.user, error: evt.error, isLoading: false });
        },
        error: function error(_error) {
          return _this2.setState({ error: _error, isLoading: false });
        }
      });
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.userSubscription.unsubscribe();
    }
  }, {
    key: 'render',
    value: function render() {
      var _state = this.state,
          error = _state.error,
          user = _state.user,
          isLoading = _state.isLoading;
      var children = this.props.children;

      if (isLoading) {
        return _react2.default.createElement(_spinner2.default, { fullscreen: true, center: true });
      }

      if (error) {
        return _react2.default.createElement(_ErrorDialog2.default, { onRetry: this.handleRetry, error: error });
      }

      if (!user) {
        return _react2.default.createElement(
          _CookieTest2.default,
          this.props,
          _react2.default.createElement(_loginDialog2.default, {
            title: this.props.title,
            description: this.props.description,
            sanityLogo: this.props.sanityLogo,
            projectId: projectId
          })
        );
      }

      if (projectId && !user.role) {
        return _react2.default.createElement(_UnauthorizedUser2.default, { user: user });
      }

      return typeof children === 'function' ? children(user) : children;
    }
  }]);

  return LoginWrapper;
}(_react2.default.PureComponent);

LoginWrapper.propTypes = {
  children: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.func]).isRequired,
  title: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
  description: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
  sanityLogo: _propTypes2.default.node
};
LoginWrapper.defaultProps = {
  title: 'Choose login provider',
  description: null,
  sanityLogo: _react2.default.createElement(_sanityStudioLogo2.default, null)
};
exports.default = LoginWrapper;