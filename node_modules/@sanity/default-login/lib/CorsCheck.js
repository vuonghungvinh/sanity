'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _client = require('part:@sanity/base/client');

var _client2 = _interopRequireDefault(_client);

var _spinner = require('part:@sanity/components/loading/spinner');

var _spinner2 = _interopRequireDefault(_spinner);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var checkCors = function checkCors() {
  return Promise.all([_client2.default.request({ uri: '/ping', withCredentials: false }).then(function () {
    return true;
  }), _client2.default.request({ uri: '/users/me', withCredentials: false }).then(function () {
    return true;
  }).catch(function () {
    return false;
  })]).then(function (res) {
    return {
      isCorsError: res[0] && !res[1],
      pingResponded: res[0]
    };
  }).catch(function (error) {
    return { error: error };
  });
};

var linkRel = 'noopener noreferrer';

var CorsCheck = function (_PureComponent) {
  _inherits(CorsCheck, _PureComponent);

  function CorsCheck() {
    var _ref;

    _classCallCheck(this, CorsCheck);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = CorsCheck.__proto__ || Object.getPrototypeOf(CorsCheck)).call.apply(_ref, [this].concat(args)));

    _this.state = { isLoading: true };
    return _this;
  }

  _createClass(CorsCheck, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var _this2 = this;

      checkCors().then(function (res) {
        return _this2.setState({
          result: res,
          isLoading: false
        });
      });
    }
  }, {
    key: 'renderWrapper',
    value: function renderWrapper(content) {
      var result = this.state.result;
      var response = result && result.error && result.error.response;
      var message = response && response.body && response.body.message;
      if (!message) {
        return content;
      }

      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          'p',
          null,
          'Error message:'
        ),
        _react2.default.createElement(
          'pre',
          null,
          _react2.default.createElement(
            'code',
            null,
            response.body.message
          )
        ),
        content
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _state = this.state,
          isLoading = _state.isLoading,
          result = _state.result;

      var origin = window.location.origin || window.location.href.replace(new RegExp(window.location.pathname + '$'), '');

      if (isLoading) {
        return _react2.default.createElement(_spinner2.default, { fullscreen: true, center: true });
      }

      var tld = _client2.default.config().apiHost.replace(/.*?sanity\.([a-z]+).*/, '$1');
      var projectId = _client2.default.config().projectId;
      var corsUrl = 'https://manage.sanity.' + tld + '/projects/' + projectId + '/settings/api';
      var response = result.error && result.error.response;

      if (response) {
        var is404 = response.statusCode === 404;
        var errType = response.body.attributes && response.body.attributes.type;
        if (is404 && errType === 'project') {
          return _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement(
              'p',
              null,
              response.body.message || response.statusCode
            ),
            _react2.default.createElement(
              'p',
              null,
              'Double-check that your ',
              _react2.default.createElement(
                'code',
                null,
                'sanity.json'
              ),
              ' points to the right project ID?'
            )
          );
        }
      }

      if (result.isCorsError) {
        return this.renderWrapper(_react2.default.createElement(
          'p',
          null,
          'It seems the error could be caused by the current origin (',
          _react2.default.createElement(
            'code',
            null,
            origin
          ),
          ') not being an allowed origin for this project. If you are an administrator or developer of the project, you can head to ',
          _react2.default.createElement(
            'a',
            { rel: linkRel, target: '_blank', href: corsUrl },
            'the project management'
          ),
          ' interface and add the origin under the ',
          _react2.default.createElement(
            'em',
            null,
            'CORS Origins'
          ),
          ' section.'
        ));
      }

      if (result.pingResponded) {
        return this.renderWrapper(_react2.default.createElement(
          'p',
          null,
          'The cause of this error is a little uncertain. It could be a temporary glitch, in which case you might want to try hitting the ',
          _react2.default.createElement(
            'strong',
            null,
            'Retry'
          ),
          ' button below. If you are the developer of this project, you could take a look at the browsers developer console and see if any issues are reported there.'
        ));
      }

      return this.renderWrapper(_react2.default.createElement(
        'p',
        null,
        'It might be that your internet connection is unstable or down, or it ',
        _react2.default.createElement(
          'em',
          null,
          'might'
        ),
        ' be the Sanity API is having some issues, in which case it should hopefully be back up soon! You could also try hitting the ',
        _react2.default.createElement(
          'strong',
          null,
          'Retry'
        ),
        ' button and see if it was just a temporary glitch.'
      ));
    }
  }]);

  return CorsCheck;
}(_react.PureComponent);

exports.default = CorsCheck;