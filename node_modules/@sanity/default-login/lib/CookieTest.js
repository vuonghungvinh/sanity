'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _client = require('part:@sanity/base/client');

var _client2 = _interopRequireDefault(_client);

var _configSanity = require('config:sanity');

var _configSanity2 = _interopRequireDefault(_configSanity);

var _LoginDialog = require('./styles/LoginDialog.css');

var _LoginDialog2 = _interopRequireDefault(_LoginDialog);

var _default = require('part:@sanity/components/buttons/default');

var _default2 = _interopRequireDefault(_default);

var _brandLogo = require('part:@sanity/base/brand-logo?');

var _brandLogo2 = _interopRequireDefault(_brandLogo);

var _spinner = require('part:@sanity/components/loading/spinner');

var _spinner2 = _interopRequireDefault(_spinner);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var projectName = _configSanity2.default.project && _configSanity2.default.project.name || '';

var checkCookies = function checkCookies() {
  return _client2.default.request({ method: 'post', uri: '/auth/testCookie', withCredentials: true }).then(function () {
    return _client2.default.request({ uri: '/auth/testCookie', withCredentials: true }).then(function () {
      return true;
    }).catch(function () {
      return false;
    });
  }).then(function (result) {
    return { isCookieError: !result };
  }).catch(function (error) {
    return { error: error };
  });
};

var CookieTest = function (_PureComponent) {
  _inherits(CookieTest, _PureComponent);

  function CookieTest() {
    var _ref;

    _classCallCheck(this, CookieTest);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = CookieTest.__proto__ || Object.getPrototypeOf(CookieTest)).call.apply(_ref, [this].concat(args)));

    _this.state = { isLoading: true };
    return _this;
  }

  _createClass(CookieTest, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var _this2 = this;

      checkCookies().then(function (res) {
        return _this2.setState({
          result: res,
          isLoading: false
        });
      });
    }
  }, {
    key: 'renderWhiteListForm',
    value: function renderWhiteListForm() {
      // eslint-disable-line class-methods-use-this
      var sanityLogo = this.props.sanityLogo;

      var redirectTo = _client2.default.clientConfig.url + '/auth/whitelist?redirectTo=' + encodeURIComponent(window.location.toString());
      return _react2.default.createElement(
        'div',
        { className: _LoginDialog2.default.root },
        _react2.default.createElement(
          'div',
          { className: _LoginDialog2.default.inner },
          _react2.default.createElement(
            'div',
            { className: _LoginDialog2.default.sanityLogo },
            sanityLogo
          ),
          _react2.default.createElement(
            'div',
            { className: _LoginDialog2.default.branding },
            _react2.default.createElement(
              'h1',
              { className: _brandLogo2.default ? _LoginDialog2.default.projectNameHidden : _LoginDialog2.default.projectName },
              projectName
            ),
            _brandLogo2.default && _react2.default.createElement(
              'div',
              { className: _LoginDialog2.default.brandLogoContainer },
              _react2.default.createElement(_brandLogo2.default, { projectName: projectName })
            )
          ),
          _react2.default.createElement(
            'div',
            { className: _LoginDialog2.default.title },
            _react2.default.createElement(
              'h2',
              { className: _LoginDialog2.default.headline },
              'Accept the Cookie'
            )
          ),
          _react2.default.createElement(
            'div',
            { className: _LoginDialog2.default.description },
            _react2.default.createElement(
              'p',
              null,
              'Your browser didn\'t accept our cookie so we\'re having trouble logging you in.'
            ),
            _react2.default.createElement(
              'p',
              null,
              'You can explicitly accept it though by clicking below.'
            )
          ),
          _react2.default.createElement(
            'form',
            {
              method: 'post',
              className: _LoginDialog2.default.acceptCookieForm,
              action: _client2.default.clientConfig.url + '/auth/testCookie',
              encType: 'application/x-www-form-urlencoded'
            },
            _react2.default.createElement('input', { type: 'hidden', name: 'redirectTo', value: redirectTo }),
            _react2.default.createElement(
              _default2.default,
              { color: 'success', inverted: true, type: 'submit' },
              'ACCEPT COOKIE'
            )
          )
        )
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _state = this.state,
          isLoading = _state.isLoading,
          result = _state.result;


      if (isLoading) {
        return _react2.default.createElement(_spinner2.default, { fullscreen: true, center: true });
      }

      if (result.isCookieError) {
        return this.renderWhiteListForm();
      }

      return _react2.default.createElement(
        'div',
        null,
        this.props.children
      );
    }
  }]);

  return CookieTest;
}(_react.PureComponent);

CookieTest.propTypes = {
  children: _propTypes2.default.node.isRequired
};


CookieTest.propTypes = {
  sanityLogo: _propTypes2.default.node.isRequired
};

exports.default = CookieTest;