'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = resolveProjectRoot;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _readManifest = require('./readManifest');

var _readManifest2 = _interopRequireDefault(_readManifest);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-sync */
function resolveProjectRoot(opts = {}) {
  const options = Object.assign({ basePath: process.cwd() }, opts);

  return options.sync ? resolveProjectRootSync(options) : resolveProjectRootAsync(options);
}

function resolveProjectRootAsync(options) {
  // @todo implement actual async version
  return Promise.resolve(resolveProjectRootSync(options));
}

function resolveProjectRootSync(options) {
  let manifestDir = options.basePath;
  let isProjectRoot = isRoot(manifestDir, options);

  while (!isProjectRoot && _path2.default.dirname(manifestDir) !== manifestDir) {
    manifestDir = _path2.default.dirname(manifestDir);
    isProjectRoot = isRoot(manifestDir, options);
  }

  return isProjectRoot ? manifestDir : false;
}

function isRoot(manifestDir, options) {
  try {
    const manifest = (0, _readManifest2.default)(Object.assign({}, options, {
      manifestDir,
      sync: true
    }));

    return manifest.root || false;
  } catch (err) {
    if (err.code === 'ENOENT') {
      return false;
    }

    // On any error that is not "file not found", rethrow
    throw err;
  }
}