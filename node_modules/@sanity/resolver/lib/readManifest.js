'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _generateHelpUrl = require('@sanity/generate-help-url');

var _generateHelpUrl2 = _interopRequireDefault(_generateHelpUrl);

var _util = require('@sanity/util');

var _validateManifest = require('./validateManifest');

var _validateManifest2 = _interopRequireDefault(_validateManifest);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function readManifestSync(manifestPath, options) {
  try {
    return parseManifest(_fsExtra2.default.readFileSync(manifestPath), options);
  } catch (err) {
    return handleManifestReadError(err, options);
  }
} /* eslint-disable no-sync, no-process-env */


function handleManifestReadError(err, options) {
  if (err.code === 'ENOENT' && options.plugin) {
    const base = `No "sanity.json" file found in plugin "${options.plugin}"`;
    const help = `See ${(0, _generateHelpUrl2.default)('missing-plugin-sanity-json')}`;
    throw new Error(`${base}\n${help}`);
  } else if (err.name === 'ValidationError' && options.plugin) {
    err.message = `Error while reading "${options.plugin}" manifest:\n${err.message}`;
  } else if (err.name === 'ValidationError') {
    err.message = `Error while reading "${options.basePath}/sanity.json":\n${err.message}`;
  }

  throw err;
}

function parseManifest(rawData, options) {
  const parsedManifest = JSON.parse(rawData);
  const manifest = (0, _validateManifest2.default)(parsedManifest);
  const reduced = (0, _util.reduceConfig)(manifest, options.env);
  return reduced;
}

function readManifest(opts = {}) {
  const env = process.env.NODE_ENV || 'development';
  const options = Object.assign({ env }, opts);
  const basePath = options.basePath || process.cwd();
  const manifestPath = _path2.default.join(options.manifestDir || basePath, 'sanity.json');

  if (options.sync) {
    return readManifestSync(manifestPath, options);
  }

  return _fsExtra2.default.readFile(manifestPath, { encoding: 'utf8' }).then(raw => parseManifest(raw, options)).catch(err => handleManifestReadError(err, options));
}

exports.default = readManifest;