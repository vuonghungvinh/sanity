'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolvePlugins = resolvePlugins;
exports.resolvePlugin = resolvePlugin;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _lodash = require('lodash');

var _pathExists = require('path-exists');

var _pathExists2 = _interopRequireDefault(_pathExists);

var _readManifest = require('./readManifest');

var _readManifest2 = _interopRequireDefault(_readManifest);

var _promisePropsRecursive = require('promise-props-recursive');

var _promisePropsRecursive2 = _interopRequireDefault(_promisePropsRecursive);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const dirMatcher = /^\.\.?[/\\]?/;

function resolvePlugins(pluginNames, options) {
  const plugins = pluginNames.map(pluginName => {
    return resolvePlugin(Object.assign({ name: pluginName }, options));
  });

  return options.sync ? plugins : Promise.all(plugins);
}

function resolvePlugin(options) {
  const name = options.name,
        basePath = options.basePath,
        parentPluginPath = options.parentPluginPath,
        sync = options.sync;

  const resolver = sync ? dir => dir : dir => Promise.resolve(dir);
  const parentDir = parentPluginPath || basePath;
  const isDirPlugin = dirMatcher.test(name);

  const pluginName = isDirPlugin ? readPluginName(parentDir, name) : name;

  if (sync) {
    const manifestDir = isDirPlugin ? resolver(_path2.default.resolve(parentDir, name)) : resolvePluginPath({ name, basePath, parentPluginPath }, sync);

    const manifest = (0, _readManifest2.default)({
      sync,
      basePath,
      manifestDir,
      plugin: pluginName
    });

    return {
      name: pluginName,
      manifest,
      path: manifestDir,
      plugins: resolvePlugins(manifest.plugins || [], {
        sync,
        basePath,
        parentPluginPath: manifestDir
      })
    };
  }

  const dirResolver = Promise.resolve(isDirPlugin ? resolver(_path2.default.resolve(parentDir, name)) : resolvePluginPath({ name, basePath, parentPluginPath }, sync));

  return dirResolver.then(manifestDir => {
    const plugin = { name: pluginName, path: manifestDir };
    return (0, _readManifest2.default)({ basePath, manifestDir: plugin.path, plugin: pluginName }).then(manifest => (0, _promisePropsRecursive2.default)(Object.assign(plugin, {
      manifest,
      plugins: resolvePlugins(manifest.plugins || [], {
        basePath,
        parentPluginPath: plugin.path
      })
    })));
  });
}

function resolvePluginPath(plugin, sync) {
  const pluginDir = plugin.name[0] === '@' ? plugin.name : `sanity-plugin-${plugin.name}`;

  let locations = [_path2.default.join(plugin.basePath, 'plugins', pluginDir), _path2.default.join(plugin.basePath, 'plugins', plugin.name), _path2.default.join(plugin.basePath, 'node_modules', pluginDir)];

  if (plugin.parentPluginPath) {
    locations.splice(2, 0, _path2.default.join(plugin.parentPluginPath, 'node_modules', pluginDir));
  }

  let currentDir = plugin.basePath;
  while (_path2.default.dirname(currentDir) !== currentDir) {
    currentDir = _path2.default.dirname(currentDir);
    locations.push(_path2.default.join(currentDir, 'node_modules', pluginDir));
  }

  locations = (0, _lodash.uniq)(locations);

  if (sync) {
    const location = locations.find(_pathExists2.default.sync);
    if (!location) {
      throw getPluginNotFoundError(plugin.name, locations);
    }

    return location;
  }

  return Promise.all(locations.map(_pathExists2.default)).then(matches => matches.findIndex(Boolean)).then(index => {
    if (index === -1) {
      throw getPluginNotFoundError(plugin.name, locations);
    }

    return locations[index];
  });
}

function getPluginNotFoundError(pluginName, locations) {
  const err = new Error([`Plugin "${pluginName}" not found.\n`, 'Locations tried:\n  * ', locations.join('\n  * ')].join(''));

  err.code = 'PluginNotFound';
  err.plugin = pluginName;
  err.locations = locations;

  return err;
}

function readPluginName(parent, dir) {
  const pkgPath = _path2.default.join(parent, dir, 'package.json');
  const manifestPath = _path2.default.join(parent, dir, 'sanity.json');
  const baseError = `Plugin/project at "${parent}" has the path "${dir}" as a plugin, but Sanity was not able to load`;
  const info = {};
  try {
    info.name = readJson(pkgPath).name.replace(/^sanity-plugin-/, '');
  } catch (err) {
    throw new Error(`${baseError} "${pkgPath}" in order to get the plugin name`);
  }

  try {
    info.manifest = readJson(manifestPath);
  } catch (err) {
    throw new Error(`${baseError} "${manifestPath}" in order to get the plugin parts`);
  }

  return info.name;
}

function readJson(file) {
  return JSON.parse(_fs2.default.readFileSync(file, { encoding: 'utf8' }));
}