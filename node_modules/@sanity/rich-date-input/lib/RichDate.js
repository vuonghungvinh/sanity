'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _momentTimezone = require('moment-timezone');

var _momentTimezone2 = _interopRequireDefault(_momentTimezone);

var _generateHelpUrl = require('@sanity/generate-help-url');

var _generateHelpUrl2 = _interopRequireDefault(_generateHelpUrl);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _default = require('part:@sanity/components/formfields/default');

var _default2 = _interopRequireDefault(_default);

var _RichDate = require('./RichDate.css');

var _RichDate2 = _interopRequireDefault(_RichDate);

var _PatchEvent = require('@sanity/form-builder/PatchEvent');

var _PatchEvent2 = _interopRequireDefault(_PatchEvent);

var _reactDatepicker = require('react-datepicker');

var _reactDatepicker2 = _interopRequireDefault(_reactDatepicker);

require('react-datepicker/dist/react-datepicker-cssmodules.css');

var _default3 = require('part:@sanity/components/selects/default');

var _default4 = _interopRequireDefault(_default3);

var _util = require('./util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DEPRECATION_WARNING = _react2.default.createElement(
  'div',
  { className: _RichDate2.default.deprecationWarning },
  'This field has ',
  _react2.default.createElement(
    'code',
    null,
    'type: ',
    'date'
  ),
  ', which is deprecated and should be changed to ',
  _react2.default.createElement(
    'code',
    null,
    'type: ',
    'richDate'
  ),
  '. Please update your schema and migrate your data. ',
  ' ',
  _react2.default.createElement(
    'a',
    {
      href: (0, _generateHelpUrl2.default)('migrate-to-rich-date'),
      target: '_blank',
      rel: 'noopener noreferrer'
    },
    'More info'
  )
);

var RichDateInput = function (_React$PureComponent) {
  _inherits(RichDateInput, _React$PureComponent);

  function RichDateInput() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, RichDateInput);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = RichDateInput.__proto__ || Object.getPrototypeOf(RichDateInput)).call.apply(_ref, [this].concat(args))), _this), _this.handleChange = function (nextValue) {
      var onChange = _this.props.onChange;

      var assembledValue = _this.assembleOutgoingValue(nextValue);
      onChange(_PatchEvent2.default.from(assembledValue ? (0, _PatchEvent.set)(assembledValue) : (0, _PatchEvent.unset)()));
    }, _this.handleTimeChange = function (nextValue) {
      var onChange = _this.props.onChange;

      var assembledValue = _this.assembleOutgoingValue(nextValue.value);
      onChange(_PatchEvent2.default.from(assembledValue ? (0, _PatchEvent.set)(assembledValue) : (0, _PatchEvent.unset)()));
    }, _this.getCurrentValue = function () {
      var value = _this.props.value;

      if (!value) {
        return null;
      }
      return (0, _util.getOptions)(_this.props).inputUtc ? value.utc : value.local;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(RichDateInput, [{
    key: 'assembleOutgoingValue',
    value: function assembleOutgoingValue(newMoment) {
      if (!newMoment || !newMoment.isValid()) {
        return undefined;
      }
      var name = this.props.type.name;

      if ((0, _util.getOptions)(this.props).inputUtc) {
        return {
          _type: name,
          utc: newMoment.utc().format() // e.g. "2017-02-12T09:15:00Z"
        };
      }
      return {
        _type: name,
        local: newMoment.format(), // e.g. 2017-02-21T10:15:00+01:00
        utc: newMoment.utc().format(), // e.g. 2017-02-12T09:15:00Z
        timezone: _momentTimezone2.default.tz.guess(), // e.g. Europe/Oslo
        offset: (0, _momentTimezone2.default)().utcOffset() // e.g. 60 (utc offset in minutes)
      };
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          value = _props.value,
          type = _props.type,
          level = _props.level;
      var title = type.title,
          description = type.description;

      var options = (0, _util.getOptions)(this.props);
      var format = [options.inputDate ? options.dateFormat : null, options.inputTime ? options.timeFormat : null].filter(Boolean).join(' ');
      var timeIntervals = (0, _util.getTimeIntervals)(value, options);
      var activeTimeInterval = timeIntervals.find(function (time) {
        return time.isActive === true;
      });

      var placeholder = typeof type.placeholder === 'function' ? type.placeholder() : type.placeholder;

      return _react2.default.createElement(
        _default2.default,
        {
          labelFor: this.inputId,
          label: title,
          level: level,
          description: description
        },
        type.name === 'date' && DEPRECATION_WARNING,
        _react2.default.createElement(
          'div',
          { className: options.inputTime ? _RichDate2.default.rootWithTime : _RichDate2.default.root },
          options.inputDate && _react2.default.createElement(_reactDatepicker2.default, _extends({}, options, {
            showMonthDropdown: true,
            showYearDropdown: true,
            todayButton: options.calendarTodayLabel,
            selected: value && (0, _momentTimezone2.default)(options.inputUtc ? value.utc : value.local),
            placeholderText: placeholder,
            calendarClassName: _RichDate2.default.datepicker,
            className: _RichDate2.default.input,
            onChange: this.handleChange,
            value: value && (0, _momentTimezone2.default)(options.inputUtc ? value.utc : value.local).format(format),
            showTimeSelect: options.inputTime,
            dateFormat: options.dateFormat,
            timeFormat: options.timeFormat,
            timeIntervals: options.timeStep
          })),
          !options.inputDate && options.inputTime && _react2.default.createElement(_default4.default, {
            items: timeIntervals,
            value: activeTimeInterval,
            onChange: this.handleTimeChange
          })
        )
      );
    }
  }]);

  return RichDateInput;
}(_react2.default.PureComponent);

exports.default = RichDateInput;


RichDateInput.propTypes = {
  value: _propTypes2.default.shape({
    utc: _propTypes2.default.string,
    local: _propTypes2.default.string,
    timezone: _propTypes2.default.string,
    offset: _propTypes2.default.number
  }),
  type: _propTypes2.default.shape({
    title: _propTypes2.default.string.isRequired,
    name: _propTypes2.default.string.isRequired,
    options: _propTypes2.default.object
  }),
  onChange: _propTypes2.default.func,
  level: _propTypes2.default.number
};

RichDateInput.contextTypes = {
  resolveInputComponent: _propTypes2.default.func,
  schema: _propTypes2.default.object,
  intl: _propTypes2.default.shape({
    locale: _propTypes2.default.string
  })
};