{"version":3,"sources":["../../src/middleware/promise.js"],"names":["global","require","Cancel","CancelToken","isCancel","promise","Promise","Error","onReturn","channels","context","resolve","reject","cancel","options","cancelToken","then","abort","publish","reason","error","subscribe","response","setTimeout","request","module","exports"],"mappings":";;AAAA,IAAMA,SAASC,QAAQ,gBAAR,CAAf;AACA,IAAMC,SAASD,QAAQ,iBAAR,CAAf;AACA,IAAME,cAAcF,QAAQ,sBAAR,CAApB;AACA,IAAMG,WAAWH,QAAQ,mBAAR,CAAjB;;AAEA,IAAMI,UAAU,SAAVA,OAAU,GAAM;AACpB,MAAMC,UAAUN,OAAOM,OAAvB;AACA,MAAI,CAACA,OAAL,EAAc;AACZ,UAAM,IAAIC,KAAJ,CAAU,8EAAV,CAAN;AACD;;AAED,SAAO;AACLC,cAAU,kBAACC,QAAD,EAAWC,OAAX;AAAA,aAAuB,IAAIJ,OAAJ,CAAY,UAACK,OAAD,EAAUC,MAAV,EAAqB;AAChE,YAAMC,SAASH,QAAQI,OAAR,CAAgBC,WAA/B;AACA,YAAIF,MAAJ,EAAY;AACVA,iBAAOR,OAAP,CAAeW,IAAf,CAAoB,kBAAU;AAC5BP,qBAASQ,KAAT,CAAeC,OAAf,CAAuBC,MAAvB;AACAP,mBAAOO,MAAP;AACD,WAHD;AAID;;AAEDV,iBAASW,KAAT,CAAeC,SAAf,CAAyBT,MAAzB;AACAH,iBAASa,QAAT,CAAkBD,SAAlB,CAA4BV,OAA5B;;AAEA;AACAY,mBAAW;AAAA,iBAAMd,SAASe,OAAT,CAAiBN,OAAjB,CAAyBR,OAAzB,CAAN;AAAA,SAAX,EAAoD,CAApD;AACD,OAdgC,CAAvB;AAAA;AADL,GAAP;AAiBD,CAvBD;;AAyBAL,QAAQH,MAAR,GAAiBA,MAAjB;AACAG,QAAQF,WAAR,GAAsBA,WAAtB;AACAE,QAAQD,QAAR,GAAmBA,QAAnB;;AAEAqB,OAAOC,OAAP,GAAiBrB,OAAjB","file":"promise.js","sourcesContent":["const global = require('../util/global')\nconst Cancel = require('./cancel/Cancel')\nconst CancelToken = require('./cancel/CancelToken')\nconst isCancel = require('./cancel/isCancel')\n\nconst promise = () => {\n  const Promise = global.Promise\n  if (!Promise) {\n    throw new Error('`Promise` is not available in global scope, and no implementation was passed')\n  }\n\n  return {\n    onReturn: (channels, context) => new Promise((resolve, reject) => {\n      const cancel = context.options.cancelToken\n      if (cancel) {\n        cancel.promise.then(reason => {\n          channels.abort.publish(reason)\n          reject(reason)\n        })\n      }\n\n      channels.error.subscribe(reject)\n      channels.response.subscribe(resolve)\n\n      // Wait until next tick in case cancel has been performed\n      setTimeout(() => channels.request.publish(context), 0)\n    })\n  }\n}\n\npromise.Cancel = Cancel\npromise.CancelToken = CancelToken\npromise.isCancel = isCancel\n\nmodule.exports = promise\n"]}